/*
* All or portions of this file Copyright (c) Amazon.com, Inc. or its affiliates or
* its licensors.
*
* For complete copyright and license terms please see the LICENSE at the root of this
* distribution (the "License"). All use of this software is governed by the License,
* or, if provided, by the license below or the license accompanying this file. Do not
* remove or modify any license notices. This file is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*
*/
// Original file Copyright Crytek GMBH or its affiliates, used under license.

#include "Common.cfi"
#include "ShadowCommon.cfi"

// Shader global descriptions
float Script: STANDARDSGLOBAL
<
string Script =
    "Public;"
    "NoPreview;"
    "SupportsAttrInstancing;"
    "ShaderDrawType = Light;"
    "VertexColors;"
    "AlphaBlendShadows;"

#if %DEPTH_FIXUP
        "DepthFixup;"
#endif

#if %DEPTH_FOG
        "ForceRefractionUpdate;"
#else
        "Refractive;"
#endif
    "ShaderType = Glass;";
>;

#ifndef %VERTCOLORS
#define %VERTCOLORS
#endif

////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////// Custom shading pass structure /////////////////////////////////////
struct fragPassCustom
{
    // Custom per pass data
    half4 cTintMap;             // Tinting amount / cloudiness / spec / decals
    half fHoles;                // Holes in the glass
    half fBackLightMul;     // Backlighting multiplier
    half fFrontLightMask; // Store just frontlighting information to prevent tintcolor getting multiplied by itself on backfaces.
    half fRefrBumpScl;      // Refraction bump scale
    half3 cRefraction;      // Refraction map
    float fDepth;               // Depth
};

struct fragLightPassCustom
{
};

#include "ShadeLib.cfi"

//////////////////////////////// Common vertex shader ////////////////

#include "VertexLib.cfi"

//////////////////////////////// Samplers ////////////////

ENVIRONMENTMAP
ENVIRONMENTCUBEMAP

sampler2D envMapSamplerRefr
{
    Texture = $SceneTarget;
    MinFilter = POINT;
    MagFilter = POINT;
    MipFilter = POINT;
    AddressU = Clamp;
    AddressV = Clamp;
    sRGBLookup = true;
};

sampler2D tintMapSampler = sampler_state
{
    Texture = $Specular;
    string UIName = "Tint Map";
    MinFilter = LINEAR;
    MagFilter = LINEAR;
    MipFilter = LINEAR;
    AddressU = Wrap;
    AddressV = Wrap;
    sRGBLookup = true;
};

sampler2D tintColorSampler = sampler_state
{
    Texture = $CustomMap;
    string UIName = "Tint Colour Map";
    MinFilter = LINEAR;
    MagFilter = LINEAR;
    MipFilter = LINEAR;
    AddressU = Wrap;
    AddressV = Wrap;
    sRGBLookup = true;
};

sampler2D decalSampler = sampler_state
{
    Texture = EngineAssets/Textures/glass_decalatlas_diff.dds;
    MinFilter = LINEAR;
    MagFilter = LINEAR;
    MipFilter = LINEAR;
    AddressU = Clamp;
    AddressV = Clamp;
    sRGBLookup = true;
};

sampler2D decalNormSampler = sampler_state
{
    Texture = EngineAssets/Textures/glass_decalatlas_ddn.dds;
    MinFilter = LINEAR;
    MagFilter = LINEAR;
    MipFilter = LINEAR;
    AddressU = Clamp;
    AddressV = Clamp;
    sRGBLookup = false;
};

// Buffers ////////////////////
#if %_RT_MULTI_LAYER_ALPHA_BLEND
#include "MultiLayerAlphaBlend.cfi"
RasterizerOrderedStructuredBuffer<MLABPackedLayer> MultiLayerAlphaBlendBuffer : register(u5); // per-layer pixel data for alpha
#endif
// Tweakables /////////////////

float BumpScale
<
register = PER_MATERIAL_2.w;
string UIHelp = "Set reflection / refraction bump scale";
string UIName = "Bump Scale";
string UIWidget = "slider";
float UIMin = 0.0;
float UIMax = 2.0;
float UIStep = 0.1;
> = 0.1;

float BackLightScale
<
register = PER_MATERIAL_0.w;
string UIHelp = "Set back lighting color scale";
string UIName = "Back light scale";
string UIWidget = "slider";
float UIMin = 0.0;
float UIMax = 1.0;
float UIStep = 0.01;
> = 0.5;

float4 TintColor
<
register = PER_MATERIAL_1;
string UIHelp = "Set tint color";
string UIName = "Tint Color";
string UIWidget = "color";
> = {1.0, 1.0, 1.0, 1.0};

float TintCloudiness
<
register = PER_MATERIAL_5.z;
string UIName = "Tint Cloudiness";
string UIHelp = "Adjusts cloudiness of tinted areas";
string UIWidget = "slider";
float UIMin = 0.0;
float UIMax = 1.0;
float UIStep = 0.01;
> = 0.0;

#if %DEPTH_FOG
    float FogDensity
    <
    register = PER_MATERIAL_3.x;
    string UIName = "Fog density";
    string UIWidget = "slider";
    float UIMin = 0.0f;
    float UIMax = 10.0f;
    float UIStep = 0.001f;
    > = 1.0;

    float FogCutoffEnd
    <
    register = PER_MATERIAL_3.z;
    string UIName = "Fog cutoff end depth";
    string UIHelp = "After this many meters, fog does not get any stronger";
    string UIWidget = "slider";
    float UIMin = 0.0f;
    float UIMax = 1000.0f;
    float UIStep = 0.001f;
    > = 20.0f;

    float4 FogColor
    <
    register = PER_MATERIAL_4;
    string UIName = "Fog color";
    string UIHelp = "Set fog color";
    string UIWidget = "color";
    > = {1.0, 1.0, 1.0, 1.0};
#endif // %DEPTH_FOG

#if %BLUR_REFRACTION && %TINT_MAP
    float CloudinessMasksBlur
    <
    register = PER_MATERIAL_2.x;
    string UIName = "Cloudiness Masks Blur";
    string UIHelp = "Applies blur just to cloudy areas";
    string UIWidget = "slider";
    float UIMin = 0.0;
    float UIMax = 1.0;
    float UIStep = 0.001;
    > = 0.0;
#endif

#if %BLUR_REFRACTION
    float BlurAmount
    <
    register = PER_MATERIAL_3.y;
    string UIName = "Blur Amount";
    string UIHelp = "Controls amount of blur";
    string UIWidget = "slider";
    float UIMin = 0.0;
    float UIMax = 2.0;
    float UIStep = 0.001;
    > = 0.5;
#endif

#if %TINT_MAP
    float CloudinessReducesGloss
    <
    register = PER_MATERIAL_3.w;
    string UIName = "Cloudiness Masks Gloss";
    string UIHelp = "Makes cloudy areas less glossy";
    string UIWidget = "slider";
    float UIMin = 0.0;
    float UIMax = 1.0;
    float UIStep = 0.001;
    > = 0.5;
#endif

#if %SAA_FILTERING
half RoughnessBoost
<
    register = PER_MATERIAL_5.x;
    string UIHelp = "Multiplier for specular antialiasing roughness";
    string UIName = "SAA Roughness Boost";
    string UIWidget = "slider";
    float UIMin = 0.0;
    float UIMax = 10;
    float UIStep = 0.005;
> = 2.0;

half RoughnessMaxFootprint
<
    register = PER_MATERIAL_5.y;
    string UIHelp = "SAA Max Footprint";
    string UIName = "Roughness maximum footprint";
    string UIWidget = "slider";
    float UIMin = 0.0001;
    float UIMax = 10.0;
    float UIStep = 0.005;
> = 0.3;
#endif

float BumpMapTile
<
register = PER_MATERIAL_2.y;
string UIName = "Bump Map Tiling";
string UIHelp = "Adjusts tiling of bump map independently from diffuse";
string UIWidget = "slider";
float UIMin = 0.0;
float UIMax = 20.0;
float UIStep = 0.01;
> = 1.0;

////////////////////////////////////////////////////////////////////////////
// Impact/smash decals
// Note: Num decals *MUST* be kept in sync with code (D3DREBreakableGlass.cpp)
#define gNumImpactDecals        8
#define ResInfoImpactDecal  float2(2048.0f, 1024.0f)
#define EXTRA_IMPACT_DECALS 1

// Note: Structure *MUST* be kept in sync with code (D3DREBreakableGlass.cpp)
/*
struct SDecal
{
    float4 decalTransform;
    float4 atlasOffset;
}
*/
#define gNumImpactDecalElems 2
float4 gImpactDecals[gNumImpactDecals * gNumImpactDecalElems];

////////////////////////////////////////////////////////////////////////////
// Depth fog computation for glass shader
// TODO: move to VolumetricFog.cfi when required by other shaders
float ComputeDepthFog(in float fDepth, in float fZBuffer, in float fFogDensity)
{
    // Sample background depth
    float fBackgroundZ = fZBuffer;

    // Background depth is in camera depth, correct to be in object depth
    //  - Clamp depth to enable fade-out against far away objects
    fBackgroundZ -= fDepth;
    fBackgroundZ = min(fBackgroundZ, FogCutoffEnd);
    float fFogLevel = saturate(exp2(-fBackgroundZ * fFogDensity));

    return fFogLevel;
}

////////////////////////////////////////////////////////
//                GENERAL PASS
////////////////////////////////////////////////////////
vert2FragGeneral GlassVS(app2vertGeneral IN)
{
    vert2FragGeneral OUT = (vert2FragGeneral)0;

    streamPos vertPassPos = (streamPos)0;
    vs_shared_output(IN, OUT, vertPassPos, false);

#if %_RT_FOG && !%_RT_DECAL_TEXGEN_2D && !%_RT_VOLUMETRIC_FOG

    if (UseFogVolumeShadingQualityHigh)
    {
        float fog = GetFogVolumeGlobalValue(vertPassPos.WorldPos);

        OUT.AvgFogVolumeContrib.w = saturate(fog);
        OUT.AvgFogVolumeContrib.xyz = AvgFogVolumeContrib[0].xyz;
    }
    else
    {
        OUT.AvgFogVolumeContrib.w = 0;
    }

#endif // #if %_RT_FOG && !%_RT_DECAL_TEXGEN_2D && !%_RT_VOLUMETRIC_FOG


    return OUT;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////
void frag_unify_parameters(inout fragPass pPass)
{
    pPass.bCustomComposition = true;
    pPass.bDontUseBump = true; // Ensures bumpmap doesn't get looked up twice (once in fraglib, once in glass)

    // Pre-multiplied constants per-vertex (optimization)
    pPass.pCustom.fBackLightMul = 1 - (BackLightScale * 2);
    pPass.pCustom.fRefrBumpScl = BumpScale;
    pPass.bRenormalizeNormal = true;
    pPass.bApplyGI = false;

    pPass.pCustom.fDepth = -mul((float3x3)PerView_ViewMatr, pPass.IN.vView.xyz).z;

    #if %ENVIRONMENT_MAP
        pPass.nReflectionMapping = REFLECT_CUBE;
    #endif

    #if %_RT_TILED_SHADING
        pPass.nReflectionMapping = 0;
    #endif
}

////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////
void frag_custom_begin(inout fragPass pPass)
{
    half3 tintMap = half3(1, 0, 1);
    pPass.pCustom.cTintMap = half4(1, 0, 1, 0); // Initialize to full tint / no cloudiness / full spec / no decals
    pPass.pCustom.fHoles = 1; // Initialize to no holes
    pPass.cSpecularMap.xyz = PerMaterial_SpecularColor.xyz;

    #if !%DIRT_MAP
        pPass.cDiffuseMap.xyzw = half4(0, 0, 0, 0); // Hopefully diffuse lookup in fraglib will compile out, if not may need to add a custom boolean check in fraglib
        // Output opacity
        pPass.fAlpha = 1;
    #else
        pPass.cDiffuseMap.xyz *= PerMaterial_DiffuseColor.xyz;
        const half reflectanceDielectricLow = 0.03;
        pPass.cSpecularMap.xyz = lerp(PerMaterial_SpecularColor.xyz, reflectanceDielectricLow, pPass.cDiffuseMap.w);
        // Output opacity
        pPass.fAlpha = pPass.cDiffuseMap.w;
    #endif

    #if %SPECULAR_MAP
        tintMap = tex2D(tintMapSampler, pPass.IN.baseTC.xy).xyz;

        #if %TINT_MAP
            pPass.pCustom.cTintMap.xyz = tintMap.xyz;
            pPass.fGloss *= saturate(1 - tintMap.y * CloudinessReducesGloss);
            pPass.cSpecularMap = tintMap.z;
        #else
            pPass.cSpecularMap.xyz = tintMap.xyz;
        #endif
    #endif

    pPass.fGloss *= GetTexture2D(smoothnessMapSampler, pPass.IN.baseTC.xy).r;

	#if %SAA_FILTERING
        pPass.fGloss = RoughnessToSmoothness(GetKaplanyanRoughness(pPass.mTangentToWS, pPass.IN.screenProj, SmoothnessToRoughness(pPass.fGloss,0)));
    #endif

    // sun shadows
    pPass.cShadowOcclMap.w = 1-ShadowDepthTest(pPass.IN.vView.xyz + PerView_WorldViewPos.xyz);

    // Calculate bumped normal
    pPass.cBumpMap = GetNormalMap(normalMapSampler, pPass.IN.bumpTC.xy * BumpMapTile);
    pPass.vNormal = normalize(mul(pPass.cBumpMap.xyz, pPass.mTangentToWS));
    pPass.fNdotE = dot(pPass.vView.xyz, pPass.vNormal.xyz);
    pPass.vReflVec = (2.0h * pPass.fNdotE * pPass.vNormal.xyz) - pPass.vView.xyz;

    half3 newNormal = half3(0, 0, 1);

    #if !%_RT_SAMPLE0
        newNormal.xy += pPass.cBumpMap.xy * pPass.pCustom.fRefrBumpScl;

    #else
        // Fixed "random" decal transformations
        const float randRot[gNumImpactDecals] =
        {
            4.39f, 1.89f, 3.77f, 1.26f,
            #if EXTRA_IMPACT_DECALS
                5.03f, 5.66f, 0.63f, 3.14f,
            #endif
        };

        const float randScale[gNumImpactDecals] =
        {
            0.95f, 1.15f, 0.9f, 1.05f,
            #if EXTRA_IMPACT_DECALS
                0.9f, 1.1f, 0.95f, 1.0f,
            #endif
        };

        // Factor in any overlapping decals
        float2 decalNorm = 0.0f;

        for (int i = 0; i < gNumImpactDecals; ++i)
        {
            // Get base decal data
            int decalDataOffset = i * gNumImpactDecalElems;
            float4 decal = gImpactDecals[decalDataOffset];
            float2 tempUVs = pPass.IN.baseTC.xy - 0.5f;
            float2 scale = decal.zw * randScale[i];

            // Calculate offset UV coords
            float2 decalUV = tempUVs;
            decalUV = decalUV * scale + 0.5f;
            decalUV += (0.5f - decal.xy) * scale;

            // Only sample if decal uv is in unit circle around center
            // - Should save ~20% of redunant samples vs. square test
            float2 validRange = abs(decalUV - 0.5f);
            float edgeDistSq = dot(validRange, validRange);
            float halfUnitRadiusSq = 0.707f * 0.5f;

            if (edgeDistSq <= halfUnitRadiusSq)
            {
                // Convert distance to 1/10th edge fade (to hide any clipping)
                float edgeFade = edgeDistSq - halfUnitRadiusSq * 0.9f;
                edgeFade = saturate(1.0f - edgeFade * 10.0f);

                // Apply local rotation
                float rsin, rcos;
                sincos(randRot[i], rsin, rcos);

                tempUVs = decalUV - 0.5f;
                decalUV.x = dot(tempUVs, float2(rcos, -rsin));
                decalUV.y = dot(tempUVs, float2(rsin, rcos));
                decalUV = saturate(decalUV + 0.5f);

                // Convert to atlas decal coordinates
                float4 atlas = gImpactDecals[decalDataOffset + 1];
                decalUV = decalUV * atlas.xy + atlas.zw;

                // Apply decal
                float lodDecal = ComputeTextureLOD(decalUV.xy, ResInfoImpactDecal.xy);

                float3 decalDiff = tex2Dlod(decalSampler, float4(decalUV, 0, lodDecal)).rgb;
                decalNorm += GetXYNormalMapLod(decalNormSampler, float4(decalUV, 0, lodDecal)) * edgeFade;

                pPass.pCustom.cTintMap.w += decalDiff.x * edgeFade;
                pPass.pCustom.fHoles *= decalDiff.y;
            }
        }

        // Stop holes refracting
        pPass.pCustom.fRefrBumpScl *= pPass.pCustom.fHoles;

        // Combine normal results
        newNormal.xy += pPass.cBumpMap.xy * pPass.pCustom.fRefrBumpScl;

        const float decalNormStrength = 0.75f;
        newNormal.xy += decalNorm * decalNormStrength;
    #endif // %_RT_SAMPLE0

    newNormal = normalize(newNormal); // TODO: Can we got rid of this or does it break 360 lighting?

    const half2 refractionNormScale = 0.1h*PerView_HPosScale.xy;
    half2 tcRefractionOffset = newNormal * refractionNormScale;

    half4 cBackbuffer = 0;
    pPass.pCustom.cRefraction = 0;

    // Get current pixel screen space coordinates
    float2 tcProj = (pPass.IN.screenProj.xy/pPass.IN.screenProj.w);

    // Get refracted depth buffer
    float fFarPlaneScale = PerView_NearFarClipDist.y;
    #if %_RT_NEAREST
        fFarPlaneScale /= PerView_NearFarClipDist.z;
    #endif

    float fZBufferRefrac = GetLinearDepth(sceneDepthSampler, tcProj + tcRefractionOffset) * fFarPlaneScale;
    tcProj += tcRefractionOffset * saturate(fZBufferRefrac - pPass.pCustom.fDepth);

    // Copy/pasted DOF blur code - This is too expensive for consoles...
    // TODO: investigate cheaper version - should probably disable on lower PC settings too.
    #if %BLUR_REFRACTION && !METAL && !GLES3
        int tapCount = 37;
        float fScale = BlurAmount * 0.003;

        float2 poisson[37] =
        {
            float2(-1.0*fScale, 0),
            float2(-2.0*fScale, 0),
            float2(-3.0*fScale, 0),
            float2(0.0, 0),
            float2(3.0*fScale, 0),
            float2(2.0*fScale, 0),
            float2(1.0*fScale, 0),
            // 7

            float2(-1.0*fScale, -1.0*fScale),
            float2(-2.0*fScale, -1.0*fScale),
            float2(-3.0*fScale, -1.0*fScale),
            float2(0.0, -1.0*fScale),
            float2(3.0*fScale, -1.0*fScale),
            float2(2.0*fScale, -1.0*fScale),
            float2(1.0*fScale, -1.0*fScale),
            // 14

            float2(-1.0*fScale, 1.0*fScale),
            float2(-2.0*fScale, 1.0*fScale),
            float2(-3.0*fScale, 1.0*fScale),
            float2(0.0, 1.0*fScale),
            float2(3.0*fScale, 1.0*fScale),
            float2(2.0*fScale, 1.0*fScale),
            float2(1.0*fScale, 1.0*fScale),
            // 21

            float2(-2.0*fScale,  2.0*fScale),
            float2(-1.0*fScale,  2.0*fScale),
            float2(0.0, 2.0*fScale),
            float2(1.0*fScale,  2.0*fScale),
            float2(2.0*fScale,  2.0*fScale),
            // 26

            float2(-2.0*fScale, -2.0*fScale),
            float2(-1.0*fScale, -2.0*fScale),
            float2(0.0, -2.0*fScale),
            float2(1.0*fScale, -2.0*fScale),
            float2(2.0*fScale, -2.0*fScale),
            // 31


            float2(-1.0*fScale, 3.0*fScale),
            float2(0.0, 3.0*fScale),
            float2(1.0*fScale, 3.0*fScale),
            // 34

            float2(-1.0*fScale, -3.0*fScale),
            float2(0.0, -3.0*fScale),
            float2(1.0*fScale, -3.0*fScale),
            // 37
        };

        half4 cAcc = 0;
        half mask = 1;

        #if %TINT_MAP
            mask = saturate(tintMap.y + (1-CloudinessMasksBlur));
        #endif

        for (int t = 0; t<tapCount; t++)
        {
            half4 tap = tex2D(envMapSamplerRefr, tcProj + poisson[t] * mask);
            cAcc += tap;
        }

        cAcc /= tapCount;
        cBackbuffer = cAcc;
    #else
    
    #if GMEM
        cBackbuffer.xyz = GMEM_HDR_RT0.Load(int3(0,0,0)).rgb;
    #else
        cBackbuffer = tex2D(envMapSamplerRefr, tcProj);
    #endif
    
    #endif

    #if %DEPTH_FOG
        // Get depth buffer
        float fFogLevel = ComputeDepthFog(pPass.pCustom.fDepth, fZBufferRefrac, FogDensity); // Compute fog
        cBackbuffer = lerp(FogColor, cBackbuffer, fFogLevel); // Colorize fog and mix it with backbuffer
    #endif

    // Get refraction color
    pPass.pCustom.cRefraction = DecodeHDRBuffer(cBackbuffer).xyz;

    #if %_RT_HDR_MODE && %_RT_FOG && !%_RT_DECAL_TEXGEN_2D && %_RT_VOLUMETRIC_FOG && !%_RT_MULTI_LAYER_ALPHA_BLEND
        // subtract volumetric fog color from refraction because fog between camera and glass is applied in frag_fog_setup function.
        VolumetricFogTexcoord vtc = GetVolumetricFogTexcoordParamByScreenProj(pPass.IN.screenProj);
        float4 vf = GetVolumetricFogValue(vtc);
        half4 globalFogColor = GetVolumetricFogAnalyticalColor(pPass.IN.vView.xyz).xyzw;
        half3 fogColor = 0.0f;
        ApplyVolumetricFog(vf, globalFogColor, vtc, fogColor.xyz);
        pPass.pCustom.cRefraction.xyz -= fogColor.xyz;
    #endif

}

////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////
void frag_custom_per_light(inout fragPass pPass, inout fragLightPass pLight)
{
    #if !%UNLIT
        half lightWrap = 0.15h; // This parameter just wraps the light around a bit more to fake a bit of internal bounce in semi-opaque solid glass. Needs work!
        pPass.pCustom.fFrontLightMask = saturate(pLight.fNdotL + lightWrap);
        half NdotLBackLight = saturate(-pLight.fNdotL + lightWrap) * saturate((1 - pPass.cDiffuseMap.w) - pPass.pCustom.fBackLightMul) + pPass.pCustom.fFrontLightMask;

        pLight.fNdotL = saturate(pLight.fNdotL);
        half    fRoughness = SmoothnessToRoughness(pPass.fGloss, MIN_ROUGHNESS);
        half3   cDiffuse = pLight.cDiffuse.xyz * pLight.fNdotL;
        half3   cSpecular = pLight.cSpecular.xyz * SpecularBRDF(fRoughness, pPass.vNormal, pPass.vView, pLight.vLight, pPass.cSpecularMap.rgb, 1.0) * pLight.fNdotL;

        half3 cK = pLight.fOcclShadow * pLight.fFallOff * pLight.cFilter * saturate(NdotLBackLight);

        pPass.cDiffuseAcc.xyz += cDiffuse.xyz * cK;
        pPass.cSpecularAcc.xyz += cSpecular.xyz * cK;
    #endif
}

////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////
void frag_custom_ambient(inout fragPass pPass, inout half3 cAmbient)
{
    if (pPass.nReflectionMapping)
    {
        // Use low mip level of specular cubemap as irradiance approximation
        pPass.cAmbientAcc.xyz += DecodeHDRCubemap(texCUBElod(envMapSamplerCUBE, half4(pPass.vNormal.xyz, 5))).xyz;
    }
}

////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////

#include "TiledShading.cfi"

void frag_custom_end(inout fragPass pPass, inout half3 cFinal)
{
    #if %_RT_TILED_SHADING
        TiledForwardShading(pPass, true, true);
    #endif

    half3 tintBackground = half3(0, 0, 0);
    half3 tintDiffuse = half3(0, 0, 0);
    half3 litDiffuse = half3(0, 0, 0);

    const half decalWhiteTint = 0.45h;
    const half decalCloudiness = 0.45h;

    #if %_RT_SAMPLE0
        half4 vertColor = pPass.IN.Color;
    #else
        half4 vertColor = half4(1, 1, 1, 1);
    #endif

    float3 alteredTintColor      = TintColor.xyz;
    float  alteredTintCloudiness = TintCloudiness;

    #if %TINT_COLOR_MAP
        alteredTintColor *= tex2D(tintColorSampler, pPass.IN.baseTC.xy).xyz;
    #endif
    alteredTintColor = saturate(alteredTintColor * vertColor.rgb + pPass.pCustom.cTintMap.w * decalWhiteTint); // Tend tint color toward white based on decals

    #if %TINT_MAP
        alteredTintCloudiness = saturate(alteredTintCloudiness * pPass.pCustom.cTintMap.x * pPass.pCustom.cTintMap.y + pPass.pCustom.cTintMap.w * decalCloudiness);
        alteredTintColor = saturate(alteredTintColor + (1 - pPass.pCustom.cTintMap.x));
    #else
        alteredTintCloudiness = saturate(alteredTintCloudiness + pPass.pCustom.cTintMap.w * decalCloudiness);
    #endif

    tintDiffuse = alteredTintColor * (pPass.cDiffuseAcc.xyz + pPass.cAmbientAcc.xyz);
    litDiffuse = pPass.cDiffuseMap.xyz * (pPass.cDiffuseAcc.xyz + pPass.cAmbientAcc.xyz);
    half3 fresnel = GetEnvmapFresnel(pPass.cSpecularMap.xyz, pPass.fGloss, pPass.fNdotE);

    if (pPass.nReflectionMapping)
    {
        pPass.cSpecularAcc.xyz += pPass.cEnvironment.xyz * fresnel;
    }

    #if %_RT_MULTI_LAYER_ALPHA_BLEND

        alteredTintColor.rgb *= 1.0f - alteredTintCloudiness;

        half3 cDiffuse = lerp(tintDiffuse * alteredTintCloudiness, litDiffuse, pPass.cDiffuseMap.w);

        #if %_RT_APPLY_TOON_SHADING
           cDiffuse = calculateToonColor(cDiffuse);
        #endif

        alteredTintColor.rgb *= 1.0f - pPass.cDiffuseMap.w;
        alteredTintColor.rgb *= 1.0f - fresnel;

        float opacity = pPass.IN.Ambient.w * vertColor.a * pPass.pCustom.fHoles;
        cFinal.xyz = (pPass.cSpecularAcc.xyz + cDiffuse * (1.0 - fresnel)) * opacity;

        alteredTintColor.rgb = lerp(float3(1.0f, 1.0f, 1.0f), alteredTintColor.rgb, opacity);

        #if %_RT_ADDITIVE_BLENDING
            pPass.pCustom.cTintMap.rgb = float3(1.0f, 1.0f, 1.0f);
        #else
            pPass.pCustom.cTintMap.rgb = alteredTintColor.rgb;
        #endif

    #else //!%_RT_MULTI_LAYER_ALPHA_BLEND

        tintBackground = pPass.pCustom.cRefraction.xyz * alteredTintColor.xyz;

        half3 tintBlend = lerp(tintBackground, tintDiffuse, alteredTintCloudiness);
        half3 cDiffuse = lerp(tintBlend, litDiffuse, pPass.cDiffuseMap.w);

        #if %_RT_APPLY_TOON_SHADING
            cDiffuse = calculateToonColor(cDiffuse);
        #endif

        cFinal.xyz = lerp(cDiffuse, pPass.cSpecularAcc.xyz, fresnel);

        // Alpha out holes and apply material opacity
        pPass.fAlpha = pPass.pCustom.fHoles * pPass.IN.Ambient.w;
        pPass.fAlpha *= vertColor.a;

    #endif // END %_RT_MULTI_LAYER_ALPHA_BLEND
}

////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////

#include "fragLib.cfi"

///////////////// pixel shader //////////////////

EARLYDEPTHSTENCIL
pixout GlassPS(vert2FragGeneral IN, bool bIsFrontFace : SV_IsFrontFace)
{
    pixout OUT = (pixout) 0;

    // Initialize fragPass structure
    fragPass pPass = (fragPass) 0;
    frag_unify(pPass, IN);

    // Support for double-sided lighting
    pPass.IN.vNormal *= bIsFrontFace ? 1.0f : -1.0f;

    half4 cFinal = frag_shared_output(pPass);
#if %_RT_FOG && !%_RT_DECAL_TEXGEN_2D && !%_RT_VOLUMETRIC_FOG

   cFinal.xyz = lerp(cFinal.xyz, IN.AvgFogVolumeContrib.xyz, IN.AvgFogVolumeContrib.w);

#endif 
    #if %_RT_MULTI_LAYER_ALPHA_BLEND

        float depth = GetScreenCoords(IN.WPos).w;

        uint flags = 0;
        #if %DEPTH_FIXUP && %_RT_DEPTHFIXUP
            float3 average = float3(0.2126, 0.7152, 0.0722); // Base average on luminance coefficients
            float transmittance = dot(pPass.pCustom.cTintMap.rgb, average);
            flags |= transmittance < 1.0f - DepthFixupThreshold ? MLAB_DO_DEPTH_FIXUP : 0;
        #endif

        MLABInsertLayer(MultiLayerAlphaBlendBuffer, cFinal.xyz, pPass.pCustom.cTintMap.rgb, depth, flags, PerFrame_MultiLayerAlphaBlendData.x, int2(IN.WPos.xy), int(PS_ScreenSize.x));
        HDROutput(OUT, half4(pPass.pCustom.cRefraction.xyz, 1.0), 1);

    #else //%_RT_MULTI_LAYER_ALPHA_BLEND

        HDROutput(OUT, cFinal, 1);
        DepthFixupOutput(OUT.Color, cFinal.a, IN.WPos);

    #endif //%_RT_MULTI_LAYER_ALPHA_BLEND

    return OUT;
}

//////////////////////////////// technique ////////////////
technique General
<
string Script =
    "TechniqueMotionBlur=MotionBlurPass;"
    "TechniqueShadowGen=ShadowGen;"
    >
{
    pass p0
    {
        VertexShader = GlassVS() GlassVS;
        PixelShader = GlassPS() GlassPS;

        CullMode = Back;
        ZEnable = true;
        ZWriteEnable = false;

        SrcBlend = ONE;
        DestBlend = ZERO;
        AlphaBlendEnable = false;
    }
}

//////////////////////////////// Common techniques ////////////////
#include "CommonMotionBlurPass.cfi"
#include "CommonShadowGenPass.cfi"
/////////////////////// eof ///

////////////////////////////////////////////////////////////////////////////////////////////////// 

#ifdef %ST_FIXED_POINT
Texture2D <uint> sceneDepthSamplerScaled : TS_ZTargetScaled ;
#else
sampler2D sceneDepthSamplerScaled = sampler_state
{
	Texture = $ZTargetScaled;
	MinFilter = POINT;
	MagFilter = POINT;
	MipFilter = POINT;
	AddressU = Clamp;
	AddressV = Clamp;
};
#endif

// Compiler workaround
half4 _DecodeRGBK(in half4 Color, const half fMultiplier, bool bUsePPP= false)
{
  Color.rgb *= (Color.a ) * fMultiplier; //
  return Color;
}

float _GetLinearDepth(sampler2D depthSampler, in float2 screenCoord)
{
	float fDepth = tex2Dlod( depthSampler, float4(screenCoord , 0, 0)).x;
	return GetLinearDepth(fDepth, true);
}

half _GetUnnormalizedLinearDownscaledDepth(in sampler2D depthSmp, in float2 screenCoord)
{
	float4 fDepth = tex2Dlod(depthSmp, float4(screenCoord, 0, 0));
	return GetUnnormalizedLinearDownscaledDepth(fDepth);
}

half GetDownscaledDepthRefl(sampler2D depthSampler, half2 uv)
{
	half ret;
	// Sample the regular depth buffer
	ret = _GetLinearDepth(depthSampler, uv).x;

	return ret;
}

// Adapted from DeferredShading.cfx SSRefl - todo: generalize for plane
half4 ReflectionPassPS( v2f_hs IN, half4 vNormal )
{
	half4 OUT = 0;
	
	// Do the specular reflection with ray marching.
	float4 specularRefl = float4(0,0,0,0);

	const float borderSize = 0.15*PerView_HPosScale.y;  // Fade out at borders

	const float fDepth = IN.screenProj.w* PerView_NearFarClipDist.w;
	float3 vPositionWS = IN.vPosWS.xyz + float3(0,0,0.0);
	
	float3 viewVec = normalize( vPositionWS - PerView_WorldViewPos);
	float3 reflVec = normalize( reflect( viewVec, vNormal.xyz ) );

	float4 rayStart = mul( mViewProj, float4( vPositionWS, 1 ) ); 
	rayStart.z = fDepth;
	rayStart.xy = rayStart.xy * float2(0.5, -0.5) + 0.5 * rayStart.w;

	rayStart.xy = GetScaledScreenTC(rayStart.xy);

	{
		const int numSamples = 1;
		
		// far reflection setup
		float vecLen = 128* vNormal.w + 1;
		float stepSize = 1.0 / numSamples;
		float intervalSize = 3*vecLen / (numSamples * 2) / PerView_NearFarClipDist.y; 

		float3 rayVec = reflVec;
		rayVec *= vecLen;
		float4 rayEnd = mul( mViewProj, float4( vPositionWS + rayVec, 1 ) );

		// Compute linear z
		rayEnd.z = PerView_ProjRatio.y / (rayEnd.z / rayEnd.w - PerView_ProjRatio.x);

		// Precomputation to reduce work in loop
		rayEnd.xy = GetScaledScreenTC(rayEnd.xy * float2(0.5, -0.5) + 0.5 * rayEnd.w);

		float4 ray = rayEnd - rayStart;

		float len = stepSize;
		float bestLen = 0;

		float4 projPos = rayStart + ray * len;
		projPos.xy /= projPos.w;

		float fDepthTapBuf = GetDownscaledDepth(sceneDepthSamplerScaled, projPos.xy);					// 1 alu, 1 tex
		bestLen = len;

		{
			float4 projPos = rayStart + ray * bestLen;
			projPos.xy /= projPos.w;

			float3 color = tex2Dlod(RefractionHalfResSampler, float4(projPos.xy, 0, 0));
			specularRefl.rgb = color;

			float borderDist = projPos.y;
			borderDist = min( 1 - projPos.y, borderDist );
			float edgeWeight = borderDist > borderSize ? 1 : saturate((borderDist / borderSize) );

			half alpha = edgeWeight;
			specularRefl.a += alpha;
		}

		// local reflections setup
		bestLen = 0;
		const int numSamples2 = 8;
		vecLen = 16*vNormal.w + 1; // The length of ray varies from 1 to 16 depending on the glossiness.
		stepSize = 1.0 / numSamples2;
		intervalSize = 3* vecLen / (numSamples2 * 2) / PerView_NearFarClipDist.y; //3*  // far reflection
		  
		rayVec = reflVec;
		rayVec *= vecLen;
		rayEnd = mul( mViewProj, float4( vPositionWS + rayVec, 1 ) );

		// Compute linear z
		rayEnd.z = PerView_ProjRatio.y / (rayEnd.z / rayEnd.w - PerView_ProjRatio.x);

		// Precomputation to reduce work in loop
		rayEnd.xy = GetScaledScreenTC(rayEnd.xy * float2(0.5, -0.5) + 0.5 * rayEnd.w);

		ray = rayEnd - rayStart;

		len = stepSize;

		projPos = rayStart + ray * len;
		projPos.xy /= projPos.w;

		fDepthTapBuf = GetDownscaledDepth(sceneDepthSamplerScaled, projPos.xy);					// 1 alu, 1 tex
		if( abs(fDepthTapBuf - projPos.z) >= intervalSize ) // 0
		{
			len += stepSize;

			projPos = rayStart + ray * len;
			projPos.xy /= projPos.w;

			fDepthTapBuf = GetDownscaledDepth(sceneDepthSamplerScaled, projPos.xy);					// 1 alu, 1 tex
			if( abs(fDepthTapBuf - projPos.z) >= intervalSize ) // 1
			{
				len += stepSize;

				projPos = rayStart + ray * len;
				projPos.xy /= projPos.w;

				fDepthTapBuf = GetDownscaledDepth(sceneDepthSamplerScaled, projPos.xy);					// 1 alu, 1 tex
				if( abs(fDepthTapBuf - projPos.z) >= intervalSize ) //2 
				{
					len += stepSize;

					projPos = rayStart + ray * len;
					projPos.xy /= projPos.w;

					fDepthTapBuf = GetDownscaledDepth(sceneDepthSamplerScaled, projPos.xy);					// 1 alu, 1 tex
					if( abs(fDepthTapBuf - projPos.z) >= intervalSize ) // 3
					{
						len += stepSize;

						projPos = rayStart + ray * len;
						projPos.xy /= projPos.w;

						fDepthTapBuf = GetDownscaledDepth(sceneDepthSamplerScaled, projPos.xy);					// 1 alu, 1 tex
						if( abs(fDepthTapBuf - projPos.z) >= intervalSize ) // 4
						{
							len += stepSize;

							projPos = rayStart + ray * len;
							projPos.xy /= projPos.w;

							fDepthTapBuf = GetDownscaledDepth(sceneDepthSamplerScaled, projPos.xy);					// 1 alu, 1 tex
							if( abs(fDepthTapBuf - projPos.z) >= intervalSize ) //5
							{
								len += stepSize;

								projPos = rayStart + ray * len;
								projPos.xy /= projPos.w;

								fDepthTapBuf = GetDownscaledDepth(sceneDepthSamplerScaled, projPos.xy);					// 1 alu, 1 tex
								if( abs(fDepthTapBuf - projPos.z) >= intervalSize ) //6
								{
									len += stepSize;

									projPos = rayStart + ray * len;
									projPos.xy /= projPos.w;

									fDepthTapBuf = GetDownscaledDepth(sceneDepthSamplerScaled, projPos.xy);					// 1 alu, 1 tex
									if( abs(fDepthTapBuf - projPos.z) >= intervalSize ) // 7
									{
										len += stepSize;
									}
									else
									bestLen = len;
								}
								else
								bestLen = len;
							}
							else
							bestLen = len;
						}
						else
						bestLen = len;
					}
					else
					bestLen = len;
				}
				else
				bestLen = len;
			}
			else
			bestLen = len;
		}
		else
		bestLen = len;

		//for( int i = 0; i < numSamples2; ++i )
		//{
		//	float4 projPos = rayStart + ray * len;
		//	projPos.xy /= projPos.w;

		//	float fDepthTapBuf = _GetLinearDepth(sceneDepthSamplerScaled, float4( projPos.xy, 0, 0 ));					// 1 alu, 1 tex
		//	if( abs(fDepthTapBuf - projPos.z) < intervalSize )
		//	{
		//		bestLen = len;
		//		break;
		//	}

		//	len += stepSize;
		//}

		if( bestLen > 0 )
		{
			projPos = rayStart + ray * bestLen;
			projPos.xy /= projPos.w;

			half3 color = tex2Dlod(RefractionHalfResSampler, float4(projPos.xy, 0, 0));
			specularRefl.rgb = color;

			float borderDist = projPos.y;
			borderDist = min( 1 - projPos.y, borderDist );
			float edgeWeight = borderDist > borderSize ? 1 : saturate((borderDist / borderSize) );

			half alpha = edgeWeight;
			// Apply distance attenuation
			alpha *= saturate( 1 - bestLen );
			specularRefl.a += alpha;
		}
	}

	OUT = specularRefl;
	
	
	// Fade out in reflections directions where less information is available
	half dirAtten = saturate( dot( viewVec, reflVec ) + 0.5 );
	OUT *= dirAtten;
	
	OUT = float4(OUT.rgb * OUT.a, OUT.a);
	
	return OUT;
}

pixout WaterReflPS(v2f_hs IN)
{
	pixout OUT = (pixout) 1;

	const float fDepth = IN.screenProj.w* PerView_NearFarClipDist.w;
	float fDepthCenter = GetDownscaledDepth(sceneDepthSamplerScaled, IN.screenProj.xy / IN.screenProj.w);//* PerView_NearFarClipDist.w;					// 1 alu, 1 tex

	clip( fDepthCenter - fDepth ); //

	half3 vView = normalize(IN.vView.xyz);  			

	// Generate normal map from 4 normal map layers + paralax
	float2 vParalaxOffset = GetParalaxOffset( IN, vView );  
  half4 cSpecularMap = 1;
  half4 cDiffuseMap = 1;
	half3 vNormal = BumpGen( IN, vParalaxOffset, cSpecularMap, cDiffuseMap);
	vNormal = float3(0,0,1);

  half fNdotE =  (dot( vView.xyz, vNormal ) ) * IN.vView.w;

  //////////////////////////////////////////////////////////////////////////////////////////////////    
  // Get reflection color

	const half ReflectionBumpScale = 0.3;

	half3 vDir = PerView_WorldViewPos-IN.vPosWS.xyz;
	half3 vReflN = lerp(half3(0,0,1), vNormal, ReflectionBumpScale);
	half3 vRefl = reflect(vDir, vReflN);

	half3 vReflNorm = normalize( vRefl );

	half3 cSpecularAcc = PerMaterial_SpecularColor * EnvCubeBoxProjected( IN.vPosWS.xyz, vReflNorm, half4(1,1,1,1) );

	// Blend in screenspace reflections

	half4 cSSRefl = ReflectionPassPS( IN, half4(vReflN.xyz,1));

	cSpecularAcc = lerp(cSpecularAcc * EnvCubeReflMul, cSSRefl * RealtimeReflMul, saturate(cSSRefl.a));
	OUT.Color.rgb =cSpecularAcc;
	 
	// Continuously blend previous frame, minimize shimering
	float4 vPrevHSPos = HPosToScreenTC( mul(PerView_ViewProjMatrPrev, float4(IN.vPosWS.xyz, 1.0 )), false );
	half2 prevTC = vPrevHSPos.xy / vPrevHSPos.w;
	prevTC.x *= PerView_HPosScale.z;
	prevTC.y = 1.0 - (1.0 - prevTC.y)*PerView_HPosScale.w;

	half3 cReflPrev = tex2D( ReflSamplerPrev, prevTC).rgb;
	//	Igor: for some reason isfinite provides false positives for all pixels on Qualcom chip. It's ok on Shield
#if !GLES3
	cReflPrev = isfinite( cReflPrev ) ? cReflPrev : 0;  // Filter out NANs that we still have sometimes, otherwise they get propagated and remain in the view
#endif

	half3 cReflCur = cSpecularAcc;

	cSpecularAcc = (cReflCur* 0.75 + cReflPrev*0.25) ;

	OUT.Color = half4(cSpecularAcc,1);

  return OUT;
}

//////////////////////////////// technique ////////////////

technique WaterReflPass
{
	pass p0
	{
		ZEnable = false; // todo use downscaled depth target for zculling
		ZFunc = LEqual;
		CullMode = None;
		ZWriteEnable = false;
		IgnoreMaterialState = true;

		VertexShader = WaterVS() WaterSurfaceVS;

#if %WATER_TESSELLATION_DX11
		HullShader   = WaterHS() WaterSurfaceHS;
		DomainShader = WaterReflDS() WaterSurfaceDS;
#endif

		PixelShader = WaterReflPS() WaterSurfacePS;
	}
}
/*
* All or portions of this file Copyright (c) Amazon.com, Inc. or its affiliates or
* its licensors.
*
* For complete copyright and license terms please see the LICENSE at the root of this
* distribution (the "License"). All use of this software is governed by the License,
* or, if provided, by the license below or the license accompanying this file. Do not
* remove or modify any license notices. This file is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*
*/
// Original file Copyright Crytek GMBH or its affiliates, used under license.

#if ENABLE_TESSELLATION

#include "CommonTessellation.cfi"

///////////////// hull shader //////////////////

struct HS_CONTROL_POINT_OUTPUT_VEGETATION
{
	hsControlPointShared controlPoint;

	float4 screenProj : TEXCOORDN;

#if !%GRASS
	float4 Pos : TEXCOORDN;
	#if %_RT_FOG
		float4 tangVec : TEXCOORDN;
		float4 binormVec : TEXCOORDN;
	#endif
#endif

#if %LEAVES || %GRASS || %_RT_BLEND_WITH_TERRAIN_COLOR
	float4 backLight : TEXCOORDN;
#endif

#if %GRASS || (!%_RT_QUALITY && !%_RT_QUALITY1)
	float4 frontLight : TEXCOORDN;
#endif

#if %_RT_FOG
	float4 AvgFogVolumeContrib : TEXCOORDN;
#endif

	float4 Color0 : COLOR0;
};

HS_CONSTANT_DATA_OUTPUT VegetationConstantsHS(InputPatch<vtxOutVegetation, 3> p, uint PatchID : SV_PrimitiveID)
{
	const float3 vP0 = p[0].vView.xyz + PerView_WorldViewPos.xyz;
	const float3 vP1 = p[1].vView.xyz + PerView_WorldViewPos.xyz;
	const float3 vP2 = p[2].vView.xyz + PerView_WorldViewPos.xyz;
	HS_CONSTANT_DATA_OUTPUT output = CommonConstantsHS(vP0, vP1, vP2, PerView_WorldViewPos.xyz, PerView_WorldViewPos.xyz, PatchID);

	return output;
}

[domain("tri")]
[partitioning("fractional_odd")]
[outputtopology("triangle_cw")]
[outputcontrolpoints(3)]
[patchconstantfunc("VegetationConstantsHS")]
[maxtessfactor(MAX_TESS_FACTOR)]
HS_CONTROL_POINT_OUTPUT_VEGETATION VegetationHS(InputPatch<vtxOutVegetation, 3> inputPatch, uint uCPID : SV_OutputControlPointID)
{
	HS_CONTROL_POINT_OUTPUT_VEGETATION	output = (HS_CONTROL_POINT_OUTPUT_VEGETATION)0;

	output.controlPoint.vView       = inputPatch[uCPID].vView;
	output.controlPoint.vNormal     = inputPatch[uCPID].vNormal;
	output.controlPoint.vBaseTC     = inputPatch[uCPID].baseTC;

	output.screenProj   = inputPatch[uCPID].screenProj;

#if !%GRASS
  output.Pos = inputPatch[uCPID].Pos;

  #if %_RT_FOG
    output.tangVec = inputPatch[uCPID].tangVec;
    output.binormVec = inputPatch[uCPID].binormVec;
  #endif
#endif

#if %LEAVES || %GRASS || %_RT_BLEND_WITH_TERRAIN_COLOR
  output.backLight = inputPatch[uCPID].backLight;
#endif

#if %GRASS || (!%_RT_QUALITY && !%_RT_QUALITY1)
  output.frontLight = inputPatch[uCPID].frontLight;
#endif

  output.Color0 = inputPatch[uCPID].Color0;
  
#if %_RT_FOG
  output.AvgFogVolumeContrib = inputPatch[uCPID].AvgFogVolumeContrib;
#endif

	return output;
}


///////////////// domain shader //////////////////

void FillEvalInput_Vegetation(const OutputPatch<HS_CONTROL_POINT_OUTPUT_VEGETATION, 3> triPatch, in HS_CONSTANT_DATA_OUTPUT hsConstData, in float3 vBaryCoords, inout CommonEvaluationInputDS evalInput)
{
	evalInput.vBaryCoords = vBaryCoords;
	FillEvalInputControlPoint(triPatch[0].controlPoint, triPatch[1].controlPoint, triPatch[2].controlPoint, hsConstData, evalInput);
	evalInput.bRelativePos = true;
#if !%GRASS && %_RT_FOG
	FillEvalInputTangentBinormal(triPatch[0].tangVec, triPatch[1].tangVec, triPatch[2].tangVec, triPatch[0].binormVec, triPatch[1].binormVec, triPatch[2].binormVec, evalInput);
#endif
	FillEvalInputColor(triPatch[0].Color0, triPatch[1].Color0, triPatch[2].Color0, evalInput);
	evalInput.vViewPos = PerView_WorldViewPos.xyz;
}

void ProcessEvalOutput_Vegetation(in CommonEvaluationOutputDS evalOutput, inout vtxOutVegetation dsOutput)
{
	dsOutput.baseTC = evalOutput.vBaseTC;
#if !%GRASS && %_RT_FOG
	dsOutput.tangVec = evalOutput.vTangent;
	dsOutput.binormVec = evalOutput.vBinormal;
#endif
	dsOutput.Color0 = evalOutput.vColor;

	dsOutput.HPosition = mul(PerView_ViewProjZeroMatr, float4(evalOutput.vPos.xyz, 1));
}

void EvaluateVegetationSpecific(inout vtxOutVegetation output, in HS_CONTROL_POINT_OUTPUT_VEGETATION triPatch[3],
																in float3 vBaryCoords, in CommonEvaluationOutputDS evalOutput)
{
	output.screenProj = HPosToScreenTC(output.HPosition);
	output.screenProj.z = EvalVec(triPatch[0].screenProj.z, triPatch[1].screenProj.z, triPatch[2].screenProj.z, vBaryCoords);
#if !%GRASS
	output.Pos.xyz = evalOutput.vPos.xyz;
	output.Pos.w = EvalVec(triPatch[0].Pos.w, triPatch[1].Pos.w, triPatch[2].Pos.w, vBaryCoords);
#endif
#if %LEAVES || %GRASS || %_RT_BLEND_WITH_TERRAIN_COLOR
	output.backLight = EvalVec(triPatch[0].backLight, triPatch[1].backLight, triPatch[2].backLight, vBaryCoords);
#endif

#if %GRASS || (!%_RT_QUALITY && !%_RT_QUALITY1)
	output.frontLight = EvalVec(triPatch[0].frontLight, triPatch[1].frontLight, triPatch[2].frontLight, vBaryCoords);
#endif
#if %_RT_FOG
  output.AvgFogVolumeContrib = EvalVec(triPatch[0].AvgFogVolumeContrib, triPatch[1].AvgFogVolumeContrib, triPatch[2].AvgFogVolumeContrib, vBaryCoords);
#endif
}

[domain("tri")]
vtxOutVegetation VegetationDS( HS_CONSTANT_DATA_OUTPUT hsConstData, float3 vBaryCoords : SV_DomainLocation, const OutputPatch<HS_CONTROL_POINT_OUTPUT_VEGETATION, 3> TrianglePatch )
{
	vtxOutVegetation output = (vtxOutVegetation)0;

	CommonEvaluationInputDS evalInput = (CommonEvaluationInputDS)0;
	FillEvalInput_Vegetation(TrianglePatch, hsConstData, vBaryCoords, evalInput);

	CommonEvaluationOutputDS evalOutput;
	Evaluate(evalInput, evalOutput);
	ProcessEvalOutput_Vegetation(evalOutput, output);

	EvaluateVegetationSpecific(output, TrianglePatch, vBaryCoords, evalOutput);

	return output;
}

#endif

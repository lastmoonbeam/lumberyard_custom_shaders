/*
* All or portions of this file Copyright (c) Amazon.com, Inc. or its affiliates or
* its licensors.
*
* For complete copyright and license terms please see the LICENSE at the root of this
* distribution (the "License"). All use of this software is governed by the License,
* or, if provided, by the license below or the license accompanying this file. Do not
* remove or modify any license notices. This file is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*
*/
// Original file Copyright Crytek GMBH or its affiliates, used under license.

#include "Common.cfi"
#include "ShadeLib.cfi"
#include "ModificatorVT.cfi"
#include "ModificatorTC.cfi"
#include "ShadowCommon.cfi"

// Shader global descriptions
float Script : STANDARDSGLOBAL
<
  string Script =
           "Public;"
#if %RECEIVE_SHADOWS
            "AlphaBlendShadows;"
#endif
           "ShaderDrawType = General;"
           "ShaderType = FX;"
>;

// Tweakables ///////////////// 

float FinalMultiplier
<
  register = PER_MATERIAL_1.x;
  string UIWidget = "slider";
  string UIName = "Brightness";
  string UIHelp = "Controls the overall brightness";                   
  float UIMin = 0.0;
  float UIMax = 32.0;
  float UIStep = 0.01;
> = 1.0;

float SoftIntersectionFactor
<
  register = PER_MATERIAL_1.y;
  string UIHelp = "Controls softness of surface intersection with other opaque scene geometry";                   
  string UIName = "Soft intersection factor";      
  string UIWidget = "slider";
  float UIMin = 0.0;
  float UIMax = 10.0;
  float UIStep = 0.1;  
> = 1.0;

float viewDependencyFactor
<
  register = PER_MATERIAL_1.z;
  string UIHelp = "Controls view dependence attenuation";                   
  string UIName = "View dependency factor";      
  string UIWidget = "slider";
  float UIMin = 0.0;
  float UIMax = 10.0;
  float UIStep = 0.1;  
> = 2.0;

float4 StartColor
<
  register = PER_MATERIAL_2;
  string UIWidget = "color";
  string UIName = "Start color";
  string UIHelp = "The start color for gradient along U axis";
  float UIMin = 0.0;
  float UIMax = 4.0;
  float UIStep = 0.01;
> = {1.0, 1.0, 1.0, 1.0};

float4 EndColor
<
  register = PER_MATERIAL_3;
  string UIWidget = "color";
  string UIName = "End color";
  string UIHelp = "The end color for gradient along U axis";
  float UIMin = 0.0;
  float UIMax = 4.0;
  float UIStep = 0.01;
> = {1.0, 1.0, 1.0, 0.0};


sampler2D TexSampler = sampler_state
{
  Texture = $White;
};

sampler3D noiseMapSampler = sampler_state
{
  Texture = EngineAssets/Textures/Noise3D.dds;
  MinFilter = LINEAR;
  MagFilter = LINEAR;
  MipFilter = LINEAR; 
  AddressU = Wrap;
  AddressV = Wrap;
  AddressW = Wrap;
}

sampler2D noise2DSampler = sampler_state
{
  Texture = EngineAssets/Textures/perlinnoise2d.dds;
  MinFilter = POINT;
  MagFilter = POINT;
  MipFilter = POINT; 
  AddressU = Wrap;
  AddressV = Wrap;
}


// --------------------------------------------------
float fadingFeaturing
<
  register = PER_MATERIAL_4.x;
  string UIHelp = "Control interpolation curve of vertex alpha edge fading";                   
  string UIName = "Vertex alpha fading";      
  string UIWidget = "slider";
  float UIMin = 0.0;
  float UIMax = 5;
  float UIStep = 0.05;  
> = 0.55;
// Dust and turbulence related
#if %NOISE
float dustUVScale
<
  register = PER_MATERIAL_4.y;
  string UIHelp = "Scale the UV for dust effect";                   
  string UIName = "Dust UV scale";      
  string UIWidget = "slider";
  float UIMin = 0.0;
  float UIMax = 5.0;
  float UIStep = 0.1;  
> = 0.6;

float dustTimeScale
<
  register = PER_MATERIAL_4.z;
  string UIHelp = "Scale the dust animation speed";                   
  string UIName = "Dust anim speed";      
  string UIWidget = "slider";
  float UIMin = 0.0;
  float UIMax = 5.0;
  float UIStep = 0.1;  
> = 1.0;

float turbStrength
<
  register = PER_MATERIAL_4.w;
  string UIHelp = "Multiplier for turbulence tiling";                   
  string UIName = "Turbulence tiling";      
  string UIWidget = "slider";
  float UIMin = 0.0;
  float UIMax = 5.0;
  float UIStep = 0.1;  
> = 1.0;

float turbRatio
<
  register = PER_MATERIAL_5.x;
  string UIHelp = "Visibility ratio for air turbulence";                   
  string UIName = "Turbulence visibility";
  string UIWidget = "slider";
  float UIMin = 0.0;
  float UIMax = 1.0;
  float UIStep = 0.02;  
> = 0.55;

float uvRot
<
  register = PER_MATERIAL_5.y;
  string UIHelp = "Rotate UV by percent of a circle";                   
  string UIName = "Dust UV rotation";
  string UIWidget = "slider";
  float UIMin = 0.0;
  float UIMax = 1;
  float UIStep = 0.05;  
> = 0;
#endif  // NOISE

#if %RECEIVE_SHADOWS
float VolumetricScale
<
  register = PER_MATERIAL_5.z;
  string UIWidget = "slider";
  string UIName = "Volumetric scale";
  string UIHelp = "The scale of volumetric shadowing. \n Effectively changes the shadow radius as well"; 
  float UIMin = 0.0;
  float UIMax = 1.5;
  float UIStep = 0.01;
> = 0.7; 
#endif  // RECEIVE_SHADOWS

#if %UV_VIGNETTING
float uvVigFeaturing
<
  register = PER_MATERIAL_5.w;
  string UIWidget = "slider";
  string UIName = "UV vignetting";
  string UIHelp = "Apply a vignetting effect on the edges of the UV map";
  float UIMin = 0.2;
  float UIMax = 15;
  float UIStep = 0.2;
> = 4;
#endif  // UV_VIGNETTING

float AmbStrength
<
  register = PER_MATERIAL_6.x;
  string UIWidget = "slider";
  string UIName = "Ambience strength";
  float UIMin = 0.0;
  float UIMax = 10.0;
  float UIStep = 0.01;
> = 0.12;

float baseUVScaleU
<
  register = PER_MATERIAL_6.y;
  string UIWidget = "slider";
  string UIName = "Base U scale";
  string UIHelp = "Control the scale/tiling of the base U mapping";
  float UIMin = 0.0;
  float UIMax = 5.0;
  float UIStep = 0.01;
> = 1.0;

float baseUVScaleV
<
  register = PER_MATERIAL_6.z;
  string UIWidget = "slider";
  string UIName = "Base V scale";
  string UIHelp = "Control the scale/tiling of the base V mapping";
  float UIMin = 0.0;
  float UIMax = 5.0;
  float UIStep = 0.01;
> = 1.0;

float age
<
  register = PER_MATERIAL_6.w;
  string UIWidget = "slider";
  string UIName = "Age";
  string UIHelp = "Controls the age (used for alpha wiping)";
  float UIMin = 0.0;
  float UIMax = 1.0;
  float UIStep = 0.01;
> = 1.0;

/////////////////////////////

struct v2f
{
  OUT_HPOS_IN_WPOS
  float4 baseTC    : TEXCOORDN; 
  float4 screenProj : TEXCOORDN; 
  half4 Color     : TEXCOORDN; 
#if %NOISE
  half4 noiseTC    : TEXCOORDN;
#endif  

#if %RECEIVE_SHADOWS
	half4 objPos : TEXCOORDN;
	half3 camVec : TEXCOORDN;
#endif
};

///////////////// vertex shader //////////////////

v2f BeamVS(app2vertGeneral IN)
{
    v2f OUT = (v2f)0; 

    streamPos vertPassPos = (streamPos)0;
    streamPos_FromGeneral(IN, vertPassPos);

    float fLerp = 1;

    half2 tc = vertPassPos.baseTC;
#if %NOISE
    half uvRotRad = uvRot * 2 * 3.1415927;
    half cosRot = cos(uvRotRad);
    half sinRot = sin(uvRotRad);
    vertPassPos.baseTC.x = tc.x*cosRot - tc.y*sinRot;
    vertPassPos.baseTC.y = tc.y*cosRot + tc.x*sinRot;
#endif  // NOISE

    OUT.baseTC = vertPassPos.baseTC;
    OUT.HPosition = Pos_VS_General(PerView_ViewProjZeroMatr, vertPassPos);


    // Preparing the inverse non-uniform matrix for correct vector transform
    float3x3 instInvScaleMat = InverseScaleMatrixFast((const float3x3)vertPassPos.InstMatrix);

    // Compensating for non-uniform scale
    float3 normalWS = normalize(mul(instInvScaleMat, vertPassPos.ObjToTangentSpace[2]));
    float3 viewWS = normalize(PerView_WorldViewPos.xyz - vertPassPos.WorldPos.xyz);

    float d = dot(viewWS, normalWS); // directionfading
    d *= d;
    d = saturate(d * viewDependencyFactor);

    // srgb tweak - square attenuation factor - smoother edges
    d *= d;

    half4 color = vertPassPos.Color;// * PerMaterial_DiffuseColor;
    tc.x = saturate(tc.x);
    float fadeOff = ((1.0 - tc.y) + 1.0) - (age * 2.0);
    OUT.Color = FinalMultiplier * color * d;
    OUT.Color.rgb *= lerp( StartColor.rgb, EndColor.rgb, tc.x );
    OUT.Color.a = saturate(fadeOff);

    // Output projected texture coordinates
    OUT.screenProj = HPosToScreenTC( OUT.HPosition );

    float4	baseTC = vertPassPos.baseTC;  
    _ModifyUV_1(baseTC, OUT.baseTC, vertPassPos.Position );

    ///////////////////////////////////////////////////////////////////////////////////////
    // Optional outputs:
#if %RECEIVE_SHADOWS
    OUT.objPos = vertPassPos.WorldPos;
    OUT.camVec = viewWS;
#endif
#if %NOISE
    // disabled public parameters usage atm, since there's some issue with it + shadows active at same time
    float4 noiseGen = float4(0.05, 0, 0, PerView_AnimGenParams.z*0.1);
    OUT.noiseTC.x = dot(vertPassPos.Position, noiseGen);
    noiseGen = float4(0, 0.05, 0, PerView_AnimGenParams.z*0.15);
    OUT.noiseTC.y = dot(vertPassPos.Position, noiseGen);
    noiseGen = float4(0, 0, 0.1, PerView_AnimGenParams.z*0.05);
    OUT.noiseTC.z = dot(vertPassPos.Position, noiseGen);
#endif
    return OUT;
}

///////////////// pixel shader //////////////////
half gaussianRemap( half f, half featuringParam ) 
{
	return (exp2( -(featuringParam*f*f) ) );// - exp2(-featuringParam));// / (1-exp2(-featuringParam)+1e-6);
}

pixout BeamPS(v2f IN)
{
	pixout OUT;

	// load the base
	half4 baseTex = GetTexture2D(diffuseMapSampler, IN.baseTC.xy * float2(baseUVScaleU, baseUVScaleV)); 
	OUT.Color = baseTex;
	float sceneDepth = DecodeSceneDepth( sceneDepthSampler, IN.screenProj );
	half fNoise = 1;
	half3 dust = 1;
	half3 dustFinal = 1;
	half3 noiseTC = 0;
	half dustFinalAvg = 1;
#if %NOISE  
	noiseTC = IN.noiseTC.xyz * dustTimeScale;
	fNoise = saturate(tex3D(noiseMapSampler, IN.noiseTC.xyz).a * 2.h - 0.25h);
	 dust = GetTexture2D(specularMapSampler, IN.baseTC.xy*dustUVScale +noiseTC.xy);
	 half3 dust2 = GetTexture2D(normalMapSampler, (half2(fNoise*0.17,fNoise)*0.5+0.5)*turbStrength).rgb;
	 half dust2Detail = 0.5*(dust2.r*dust2.g+dust2.b);
	 dustFinal = lerp(dust, dust2*dust2Detail, turbRatio);
	 dustFinalAvg = dot( dustFinal.rgb, (1/3.0).xxx );
#endif  // NOISE

half shadowOccl = 1;
#if %RECEIVE_SHADOWS

	///////////////////////////////////////////////////////////////////////////////////////////////////////
	// Sampling quality setup
	#if !%_RT_SAMPLE2 && !%_RT_SAMPLE3   // QUALITY_LOW
		static const int N_STEP = 1;
	#elif %_RT_SAMPLE2 && !%_RT_SAMPLE3  //QUALITY_MEDIUM
		static const int N_STEP = 1;
	#elif !%_RT_SAMPLE2 && %_RT_SAMPLE3  // QUALITY_HIGH
		static const int N_STEP = 2;
	#else                                // QUALITY_VERYHIGH
		static const int N_STEP = 4;
	#endif  
	//static const int N_STEP = 4;

	/////////////////////////////////////////////////////////////////////////////////////////////////////
	// use interleaved sampling
	static const half PACK_SIZE = 4;  
	static const half jitter[16] = 
	{  0.6h, 0.1h, 0.8h, 0.2h, 0.6h, 0.9h, 0.65h, 0.95h, 0.25h, 0.45h, 0.3h, 0.5h, 0.7h, 1.h, 0.75h, 1.1h  };

	half2 scrNoise = tex2D( noise2DSampler, IN.baseTC+noiseTC ).rg;
	half2 interleaveIdx = fmod(IN.WPos.xy, PACK_SIZE);//+noiseTC.xy;
	//interleaveIdx.xy += (IN.baseTC)*PACK_SIZE;
	int i_interleaveIdx = floor( fmod( (interleaveIdx.x*PACK_SIZE + interleaveIdx.y) , 15  ) );
	float interleaveJitter = jitter[ i_interleaveIdx ];// * 2-1;
	//float interleaveJitter =  tex2D( noise2DSampler, IN.WPos.xy/1.5 ).r;

	half3 vWPos = IN.objPos.xyz;
	half4 vWPos0;
	vWPos0.w = 1;

	vWPos0.xyz = vWPos + VolumetricScale*(dustFinalAvg*2-1)*IN.camVec* (interleaveJitter*2-1);  // volume extrusion plus jittering 
	shadowOccl = ShadowDepthTest(vWPos0, false).r;  // base samplinga

	// volume sampling  (expensive part for very-high spec)
	half3 totalDelta = (IN.camVec)*VolumetricScale*min(dustFinalAvg,0.3);
	half3 baseDelta = totalDelta / N_STEP;
	//half deltaNoise = (0.7+0.3*(scrNoise.r+scrNoise.g));
	for( int i=0; i<N_STEP; i++ ) {
		vWPos0.xyz -= baseDelta * jitter[i];
		shadowOccl += ShadowDepthTest(vWPos0, false).r;
	}

	shadowOccl /= N_STEP+1;

#endif  // RECEIVE_SHADOWS


#if %UV_VIGNETTING
	half linearVig = length(frac(IN.baseTC.xy*float2(baseUVScaleU, baseUVScaleV))*2-1);
	OUT.Color.w *= gaussianRemap( linearVig , uvVigFeaturing ); 
#endif  // UV_VIGNETTING

	// alpha blending gaussian curve based remapping:
	//IN.Color.w = (exp2( -(fadingFeaturing*f*f) ) - exp2(-fadingFeaturing)) / (1-exp2(-fadingFeaturing)+1e-6);
	OUT.Color.w *= 1-gaussianRemap( IN.Color.w, fadingFeaturing );

	// negative z direction
  half beamDepth = IN.screenProj.w;
  half depth = ( sceneDepth - beamDepth );
  half softIntersect = saturate( SoftIntersectionFactor * min(depth, beamDepth) ) ;

  half fadeBeam = min(softIntersect, saturate( SoftIntersectionFactor * (beamDepth - PerView_NearFarClipDist.x)) );

  OUT.Color.rgb *= IN.Color * dustFinal * fadeBeam * (shadowOccl + AmbStrength) * fNoise ;

  return OUT;
}







// Default technique for beams rendering
//////////////////////////////// technique ////////////////

technique General
{
  pass p0
  {
    VertexShader = BeamVS() BeamVS;
    PixelShader = BeamPS() BeamPS;
    
    ZEnable = true;
    ZWriteEnable = false;
    CullMode = None;

    SrcBlend = SRC_ALPHA;
    DestBlend = ONE;
    AlphaBlendEnable = true;
  
    
  }
}

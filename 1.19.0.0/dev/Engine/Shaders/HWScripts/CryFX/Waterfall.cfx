/*
* All or portions of this file Copyright (c) Amazon.com, Inc. or its affiliates or
* its licensors.
*
* For complete copyright and license terms please see the LICENSE at the root of this
* distribution (the "License"). All use of this software is governed by the License,
* or, if provided, by the license below or the license accompanying this file. Do not
* remove or modify any license notices. This file is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*
*/
// Original file Copyright Crytek GMBH or its affiliates, used under license.

#include "Common.cfi"
#include "ShadeLib.cfi"
#include "ModificatorVT.cfi"


// Shader global descriptions
float Script : STANDARDSGLOBAL
<
  string Script =
           "Public;"
           "NoPreview;"           
					 "ForceWaterPass;"
           "ShaderDrawType = General;"                      
           "ShaderType = Water;"
>;

// Tweakables /////////////////

half TillingLayer0 // @TODO: Fix spelling when versioning is supported on material settings.
<
  register = PER_MATERIAL_1.x;

  string UIName = "Layer0 tiling";
  string UIWidget = "slider";
  float UIMin = 0;
  float UIMax = 10.0;
  float UIStep = 0.005;
> = 1.0;

half TillingLayer1 // @TODO: Fix spelling when versioning is supported on material settings.
<
  register = PER_MATERIAL_1.y;

  string UIName = "Layer1 tiling";
  string UIWidget = "slider";
  float UIMin = 0;
  float UIMax = 10.0;
  float UIStep = 0.005;
> = 2.0;

half SpeedLayer0
<
  register = PER_MATERIAL_1.z;

  string UIName = "Layer0 speed";        
  string UIWidget = "slider";
  float UIMin = 0;
  float UIMax = 10.0;
  float UIStep = 0.005;
> = 1.0;

half SpeedLayer1
<
  register = PER_MATERIAL_1.w;

  string UIName = "Layer1 speed";        
  string UIWidget = "slider";
  float UIMin = 0;
  float UIMax = 10.0;
  float UIStep = 0.005;
> = 2.0;

half BumpScaleLayer0
<
  register = PER_MATERIAL_0.x;

  string UIName = "Layer0 bump scale";        
  string UIWidget = "slider";
  float UIMin = 0;
  float UIMax = 4.0;
  float UIStep = 0.005;
> = 2.0;

half BumpScaleLayer1
<
  register = PER_MATERIAL_0.y;
  string UIName = "Layer1 bump scale";    
  
  string UIWidget = "slider";
  float UIMin = 0;
  float UIMax = 4.0;
  float UIStep = 0.005;
> = 1.0;

half ReflectionAmount
<
  register = PER_MATERIAL_0.z;

  string UIHelp = "Set amount of reflection";                     
  string UIName = "Reflect amount";    
    
  string UIWidget = "slider";
  float UIMin = 0;
  float UIMax = 10.0;
  float UIStep = 0.001;
> = 1.0;

half FresnelBias
<
  register = PER_MATERIAL_0.w;
  string UIHelp = "Set how much reflective material is";                     
  string UIName = "Fresnel bias";  
    
  string UIWidget = "slider";
  float UIMin = 0;
  float UIMax = 1.0;
  float UIStep = 0.001;
> = 0.25;

half RefractionBumpScale
<
  register = PER_MATERIAL_2.x;
  string UIWidget = "slider";
  string UIName = "Refraction bump scale";
  float UIMin = 0.0;
  float UIMax = 0.025; // clamp maximum to prevent misusage
  float UIStep = 0.01;
> = 0.01;

half SunMultiplier
<
  register = PER_MATERIAL_2.y;
  string UIName = "Sun multiplier";    
  string UIWidget = "slider";
  float UIMin = 0.0;
  float UIMax = 10.0;
  float UIStep = 0.001;
> = 1.0;  

half AlphaBlendMul
<
  register = PER_MATERIAL_2.z;
  string UIName = "Alpha blend multiplier";    
  string UIWidget = "slider";
  float UIMin = 0.0;
  float UIMax = 10.0;
  float UIStep = 0.001;
> = 1.0;  

half FoamDeform
<
  register = PER_MATERIAL_2.w;
  string UIName = "Foam deform";    
  string UIWidget = "slider";
  float UIMin = 0.0;
  float UIMax = 0.25;
  float UIStep = 0.001;
> = 0.025; 

half FoamMultiplier
<
  register = PER_MATERIAL_3.x;
  string UIName = "Foam multiplier";    
  string UIWidget = "slider";
  float UIMin = 0.0;
  float UIMax = 4.0;
  float UIStep = 0.001;
> = 1.0;  


///////////////////////////////////////////////////////////////// Samplers //

ENVIRONMENTMAP
ENVIRONMENTCUBEMAP

sampler2D screenMapSampler = sampler_state
{
  Texture = $SceneTarget;

  MinFilter = POINT;
  MagFilter = POINT;
  MipFilter = POINT;
  
  AddressU = Clamp;
  AddressV = Clamp;	

  sRGBLookup = true; 
};

/////////////////////////////

struct v2f
{
  float4 HPosition  : POSITION;   
  float4 baseTC     : TEXCOORDN;  //xy: layer0 tc, wz: layer1 tc
  float4 vTangent  : TEXCOORDN;
  float4 vBinormal : TEXCOORDN;
    
  float4 projTC    : TEXCOORDN;    
  
  half4 vView   : TEXCOORDN;  
	float4 Ambient   : TEXCOORDN;

  half4 Color     : COLOR0; 
  
#if %_RT_FOG
  half4 localFogColor : TEXCOORDN;
#endif  

};

///////////////// vertex shader //////////////////
v2f WaterfallVS(app2vertGeneral IN)
{
    v2f OUT = (v2f)0; 

    // Common data
    streamPos vertPassPos = (streamPos)0;
    streamPos_FromGeneral(IN, vertPassPos);
    float4 vPosDecal = vertPassPos.Position;
    float4 vPos = vertPassPos.Position; 

    OUT.HPosition = Pos_VS_General(PerView_ViewProjZeroMatr, vertPassPos);

    // Output bump layers texture coordinates
    float2 vTranslation = float2(PerFrame_Time.x, 0 );
    float2 vTranslationMul = float2(SpeedLayer0, SpeedLayer1);

    float2 vTranslation0 = vTranslation;
    float2 vTranslation1 = vTranslation;

    float4 vTex = float4( vertPassPos.baseTC.xy, 0, 1 );                          

    // Scale texture coordinates to get mix of low/high frequency details      
    OUT.baseTC.xy = vTex.xy * TillingLayer0 + vTranslation.xy * vTranslationMul.x;
    OUT.baseTC.wz = vTex.xy * TillingLayer1 + vTranslation.xy * vTranslationMul.y;

    // Output tangents
    // This is incorrect since we need to compensate for non-uniform scale, however cost is possibly not justified for this shader
    float3 worldTangentS = normalize( mul((const float3x3)vertPassPos.InstMatrix, vertPassPos.ObjToTangentSpace[0]) );
    float3 worldTangentT = normalize( mul((const float3x3)vertPassPos.InstMatrix, vertPassPos.ObjToTangentSpace[1]) );
    float3 worldTangentN = normalize( mul((const float3x3)vertPassPos.InstMatrix, vertPassPos.ObjToTangentSpace[2]) );

    OUT.vTangent = float4(worldTangentS, vertPassPos.Tangent.w); 
    OUT.vBinormal.xyz = worldTangentT;

    // Output eye/light vector
    float3 viewVec = vertPassPos.WorldPos.xyz - PerView_WorldViewPos.xyz;
    OUT.vView.xyz= viewVec.xyz ;  

    OUT.vView.w = OUT.HPosition.w * PerView_NearFarClipDist.w;

    // Output projected coordinates
    OUT.projTC = HPosToScreenTC(OUT.HPosition);

    OUT.Ambient = GetInstance_AmbientOpacity(vertPassPos);
    OUT.Color = vertPassPos.Color;
    OUT.Color.w *= OUT.Ambient.w;

#if %_RT_FOG && !%NO_VERTEX_FOG
#if !%_RT_VOLUMETRIC_FOG
    OUT.localFogColor = GetVolumetricFogColor( vPos );
#else
    OUT.localFogColor = GetVolumetricFogAnalyticalColorByWorldPos( vPos );
#endif
#endif

    return OUT;
}

///////////////// pixel shader //////////////////

pixout WaterfallPS(v2f IN)
{
  pixout OUT = (pixout) 1;

  /////////////////////////////////////////////////////////////////////             
  // Generate normal from 2 normal map layers

  half3 vNormal = cross(IN.vTangent.xyz, IN.vBinormal.xyz) * IN.vTangent.w;                  // 4 alu
	half3 vNormalWS = vNormal;
	float3x3 mTangentToWS = float3x3(IN.vTangent.xyz, IN.vBinormal.xyz, vNormal.xyz);  

  //pPass.vView = normalize(-pPass.IN.vView.xyz);                                                           // 3 alu  

  half3 bumpNormal = half3(0,0,1);
  // merge bump layers
  bumpNormal = GetNormalMap(normalMapSampler, IN.baseTC.xy) ; // 1st bump layer
	bumpNormal.xy *= BumpScaleLayer0;

	bumpNormal.xy += GetXYNormalMap(normalMapSampler, IN.baseTC.wz) * BumpScaleLayer1; // 2nd bump layer

  // just assume bump normal z is 1 and renormalize
	vNormal = normalize( bumpNormal.xyz );
  vNormalWS = normalize( mul( vNormal.xyz, mTangentToWS) );
      
  half3 vView= normalize( -IN.vView.xyz );     
  half3 vn= vNormalWS;//normalize(bumpNormal);
  half3 vReflect = (2*dot(vView,vn)*vn - vView);

  half2 vProject = IN.projTC.xy/ IN.projTC.w;

	/////////////////////////////////////////////////////////////////////             
	// Start light accumulation

	half fBlendFactor = (vNormalWS.z*0.25h+0.75h); // 1 inst
	half3 cAmbientAcc = IN.Ambient * fBlendFactor;
  half3 cDiffuseAcc = 0;

  /////////////////////////////////////////////////////////////////////             
  // Get reflection

  half3 cReflection = 1.0;
#if %ENVIRONMENT_MAP
  half4 cCubeColor = texCUBE(envMapSamplerCUBE, vReflect);
  cReflection = DecodeHDRCubemap(cCubeColor);  
  cReflection *= ReflectionAmount;
#endif

	
#if %SUN_SHADING

	half fNdotL = saturate( dot(PerFrame_SunDirection.xyz, vNormalWS.xyz) *0.8 + 0.2 );
  cDiffuseAcc = fNdotL * PerFrame_SunColor;
	// Apply lighting
	cReflection *= (cDiffuseAcc +  cAmbientAcc);

  // Sun specular
	half fSpec = BlinnBRDF(vNormalWS, vView, PerFrame_SunDirection, PerMaterial_SpecularColor.w); // 4 alu
  half3 cSunSpec = fSpec * fNdotL * PerFrame_SunColor.xyz * SunMultiplier * PerMaterial_SpecularColor;
	cReflection += cSunSpec;

#endif


  /////////////////////////////////////////////////////////////////////             
  // Get refraction

  half2 refrNewst = vProject; // reduce refraction near beaches
  float2 refrTC = vNormal.xy  * RefractionBumpScale;
  float depthRefr = GetLinearDepth( sceneDepthSampler, refrNewst + refrTC.xy);
  float fRefractionMask =  IN.vView.w < depthRefr;
 	//refrTC *= fRefractionMask;
  half3 cRefraction = DecodeHDRBuffer( tex2D(screenMapSampler, refrNewst + refrTC) ).xyz;

  /////////////////////////////////////////////////////////////////////             
  // Compute coeficients      
            
  half NdotI= dot(vView, vNormalWS.xyz);
  half fFresnel = GetFresnel(NdotI, FresnelBias, 5.0h);
	
  // Compute final water color
	half3 final = lerp(cRefraction.xyz, cReflection, fFresnel);

 half fA = IN.Color.w * AlphaBlendMul;

#if %FOAM
	// Add diffuse (foam) contribution	
	half4 cDiffuseMap = GetTexture2D(diffuseMapSampler, IN.baseTC.xy + FoamDeform * vNormal.xy );
	cDiffuseMap += GetTexture2D(diffuseMapSampler, IN.baseTC.wz + FoamDeform * vNormal.xy );
	cDiffuseMap *= 0.5h;	
	
	final.xyz += (cDiffuseAcc + cAmbientAcc ) * cDiffuseMap * PerMaterial_DiffuseColor * FoamMultiplier * IN.Color;

	fA *=	cDiffuseMap.w;
#endif

	fA = saturate(fA);

#if %_RT_FOG
#if !%_RT_VOLUMETRIC_FOG
  HDRFogOutput(OUT, half4(final.xyz, fA), 1, IN.localFogColor.xyz, IN.localFogColor.w);
#else
	VolumetricFogTexcoord vtc = GetVolumetricFogTexcoordParamByScreenProj(IN.HPosition);
	float4 vf = GetVolumetricFogValueJittered(vtc).xyzw;
	ApplyVolumetricFog(vf, IN.localFogColor, vtc, final.xyz);
	HDROutput(OUT, half4(final.xyz, fA), 1);
#endif
#else
	HDROutput(OUT, half4(final.xyz, fA), 1);
#endif

  return OUT;
}

//////////////////////////////// technique ////////////////

technique General
{
  pass p0
  {
    VertexShader = WaterfallVS() WaterFallVS;
    PixelShader = WaterfallPS() WaterFallPS;
    
    ZEnable = true;
    ZFunc = LEqual;    
    ZWriteEnable = false;
    CullMode = Back;      
    
    SrcBlend = SRC_ALPHA;
    DestBlend = ONE_MINUS_SRC_ALPHA;
    AlphaBlendEnable = true;
  }
}

/////////////////////// eof ///


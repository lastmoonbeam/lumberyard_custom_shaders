////////////////////////////////////////////////////////////////////////////////////////////////// 

float4 vCausticParams < psregister = c25; >; 

struct v2fCaustic
{
	float4 Position		: POSITION;

 	float4 baseTC	  : TEXCOORDN;
 	half4  vView  	  : TEXCOORDN;

	float4 screenProj : TEXCOORDN;

#if %_RT_SAMPLE4
	float4 ripplesTC	: TEXCOORDN;
#endif
};

v2fCaustic WaterCausticVS(a2v IN)
{
	v2fCaustic OUT = (v2fCaustic)1; 
  
	float4 vPos = IN.Position;          
	vPos.w = 1;
    
    const bool bCameraRelative = false;
    float4x4 InstMatrix = GetInstance_WorldMatrix(bCameraRelative);
    vPos.xyz = mul( InstMatrix, float4(vPos.xyz, 1) );
	
	float4 vPosOrig = vPos; 

	float4 baseTC = IN.baseTC.xyxy * float4(1, 1, 2, 2)*Tilling;
#if %FLOW
	baseTC += WaterFlowSpeed * PerView_AnimGenParams.zzzz * float4(0.25, 0, 1, 0);// moves along uvs
#endif
   
#if %_RT_SAMPLE4
	OUT.ripplesTC = GetWaterRipplesUvs( vPos );
#endif	

	OUT.Position = mul(PerView_ViewProjMatr, float4(vPos.xyz, 1)); 
	OUT.screenProj = HPosToScreenTC( OUT.Position );

	// Output bump layers texture coordinates
	OUT.baseTC.xyzw = baseTC;
   
	// Output eye/light vector
	float3 vView = PerView_WorldViewPos.xyz - vPos.xyz;	// 1 alu
	OUT.vView.xyz = vView.xyz;	// 3 alu

	return OUT;
}

pixout WaterCausticPS(v2fCaustic IN)
{
	pixout OUT = (pixout) 1;
 
	const half fNormalsScale = clamp(NormalsScale * vCausticParams.y, 0.001f, 1.0f);

	float4 vWorldPos = float4(-IN.vView.xyz + PerView_WorldViewPos.xyz, 1);

	half2 vFlowOffsets = 0;
	float4 vFlow = 0;

#if %FLOW_MAP
	float2 vLenghts = abs(vBBoxMax.xy-vBBoxMin.xy);
	vFlow = GetDetailMap(flowMapSampler, float2(vBBoxMin.x-vWorldPos.x, vWorldPos.y-vBBoxMin.y)/vLenghts).xyxy;
	vFlowOffsets = frac(PerView_AnimGenParams.xx * WaterFlowSpeed + float2(0.0, 0.5));
	vFlow = vFlow * vFlowOffsets.xxyy * WaterFlowMapScale;
#endif

	// low frequency
	float4 tcBase0 = (IN.baseTC.xyxy/Tilling) + vFlow.xyzw;
	tcBase0 *= 2.0 * Tilling * vCausticParams.z;
	half fWaterHeight = ExpandWaterNormals(tex2Dlod(WaterNormalsSampler, half4(tcBase0.xy, 0, 0))).a;

#if %FLOW_MAP
	half fWaterHeight2 = ExpandWaterNormals(tex2Dlod(WaterNormalsSampler, half4(tcBase0.zw, 0, 0))).a;
	half fLerpFlow = abs( 0.5h - vFlowOffsets.x) / (0.5h);
	fWaterHeight = lerp( fWaterHeight, fWaterHeight2, fLerpFlow);	
#endif

	fWaterHeight *= fNormalsScale;


#if %_RT_SAMPLE4
	// dynamic ripples
 	half4 cWaterRipples = tex2Dlod(WaterDynRipplesSampler, float4(IN.ripplesTC.xy, 0, 0));
 	fWaterHeight += cWaterRipples.z;
#endif

	// Todo:
	// - packing works but limiting, can only go down to 1 meter height and nothing lower.
	float fIntPart;
	float fFracPart = modf((1.0/vWorldPos.z) * 256.0f, fIntPart);  
	OUT.Color.xy = float2(fIntPart.x / 256.0f, fFracPart.x);

	OUT.Color.z = sqrt(fWaterHeight * 0.25);

	// Output intensity, fade with distance. <todo> Attenuation mode has to be refactored post c3, unintuitive to setup (+ changes height?)
	OUT.Color.w = (vCausticParams.w * 0.1f);

	return OUT;
}

//////////////////////////////// technique ////////////////

technique WaterCausticPass
{
	pass p0
	{
		ZEnable = true; // todo use downscaled depth target for zculling
		CullMode = Back;
		ZWriteEnable = true;
		IgnoreMaterialState = true;

		VertexShader = WaterCausticVS() WaterSurfaceVS;
		PixelShader = WaterCausticPS() WaterSurfacePS;
	}
}
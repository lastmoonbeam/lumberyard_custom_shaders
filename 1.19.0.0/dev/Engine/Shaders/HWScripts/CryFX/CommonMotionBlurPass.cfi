////////////////////////////////////////////////////////////////////////////
//
//  Crytek Engine Source File.
//  Shader extension
//  Copyright (C), Crytek Studios, 2001-2004.
// -------------------------------------------------------------------------
//  File name:   CommonMotionBlurPass.cfi
//  Version:     v1.00
//  Created:     30/01/2006 by Tiago Sousa
//  Compilers:  
//
//	Todo: clean up / generalize sceneMap 
//
// -------------------------------------------------------------------------
////////////////////////////////////////////////////////////////////////////

// When set motion blur amount is computed based on displacement of previous and current positions
// When not set mesh is still displaced (based on current position) but motion blur amount ignores displacement
// TODO: Should be disabled until properly optimized
//#define HIQ_MOTIONBLUR 1

///////////////// vertex input/output //////////////////
struct vert2fragMotionBlur
{
#if %_DS || %_PS || !ENABLE_TESSELLATION || %_RT_NO_TESSELLATION
	OUT_P
#endif

	float4 vVelocity     : TEXCOORDN;
	float4 vVelocityPrev : TEXCOORDN;
	float4 baseTC        : TEXCOORDN;

#if !%_PS && !%_DS && ENABLE_TESSELLATION && !%_RT_NO_TESSELLATION
	float4 vView     : TEXCOORDN;
	half4 vNormal    : TEXCOORDN;
	#if HIQ_MOTIONBLUR
		float4 vViewPrev  : TEXCOORDN;
		half4 vNormalPrev : TEXCOORDN;
		float4x4 matWVP   : MATRIX_WVP;
	#endif
#endif
};

///////////////// vertex shaders //////////////////

vert2fragMotionBlur Common_MotionBlurPassVS(app2vertMotionBlur IN)
{
    vert2fragMotionBlur OUT = (vert2fragMotionBlur)0;

    streamPos vertPassPos = (streamPos)0;
    streamPos_FromMotionBlur(IN, vertPassPos);
    streamPos vertPassPosPrev = (streamPos) vertPassPos;

    float4 HPosition = 0;
    {
        float4 baseTC = vertPassPos.baseTC;
        _ModifyUV_1(baseTC, OUT.baseTC, vertPassPos.Position );

        OUT.baseTC.w = 0;//frac( length( worldPos.xyz + PerView_WorldViewPos.xyz) ) + 0.01;
        OUT.baseTC.z = 0;
#if %_RT_NEAREST
        // mask out weapons - consider using as gbuffer id also
        OUT.baseTC.z = 1;
#endif

        HPosition = Pos_VS_General(PerView_ViewProjZeroMatr, vertPassPos);
        OUT.vVelocity = HPosToScreenTC( HPosition );
        vertPassPosPrev.PositionCurr = vertPassPos.Position;
    }

    float4 HPositionPrev = GetPositionGeneralPrevious(vertPassPosPrev);
    OUT.vVelocityPrev = HPosToScreenTC( HPositionPrev );

#if ENABLE_TESSELLATION && !%_RT_NO_TESSELLATION
    OUT.vView.xyz = vertPassPos.WorldPos.xyz - PerView_WorldViewPos.xyz;

    // This is incorrect since we need to compensate for non-uniform scale, this cost is possibly not justified for this shader
    OUT.vNormal.xyz = normalize(mul((const float3x3)vertPassPos.InstMatrix, vertPassPos.Normal.xyz));
	#if HIQ_MOTIONBLUR
		OUT.vViewPrev.xyz = vertPassPosPrev.PositionPrev.xyz;
		OUT.vNormalPrev.xyz = vertPassPosPrev.Normal.xyz;
		OUT.matWVP = vertPassPosPrev.InstMatrix;
	#endif
#else
	OUT.HPosition = HPosition;
#endif

    OUT.vVelocity.z = GetInstance_Opacity(vertPassPos);

    return OUT;
}

///////////////// pixel shaders //////////////////


EARLYDEPTHSTENCIL
pixout_vel Common_MotionBlurPassPS(vert2fragMotionBlur IN)
{
	pixout_vel OUT = (pixout_vel) 1; 

	const half fDifAlpha = GetTexture2D(diffuseMapSampler, IN.baseTC.xy).a;
#if %_RT_ALPHATEST
	clip(fDifAlpha - 0.5);
#endif

	OUT.Color = float4(OutputVelocityRT(IN.vVelocity.xy/IN.vVelocity.w, IN.vVelocityPrev.xy/IN.vVelocityPrev.w), 0, 0);
 
	return OUT;
}

#include "CommonMotionBlurPassTess.cfi"

//////////////////////////////// technique ////////////////

technique MotionBlurPass
{
  pass p0
  {
    VertexShader = Common_MotionBlurPassVS() MotionBlurVS;
#if ENABLE_TESSELLATION
		HullShader   = Common_MotionBlurPassHS() GeneralHS;
		DomainShader = Common_MotionBlurPassDS() GeneralDS;
#endif
    PixelShader = Common_MotionBlurPassPS() MotionBlurPS;

    ZEnable = true;
    ZWriteEnable = false;
    CullMode = Back;

#if %HAIR_PASS || %LEAVES
    CullMode = None;
#endif

    ZFunc = LEqual;

		IgnoreMaterialState = true;
  }
}


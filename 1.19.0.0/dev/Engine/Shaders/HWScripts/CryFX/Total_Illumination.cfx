/*
* All or portions of this file Copyright (c) Amazon.com, Inc. or its affiliates or
* its licensors.
*
* For complete copyright and license terms please see the LICENSE at the root of this
* distribution (the "License"). All use of this software is governed by the License,
* or, if provided, by the license below or the license accompanying this file. Do not
* remove or modify any license notices. This file is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*
*/
// Original file Copyright Crytek GMBH or its affiliates, used under license.

#if FEATURE_SVO_GI

#include "Common.cfi"
#include "ShadeLib.cfi"
#include "vertexLib.cfi"
#include "CommonSVO.cfi"
#include "ShadowCommon.cfi"

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Defines
#define VOX_AIR_ALBEDO_COLOR 0.01f
#define VOX_COMPUTE_NUM_THREADS 16
#define VOX_REPROJECT 1

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Constants
float4 SVO_PropagationPass;
float3x4	SVO_ReprojectionMatrix;
float4	SVO_FrameIdByte;
float4 SVO_CamPos;
float4 SVO_TargetResScale;
float4 SVO_SrcPixSize;
float4x4 SVO_NodesForUpdate0;
float4x4 SVO_NodesForUpdate1;
float4x4 SVO_NodesForUpdate2;
float4x4 SVO_NodesForUpdate3;

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Samplers
sampler2D sceneGBuffer0 : register(s14);
sampler2D sceneGBuffer1 : register(s5);
sampler2D sceneGBuffer2 : register(s7);


sampler2D sceneAldSampler : register(s10);
sampler2D sceneRgbSampler : register(s11);

sampler2D sceneAldSamplerMin : register(s10);
sampler2D sceneRgbSamplerMin : register(s11);
sampler2D sceneAldSamplerMax : register(s12);
sampler2D sceneRgbSamplerMax : register(s13);

sampler2D sceneRgbSamplerMinPrev : register(s0);
sampler2D sceneAldSamplerMinPrev : register(s1);
sampler2D sceneRgbSamplerMaxPrev : register(s2);
sampler2D sceneAldSamplerMaxPrev : register(s3);

sampler2D SVO_cloudShadowMap : register(s15);

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Structures
struct vtxOutWPOS
{
	float4 HPosition : POSITION;
	float4 baseTC : TEXCOORD0;
	float4 CamVec : TEXCOORD1;
};

struct vtxInWPOS
{
	IN_P
		IN_TBASE
		float3 CamVec : TEXCOORD1;
};

struct pixoutMRT
{
	half4 Diffuse : COLOR0;
	half4 Specular : COLOR1;
	half4 Diffuse1 : COLOR2;
	half4 Specular1 : COLOR3;
};

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Shader flags

// _RT_SAMPLE0        UNUSED
// _RT_SAMPLE1        Global environment map is available
// _RT_SAMPLE2        UNUSED
// _RT_SAMPLE3        Volumetric lightmaps enabled
// _RT_SAMPLE4        ON - diffuse compuations, OFF - specular
// _RT_SAMPLE5        Albedo and normals in use
// _RT_HW_PCF_COMPARE UNUSED 
// _RT_LIGHT_TEX_PROJ Simple RSM sun
// _RT_POINT_LIGHT		Simple RSM point lights
// _RT_BLEND_WITH_TERRAIN_COLOR SS depth tracing

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Functions

float3 GetDiffuseKernel(out int GI_DIFFUSE_KERNEL_TILING, const int nElemId, const bool bFullSphere = true)
{
	if (IsDiffuseMode())
	{		
#if GL4
		const int nGiDiffuseSampleNum = 128;
		GI_DIFFUSE_KERNEL_TILING = sqrt(nGiDiffuseSampleNum / 2);
		if (bFullSphere)
		{
			const float3 arrGiDiffuseKernel[nGiDiffuseSampleNum] = kernel_S_128;
			return arrGiDiffuseKernel[nElemId];
		}
		else
		{
			const float3 arrGiDiffuseKernel[nGiDiffuseSampleNum] = kernel_HS_128;
			return arrGiDiffuseKernel[nElemId];
		}
#else
		const int nGiDiffuseSampleNum = 512;
		GI_DIFFUSE_KERNEL_TILING = sqrt(nGiDiffuseSampleNum / 2);
		if (bFullSphere)
		{
			const float3 arrGiDiffuseKernel[nGiDiffuseSampleNum] = kernel_S_512;
			return arrGiDiffuseKernel[nElemId];
		}
		else
		{
			const float3 arrGiDiffuseKernel[nGiDiffuseSampleNum] = kernel_HS_512;
			return arrGiDiffuseKernel[nElemId];
		}
#endif
	}
	else
	{
		const int nGiDiffuseSampleNum = 128;
		GI_DIFFUSE_KERNEL_TILING = sqrt(nGiDiffuseSampleNum / 2);
		const float3 arrGiDiffuseKernel[nGiDiffuseSampleNum] = kernel_HS_128;
		return arrGiDiffuseKernel[nElemId];
	}
}
  
float3 GetWorldSpaceNormals(float2 tc, out float fTransmittanceY, float3 vCamVec)
{
	half4 bufferA = tex2D(sceneGBuffer1, tc);
	float3 vNorm0 = DecodeGBufferNormal(bufferA);
	if (IsDiffuseMode())
		fTransmittanceY = saturate(DecodeGBufferTransmittanceLum(bufferA));
	else
		fTransmittanceY = 0;
	return vNorm0;
}

MaterialAttribsCommon DecodeGBufferChannels(in float2 tc)
{
	return DecodeGBuffer(half4(0,0,0,0), tex2D(sceneGBuffer1, tc), tex2D(sceneGBuffer2, tc));
}

float3 GetVoxCenter(uint3 coord, uint3 coord0, uint3 coord1, float4 voxAreaMin, float4 voxAreaMax)
{
	return voxAreaMin + (voxAreaMax - voxAreaMin) * float3(coord - coord0) / float3(coord1 + 1 - coord0) + voxAreaMin.w / VOX_BRICK_TEXRES / 2;
}

float rand(float2 n)
{
	return frac(sin(dot(n.xy, float2(12.9898, 78.233)))* 43758.5453);
}

void GetRndRotationMat(in float3 vPos0, in float3 vNor0, out half2x2 mSampleRotMat)
{
	float3 vNorAbs = abs(vNor0);

	float2 vC = 0;
	if ((vNorAbs.x > vNorAbs.y) && (vNorAbs.x > vNorAbs.z))
		vC = vPos0.yz;
	else if ((vNorAbs.y > vNorAbs.x) && (vNorAbs.y > vNorAbs.z))
		vC = vPos0.xz;
	else
		vC = vPos0.xy;

	const half jitterIndex = dot(rand(vC), half2(1, .25));
	half2 vJitterSinCos = half2(sin(PI_X2 * jitterIndex), cos(PI_X2 * jitterIndex));
	const half2x2 _mSampleRotMat = { vJitterSinCos.y, vJitterSinCos.x, -vJitterSinCos.x, vJitterSinCos.y };
	mSampleRotMat = _mSampleRotMat;
}

vert2FragGeneral VoxelRayTraceVS(app2vertGeneral IN)
{
	vert2FragGeneral OUT = (vert2FragGeneral)0;

	streamPos vertPassPos = (streamPos)0;

	OUT.vView.xyz = PerView_WorldViewPos.xyz;

	vs_shared_output(IN, OUT, vertPassPos, true);

	OUT.screenProj.x = IN.vertCommon.baseTC.x;
	OUT.screenProj.y = 1 - IN.vertCommon.baseTC.y;

	OUT.baseTC.xyz = IN.vertCommon.Position.xyz;

	return OUT;
}

int GetNodeRequestedForUpdate(int nItemId)
{
	float nRes = 0;

	if (nItemId >= 0 && nItemId < 8 * 4 * 4)
	{
		int g = nItemId / 16; nItemId -= g * 16;
		int x = nItemId / 4; nItemId -= x * 4;
		int y = nItemId;

		if (g == 0)
		{
			nRes = SVO_NodesForUpdate0[x][y];
		}
		else if (g == 1)
		{
			nRes = SVO_NodesForUpdate1[x][y];
		}
		else if (g == 2)
		{
			nRes = SVO_NodesForUpdate2[x][y];
		}
		else if (g == 3)
		{
			nRes = SVO_NodesForUpdate3[x][y];
		}
	}

	return int(nRes + 0.1f);
}
//Used for cone tracing. 
float3 GetSkyBoxColor(const float3 vDir, const float fConeSev)
{
	float3 vAmb = float3(0,0,0);
#if %_RT_SAMPLE1
	float3 vAmb = DecodeHDRCubemap(texCUBElod(globalSpecCM, half4(vDir, saturate(1.f - fConeSev)*3.f))) * PerPass_SvoParams5.w;
#endif
	return vAmb * PerPass_SvoParams4.w;
}

//Used for computing ambient bias.
float3 GetAmbientColor()
{
	return PerPass_SvoParams4.w * float3(PerPass_SvoParams4.x, PerPass_SvoParams4.y, PerPass_SvoParams4.z);
}

float4 ConeTraceTreeAndSkyEx(Ray r, float fConeSev, out float4 vNor1, const float fConesColorSatur = 1.f, const float fMultTriRT = 0, const bool bSpecular = false, bool bForceUseLighting = false, const bool bAllowSkyLight = true, float3 vSurfNorm = 0)
{
	float4 vPos1 = 0; vNor1 = 0;
	float4 vC = ConeTraceTree(r, fConeSev, vPos1, vNor1, bSpecular ? (length(r.startpoint - PerView_WorldViewPos.xyz)*.25 + .25) : 0, PerPass_SvoParams1.y, 0.f, 1.f, 0, fMultTriRT, 0, false, bSpecular, bForceUseLighting, vSurfNorm);

	// apply cloud shadows
	float fCloudsShadow = 1.f;
#if %_PS
	fCloudsShadow = GetCloudShadowCommon(r.startpoint, SVO_cloudShadowMap, PerFrame_CloudShadowAnimParams, PerFrame_CloudShadowParams);
#endif

	vC.xyz = vC.xyz*fCloudsShadow + GetSkyBoxColor(r.direction, fConeSev) * (saturate(1 - vC.a)) * bAllowSkyLight * (fCloudsShadow*0.4 + 0.6);
	vC.xyz = lerp((vC.x + vC.y + vC.z) / 3, vC.xyz, fConesColorSatur);

	return vC;
}

float4 ConeTraceTreeAndSky(const Ray r, const float fConeSev, const float fConesColorSatur = 1.f, const float fMultTriRT = 0, const bool bSpecular = false, const bool bForceUseLighting = false, float3 vSurfNorm = 0)
{
	float4 vNor1 = 0;
	return ConeTraceTreeAndSkyEx(r, fConeSev, vNor1, fConesColorSatur, fMultTriRT, bSpecular, bForceUseLighting, true, vSurfNorm);
}

pixout SvoDebugDrawPS(vert2FragGeneral IN)
{
	pixout OUT = (pixout)0;

	float4 cDiffuseMap = 1;

	// define ray
	Ray r;
	r.startpoint = PerView_WorldViewPos.xyz;
	r.direction = normalize(IN.baseTC.xyz - PerView_WorldViewPos.xyz);

	float4 vPos0 = 0, vNormal = 0;

##if AZ_RESTRICTED_PLATFORM
    ##include_restricted(Total_Illumination_cfx, AZ_RESTRICTED_PLATFORM)
##endif
##if AZ_RESTRICTED_SECTION_IMPLEMENTED
    ##undef AZ_RESTRICTED_SECTION_IMPLEMENTED
##else
	cDiffuseMap = ConeTraceTree(r, PerPass_SvoParams3.x, vPos0, vNormal, 0, 256.f, 0.f, 1.f, 0, 0, 0, false, false, true, 0, (int)PerPass_SvoParams4.z);
##endif


	cDiffuseMap.w = 1;

	OUT.Color = pow(cDiffuseMap, 1) / 16;
	OUT.Color.w = 1;

	return OUT;
}


vtxOutWPOS RenderLightingCommonVS(vtxInWPOS IN)
{
	vtxOutWPOS OUT = (vtxOutWPOS)0;

	OUT.HPosition = Get2dHPos(IN.Position);
	OUT.baseTC.xy = IN.baseTC.xy;
	OUT.baseTC.zw = 0;
	OUT.CamVec.xyz = IN.CamVec;

	return OUT;
}

float3 GetWorldPos(float fDepth, float3 vCamVec)
{
	return fDepth * vCamVec + PerView_WorldViewPos.xyz; // Return world space position
}

void GetRotationV0(half3 n, out half3x3 rotMat)
{
	half h = 1 / (1 + n.z);
	rotMat._m00 = h*n.y*n.y + n.z;	rotMat._m01 = -h*n.y*n.x;			rotMat._m02 = -n.x;
	rotMat._m10 = -h*n.y*n.x;			rotMat._m11 = h*n.x*n.x + n.z;	rotMat._m12 = -n.y;
	rotMat._m20 = n.x;						rotMat._m21 = n.y;						rotMat._m22 = n.z;
}

float3 Reproject(in half2 vScreenPos, in float fDepth, in float3x4 matReproj)
{
	float4 pos = float4(vScreenPos, 1.f, 1.f / fDepth);
	pos.xyz = mul(matReproj, pos);
	pos.xy /= pos.z;
	pos.z *= fDepth;
	pos.xy = lerp(vScreenPos.xy, pos.xy, saturate((fDepth-PerPass_SvoParams6.y) / (PerPass_SvoParams6.y*0.5f))); // 1p weapon fix
	return pos.xyz;
}

void GetAverNormAndSmooth(float2 tcIn, out float3 vAverNor, out float fAverSmoothness, out float fAverTransmittanceY, float3 vCamVec, out float3 vAverReflectance, out float fDepthMin, out float fDepthMax)
{
	vAverNor = 0;
	fAverSmoothness = 0;
	vAverReflectance = 0;
	fAverTransmittanceY = 0;
	float fSummW = 0;
	int nRange = 1;
	float2 vR = 0.5f / PS_ScreenSize.xy;
	float fDepthRange = 0.12;
	float fDepth0 = GetLinearDepth(sceneDepthMapSampler, tcIn);
	fDepthMin = fDepthMax = fDepth0;
	for (int x = 0; x <= nRange; x++) for (int y = 0; y <= nRange; y++)
	{
		float2 tc1 = tcIn + vR * float2(x, y);
		MaterialAttribsCommon gbuffer1 = DecodeGBufferChannels(tc1);
		float fDepth1 = GetLinearDepth(sceneDepthMapSampler, tc1);
		if (fDepth1 < fDepthMin)
			fDepthMin = fDepth1;
		if (fDepth1 > fDepthMax)
			fDepthMax = fDepth1;

		const float fW = saturate(fDepthRange - abs(1.f - fDepth0 / fDepth1)) + .001;

		fAverSmoothness += gbuffer1.Smoothness * fW;
		vAverReflectance += gbuffer1.Reflectance * fW;
		float fTransmittanceY = 0;
		vAverNor += GetWorldSpaceNormals(tc1, fTransmittanceY, vCamVec).xyz * fW;
		fAverTransmittanceY += fTransmittanceY * fW;

		fSummW += fW;
	}

	float normalVar = 1.0 / length(vAverNor / fSummW) - 1.0;
	vAverNor = normalize(vAverNor);
	fAverSmoothness /= fSummW;
	fAverSmoothness /= 1 + normalVar * 25;
	fAverTransmittanceY /= fSummW;
	vAverReflectance /= fSummW;
}

float GetBlendMin(float2 tcDiff, float3 vAverReflectance, float fAverSmoothness, float fDepth)
{
	float fMinBlend = SVO_TargetResScale.z;

	fMinBlend /= fDepth*PerView_NearFarClipDist.y / 2.f + 1.f;

	fMinBlend += SVO_TargetResScale.w + 0.05f;

	if (!IsDiffuseMode())
	{
		float fDistTCRat = IsDiffuseMode() ? 0 : saturate(length(tcDiff) / .02f);

		// reduce ghosting for mirrors
		fMinBlend = saturate(max(fMinBlend + fDistTCRat, 0.7 * saturate(GetLuminance(vAverReflectance*fAverSmoothness))));
	}

	return fMinBlend;
}

pixoutMRT DemosaicPS(vtxOutWPOS IN)
{
	pixoutMRT OUT = (pixoutMRT)0;

	// read position and normal
	float3 vPos0 = GetWorldPos(GetLinearDepth(sceneDepthMapSampler, IN.baseTC.xy), IN.CamVec);

	float3 vNor0 = 0; float fAverSmoothness = 0; float fAverTransmittanceY = 0; float3 vAverReflectance = 0;
	float fDepthMin = 0, fDepthMax = 0;
	GetAverNormAndSmooth(IN.baseTC.xy, vNor0, fAverSmoothness, fAverTransmittanceY, normalize(IN.CamVec), vAverReflectance, fDepthMin, fDepthMax);

	float2 vLowResBestTC = IN.baseTC.xy;

	float4 vALD0 = 0;
	float4 vRGB0 = 0;
	float4 vALD1 = 0;
	float4 vRGB1 = 0;

	int GI_DIFFUSE_KERNEL_TILING;
	GetDiffuseKernel(GI_DIFFUSE_KERNEL_TILING, 0);

	int nRange = GI_DIFFUSE_KERNEL_TILING;

	if (!IsDiffuseMode())
		nRange = clamp(saturate(1 - (fAverSmoothness*1.3 - .5) / (1 - .5)) * (float)nRange, 1, GI_DIFFUSE_KERNEL_TILING);

	// reduce range at distance
	const float fDistM = length(vPos0 - PerView_WorldViewPos.xyz);

	float fResScale = 1.f;
	float2 vR = 2.f * fResScale / (int2(PS_ScreenSize.xy / fResScale)*fResScale);
	float fSumm0 = 0;
	float fSumm1 = 0;
	float fDepthRange = 0.12 + 0.08 * saturate(1.f - dot(normalize(IN.CamVec), -vNor0)); // floor fix
	float fDotMax = .25;

	float2 vShift;
	if (IsDiffuseMode())
		vShift = vR / 2;
	else
		vShift = vR / 4;

	float2 vSnap = vR / 2;

	float2 vLowResBestTC_Sn = float2(int2(vLowResBestTC / vSnap))*vSnap + vShift;

#if %_RT_SAMPLE3
	const int nStep = 2;
#else
	const int nStep = 1;
#endif

	float3 vFocus = IsDiffuseMode() ? vNor0 : reflect(normalize(IN.CamVec), vNor0);

	// reduce border noise
	float2 vBorder = (nRange / 2)*vR * 1;
	vLowResBestTC_Sn = clamp(vLowResBestTC_Sn, vBorder, 1 - vBorder);

	float fRangeFade = 1.2f + 0.5f * saturate(1 - fDistM / 16);

	for (int x = -nRange / 2; x <= nRange / 2; x += nStep)
		for (int y = -nRange / 2; y <= nRange / 2; y += nStep)
		{
			float4 tc = saturate(float4(vLowResBestTC_Sn + vR * float2(x, y), 0, 0));

			float4 texALD = tex2Dlod(sceneAldSampler, tc);
			float4 texRGB = tex2Dlod(sceneRgbSampler, tc);

			float fNewDepth = texRGB.w;
			float3 vNorm = texALD;

			float fDistW = saturate(fRangeFade - sqrt(x*x + y*y) / max(1, nRange / 2));

			float fDotTest = lerp(.25, saturate(fAverTransmittanceY * 4 + dot(normalize(vNorm), vFocus) - fDotMax), saturate(length(vNorm) / max(0.0001, texALD.w) * 8.f)) + .001;

			float fDepTest0 = saturate((fDepthRange - abs(1.f - fNewDepth / fDepthMin)) * 4) + .001;
			float fDepTest1 = saturate((fDepthRange - abs(1.f - fNewDepth / fDepthMax)) * 4) + .001;

			float fWeigth0 = fDepTest0 * fDotTest * fDistW;
			float fWeigth1 = fDepTest1 * fDotTest * fDistW;

			fWeigth0 = lerp(.015f, fWeigth0, saturate(texALD.w * 1000));
			fWeigth1 = lerp(.015f, fWeigth1, saturate(texALD.w * 1000));

			vALD0 += texALD*fWeigth0;
			vRGB0 += texRGB*fWeigth0;
			vALD1 += texALD*fWeigth1;
			vRGB1 += texRGB*fWeigth1;

			fSumm0 += fWeigth0;
			fSumm1 += fWeigth1;
		}

	if (fSumm0)
	{
		vALD0 /= fSumm0;
		vRGB0.xyz = normalize(vRGB0.xyz);
	}
	if (fSumm1)
	{
		vALD1 /= fSumm1;
		vRGB1.xyz = normalize(vRGB1.xyz);
	}

	OUT.Diffuse.xyz = vRGB0;
	OUT.Diffuse.w = fDepthMin;
	OUT.Specular = vALD0;

	OUT.Diffuse1.xyz = vRGB1;
	OUT.Diffuse1.w = fDepthMax;
	OUT.Specular1 = vALD1;

#if VOX_REPROJECT
	// blend with prev frame ALD in order to remove flickering
	float fDepthC = GetLinearDepth(sceneDepthMapSampler, IN.baseTC.xy);
	float3 vReprojTC = Reproject(vLowResBestTC.xy, fDepthC, SVO_ReprojectionMatrix);

	float3 vReprojTC_Min = Reproject(IN.baseTC.xy, fDepthMin, SVO_ReprojectionMatrix);
	float3 vReprojTC_Max = Reproject(IN.baseTC.xy, fDepthMax, SVO_ReprojectionMatrix);

	float fDepthMinPrev = tex2Dlod(sceneRgbSamplerMinPrev, float4(vReprojTC_Min.xy, 0, 0)).w;
	float fDepthMaxPrev = tex2Dlod(sceneRgbSamplerMaxPrev, float4(vReprojTC_Max.xy, 0, 0)).w;

	float fOut_Min = vReprojTC_Min.x < 0 || vReprojTC_Min.x > 1 || vReprojTC_Min.y < 0 || vReprojTC_Min.y > 1;
	float fOut_Max = vReprojTC_Max.x < 0 || vReprojTC_Max.x > 1 || vReprojTC_Max.y < 0 || vReprojTC_Max.y > 1;

	float fMinBlend = GetBlendMin(vReprojTC.xy - IN.baseTC.xy, 1, fAverSmoothness, fDepthC);

	float fBlendMin = saturate(fOut_Min + fMinBlend + abs(1 - fDepthMin / fDepthMinPrev) * 8);
	float fBlendMax = saturate(fOut_Max + fMinBlend + abs(1 - fDepthMax / fDepthMaxPrev) * 8);

	OUT.Diffuse = clamp(lerp(tex2Dlod(sceneRgbSamplerMinPrev, float4(vReprojTC_Min.xy, 0, 0)), OUT.Diffuse, fBlendMin), -8, 8);
	OUT.Specular = clamp(lerp(tex2Dlod(sceneAldSamplerMinPrev, float4(vReprojTC_Min.xy, 0, 0)), OUT.Specular, fBlendMin), -8, 8);

	OUT.Diffuse1 = clamp(lerp(tex2Dlod(sceneRgbSamplerMaxPrev, float4(vReprojTC_Max.xy, 0, 0)), OUT.Diffuse1, fBlendMax), -8, 8);
	OUT.Specular1 = clamp(lerp(tex2Dlod(sceneAldSamplerMaxPrev, float4(vReprojTC_Max.xy, 0, 0)), OUT.Specular1, fBlendMax), -8, 8);
#endif

	return OUT;
}

void ProcessLights(inout float4 vALD, inout float4 vRGB, in float3 vPos0, in float3 vNor0, in float fOffset, bool bSpec, float3 vReflection, float fSpecPow, float fLightRadMin, bool bAllowDynamicVoxels = true, bool bShadows = true, float fCustomSunConesLen = 0, bool bSkipSun = false)
{
#if %_RT_SAMPLE5

	for (int nLightId = 0; nLightId < 32; nLightId++)
	{
		float4 vPosR = 0, vDirF = 0, vCol = 0;

		if (!GetLightTI(nLightId, vPosR, vDirF, vCol))
			break;

		if (vPosR.w < fLightRadMin)
			continue;

		if (nLightId == 0 && bSkipSun && vPosR.w>2000)
			continue;

		Ray r;
		r.direction = (vPosR.xyz - vPos0);
		float fDist = length(r.direction);
		if (fDist > vPosR.w)
			continue;

		r.direction = normalize(r.direction);

		float fNdotL = saturate(dot(vNor0, r.direction) + (1.f - length(vNor0)));

		if (fNdotL > 0)
		{
			float fFovAtt = 1.f;

			if (vDirF.w)
			{
				float fAngle = acos(dot(vDirF.xyz, -r.direction));
				float fAngleMax = (vDirF.w / 180.f * 3.14f / 2.f);
				fFovAtt = saturate((fAngleMax - fAngle)*8.f);
			}

			if (fFovAtt > 0)
			{
				float fRayLen = min(fDist - fOffset * 2, min(fDist*.9f, fCustomSunConesLen ? fCustomSunConesLen : (PerPass_SvoParams1.y * 2)));

				if (length(vCol.xyz) < 0.01f)
					continue;

				if (bSpec)
				{
					float fPowAmount = sqrt(saturate(dot(vReflection, r.direction)));
					fPowAmount = saturate(pow(fPowAmount, fSpecPow*255.f)) - 0.01;

					if (fPowAmount > 0)
					{
						r.startpoint = vPos0 + vNor0*fOffset / 40 + r.direction*fOffset;

						float4 vPos1 = 0, vNor1 = 0;
						float4 vC = 0;
						if (vCol.a > 0 && bShadows)
							vC = ConeTraceTree(r, PerPass_SvoParams0.x, vPos1, vNor1, 0, fRayLen);

						float3 vColorAdd = fNdotL * (1.f - vC.a) * vCol.xyz * saturate(1.f - fDist / vPosR.w) * fFovAtt * fPowAmount;// * vShadowCol;

						float fSunBr = length(vColorAdd);
						vALD.xyz += fSunBr * r.direction;
						vALD.w += fSunBr;
						vRGB.xyz += vColorAdd;
					}
				}
				else
				{
					r.startpoint = vPos0 + vNor0*fOffset / 3 + r.direction*fOffset;

					float4 vPos1 = 0, vNor1 = 0;

					float4 vC = 0;
					if (vCol.a > 0 && bShadows)
						vC = ConeTraceTree(r, PerPass_SvoParams0.x, vPos1, vNor1, 0, fRayLen);

					float3 vColorAdd = fNdotL * (1.f - vC.a) * vCol.xyz * saturate(1.f - fDist / vPosR.w) * fFovAtt;// * vShadowCol;

					if (vPosR.w < 5000) // if point light
						vColorAdd *= PerPass_SvoParams6.x;

					float fSunBr = length(vColorAdd);
					vALD.xyz += fSunBr * r.direction;
					vALD.w += fSunBr;
					vRGB.xyz += vColorAdd;
				}
			}
		}
	}

#endif
}

pixoutMRT ConeTracePS(vtxOutWPOS IN)
{
	pixoutMRT OUT = (pixoutMRT)0;

	float4 vALD = 0;
	float4 vRGB = 0;

#if %_RT_SAMPLE3
	ConeTrace_LM_PS(IN, vALD, vRGB);
#else

	// reconstruct position
	float3 vPos0 = GetWorldPos(GetLinearDepth(sceneDepthMapSampler, IN.baseTC.xy), IN.CamVec);

	float3 vNor0 = 0; float fAverSmoothness = 0; float fAverTransmittanceY = 0; float3 vAverReflectance = 0;
	float fDepthMin = 0, fDepthMax = 0;
	GetAverNormAndSmooth(IN.baseTC.xy, vNor0, fAverSmoothness, fAverTransmittanceY, normalize(IN.CamVec), vAverReflectance, fDepthMin, fDepthMax);

	float fDistM = length(vPos0 - PerView_WorldViewPos.xyz);

	float3 vFocus = IsDiffuseMode() ? vNor0 : reflect(normalize(IN.CamVec), vNor0);

	float fNewDepth = GetLinearDepth(sceneDepthMapSampler, IN.baseTC.xy);

	int2 nXY = int2(IN.baseTC.xy*PS_ScreenSize.xy);

	int GI_DIFFUSE_KERNEL_TILING;
	GetDiffuseKernel(GI_DIFFUSE_KERNEL_TILING, 0);

	int x = nXY.x&(GI_DIFFUSE_KERNEL_TILING - (int)1);
	int y = nXY.y&(GI_DIFFUSE_KERNEL_TILING - (int)1);
	int i = x*GI_DIFFUSE_KERNEL_TILING + y;

	{
		int s = int(SVO_FrameIdByte.x) & 1;

		Ray r;

		const int nGiDiffuseSampleNum = GI_DIFFUSE_KERNEL_TILING*GI_DIFFUSE_KERNEL_TILING * 2;
		float3 kern = GetDiffuseKernel(GI_DIFFUSE_KERNEL_TILING, i + (s)*nGiDiffuseSampleNum / 2);

		{ // dual kernel
			half3x3 rotMat = 0;
			GetRotationV0(vFocus, rotMat);
			bool bRotate = dot(vFocus, float3(0, 0, 1)) > -0.999f;
			float3 kernOpa = GetDiffuseKernel(GI_DIFFUSE_KERNEL_TILING, i + (s)*nGiDiffuseSampleNum / 2, false);

			if (IsDiffuseMode())
			{
				if(int(SVO_FrameIdByte.x/2)&1)
					kernOpa.x = -kernOpa.x;
				if(int(SVO_FrameIdByte.x/2)&2)
					kernOpa.y = -kernOpa.y;
			}

			if (bRotate)
				kernOpa = normalize(mul(normalize(kernOpa), rotMat));
			else
				kernOpa = normalize(float3(kernOpa.x, kernOpa.y, -kernOpa.z));

			if (IsDiffuseMode())
				kern = lerp(kernOpa, kern, saturate(fAverTransmittanceY * 4));
			else
				kern = kernOpa;
		}

		half power;
		if (IsDiffuseMode())
		{
			power = 0;
		}
		else
		{
			// Fresnel

			power = exp2(10.0h * fAverSmoothness + 1.0h);
			kern += vFocus * power / 25;
		}

		r.direction = normalize(kern);

		r.startpoint = vPos0;

#if !%_RT_SAMPLE5
		r.startpoint += (vFocus * saturate(1 - fAverTransmittanceY * 4) + r.direction * .3) * (VOX_MIN_VOX_SIZE + fDistM*.025f);
#endif

		float4 vC = 0;
		vC = ConeTraceTreeAndSky(r, PerPass_SvoParams1.x + power / 3000, PerPass_SvoParams2.z, 0, false, false, normalize(vNor0)*saturate(1 - fAverTransmittanceY * 4));

		float fBr = length(vC.xyz);
		vALD.xyz += r.direction*fBr;
		vALD.w += fBr;
		vRGB.xyz += vC.xyz;
	}

	vRGB.xyz += 0.001f;
	vRGB.w = fNewDepth;

#endif

#if VOX_REPROJECT
	half2 vReprojTC = Reproject(IN.baseTC.xy, vRGB.w, SVO_ReprojectionMatrix);

	half2 TSRadius = 0;
	const float2 bValid = (vReprojTC > TSRadius) && (vReprojTC < (1.h - TSRadius));

	// blend with prev values
	float fOldDepth = tex2Dlod(sceneRgbSampler, float4(vReprojTC.xy, 0, 0)).w;
	float4 vALDPrev = tex2Dlod(sceneAldSampler, float4(vReprojTC.xy, 0, 0));
	float4 vRGBPrev = tex2Dlod(sceneRgbSampler, float4(vReprojTC.xy, 0, 0));
	float fPrevDepth = GetLinearDepth(sceneDepthMapSampler, vReprojTC.xy);

	float fMinBlend = GetBlendMin(vReprojTC.xy - IN.baseTC.xy, vAverReflectance, fAverSmoothness, fNewDepth);

	float fBlendRatio = (bValid.x && bValid.y) ? saturate(fMinBlend + abs(1 - vRGB.w / fOldDepth) * 4) : 1;

	{
		OUT.Diffuse = lerp(vALDPrev, vALD, fBlendRatio);
		OUT.Specular = lerp(vRGBPrev, vRGB, fBlendRatio);
		OUT.Specular.w = vRGB.w;
	}
#else	
	OUT.Diffuse = vALD;
	OUT.Specular = vRGB;
	OUT.Specular.w = vRGB.w;
#endif

	return OUT;
}

[numthreads(VOX_COMPUTE_NUM_THREADS, VOX_COMPUTE_NUM_THREADS, 1)]
void ComputeClearBricks(uint3 Gid : SV_GroupID, uint3 GTid : SV_GroupThreadID, uint3 DTid : SV_DispatchThreadID, uint Gidx : SV_GroupIndex)
{
	int nNodeOffset = GetNodeRequestedForUpdate(Gid.x);
	if (nNodeOffset >= 0)
	{
		float3 vDataTC = ComputeDataTC(nNodeOffset);

		uint3 coord0 = vDataTC * float3(VOX_TEX_POOL_DIM);
		uint3 coord1 = coord0 + uint(VOX_BRICK_TEXRES);
		uint3 coord = coord0 + uint3(GTid.x, GTid.y, Gid.y);

		float4 pixel = 0;
		UAV_7[coord] = FlOAT4_TO_UINT(pixel);
		UAV_5[coord] = FlOAT4_TO_UINT(pixel);
		UAV_6[coord] = FlOAT4_TO_UINT(pixel);
		UAV_0[coord] = FlOAT4_TO_UINT(float4(.5, .5, .5, 0));
	}
}


[numthreads(VOX_COMPUTE_NUM_THREADS, VOX_COMPUTE_NUM_THREADS, 1)]
void ComputeDirectStaticLighting(uint3 Gid : SV_GroupID, uint3 GTid : SV_GroupThreadID, uint3 DTid : SV_DispatchThreadID, uint Gidx : SV_GroupIndex)
{
	int nNodeOffset = GetNodeRequestedForUpdate(Gid.x);
	if (nNodeOffset >= 0)
	{
		float3 vDataTC = ComputeDataTC(nNodeOffset);
		float4 voxAreaMin, voxAreaMax;
		float fNodeFrameId = ReadNodeCropBox(vDataTC, voxAreaMin, voxAreaMax);

		// find region for update
		float3 vTC0, vTC1;
		PrepareBrickInjection(vDataTC, vTC0, vTC1);
		uint3 coord0 = saturate(vTC0)*VOX_TEX_POOL_DIM;
		uint3 coord1 = saturate(vTC1)*VOX_TEX_POOL_DIM;
		uint3 coord = coord0 + uint3(GTid.x, GTid.y, Gid.y);

		float4 pixel = UINT_TO_FlOAT4(UAV_2[coord]);

		if ((coord.x <= coord1.x && coord.y <= coord1.y && coord.z <= coord1.z))
		{
			// get geom normal
			float3 vNor0 = 0;

			// get world position
			float3 vPos0 = GetVoxCenter(coord, coord0, coord1, voxAreaMin, voxAreaMax);

			bool bFogVolumes = true;

			float4 vOPAC = tex3Dlod(brickPool_Opac, float4(1.f / VOX_TEX_POOL_DIM * coord.xyz + 0.5f / VOX_TEX_POOL_DIM, 0));
			bool bAir = (!vOPAC.x && !vOPAC.y && !vOPAC.z);

			if (bAir)
			{

			}
			else
			{
				// get geom normal
				vNor0 = UINT_TO_FlOAT4(UAV_5[coord]);
				vNor0.xyz = (vNor0.zyx - .5) * 2;
			}

			float4 vALD = 0; float4 vRGB = 0;

			{
				float fLength = length(vNor0);

#if %_RT_SAMPLE2
#else
				if (fLength > 0.25)
#endif
					ProcessLights(vALD, vRGB, vPos0, fLength ? (vNor0 / fLength * 0.75) : 0, voxAreaMin.w / VOX_BRICK_TEXRES * 2, false, 0, 0, 1.f, false, true, 4000, false);
			}

			vRGB.xyz *= PerPass_SvoParams2.x;

			vRGB.xyz += GetAmbientColor();

			if (bAir)
			{
			}
			else
			{
				pixel.xyz *= vRGB.xyz;
			}

			pixel.w = 0;

			pixel = EncodeHDR(pixel);

			UAV_7[coord] = FlOAT4_TO_UINT(pixel);
			UAV_6[coord] = FlOAT4_TO_UINT(pixel);
		}
	}
}

[numthreads(VOX_COMPUTE_NUM_THREADS, VOX_COMPUTE_NUM_THREADS, 1)]
void ComputeDirectDynamicLighting(uint3 Gid : SV_GroupID, uint3 GTid : SV_GroupThreadID, uint3 DTid : SV_DispatchThreadID, uint Gidx : SV_GroupIndex)
{
	int nNodeOffset = GetNodeRequestedForUpdate(Gid.x);
	if (nNodeOffset >= 0)
	{
		float3 vDataTC = ComputeDataTC(nNodeOffset);
		float4 voxAreaMin, voxAreaMax;
		float fNodeFrameId = ReadNodeCropBox(vDataTC, voxAreaMin, voxAreaMax);

		// find region for update
		float3 vTC0, vTC1;
		PrepareBrickInjection(vDataTC, vTC0, vTC1);
		uint3 coord0 = saturate(vTC0)*VOX_TEX_POOL_DIM;
		uint3 coord1 = saturate(vTC1)*VOX_TEX_POOL_DIM;
		uint3 coord = coord0 + uint3(GTid.x, GTid.y, Gid.y);

		float4 pixel = UINT_TO_FlOAT4(UAV_2[coord]);

		float4 vOPAC = tex3Dlod(brickPool_Opac, float4(1.f / VOX_TEX_POOL_DIM * coord.xyz + 0.5f / VOX_TEX_POOL_DIM, 0));
		bool bAir = (!vOPAC.x && !vOPAC.y && !vOPAC.z);

		if (!bAir)
			if ((coord.x <= coord1.x && coord.y <= coord1.y && coord.z <= coord1.z))
			{
				// get geom normal
				float3 vNor0 = 0;

				// get world position
				float3 vPos0 = GetVoxCenter(coord, coord0, coord1, voxAreaMin, voxAreaMax);

				bool bFogVolumes = true;

				float4 vALD = 0; float4 vRGB = 0;

				if (length(vPos0.xyz - SVO_CamPos.xyz) < 24)
				{
					ProcessTiledLights(vRGB, vPos0, 0, voxAreaMin.w / VOX_BRICK_TEXRES);
#if !%_RT_SAMPLE0
					if (voxAreaMin.w <= SVO_RsmSunDir.w)
					{
						if (SVO_RsmSunCol.r || SVO_RsmSunCol.g || SVO_RsmSunCol.b)
						{
							float4 vShadTC = mul(SVO_RsmSunShadowProj, float4(vPos0.xyz + vNor0.xyz*voxAreaMin.w / VOX_BRICK_TEXRES / 4 + SVO_RsmSunDir.xyz*voxAreaMin.w / VOX_BRICK_TEXRES - PerView_WorldViewPos.xyz, 1.f));
							vShadTC.xy /= vShadTC.w;
							if (vShadTC.x >= 0 && vShadTC.x <= 1 && vShadTC.y >= 0 && vShadTC.y <= 1 && vShadTC.z <= 1)
							{
								float fShadowDepth = tex2Dlod(SVO_RsmSunShadowMap, float4(vShadTC.xy, 0, 0)).r;
								half3 vMatNormal = tex2Dlod(SVO_RsmSunNormalMap, float4(vShadTC.xy, 0, 0)).rgb;
								if (dot(vMatNormal, 1) < 0.01)
									vMatNormal = float3(0, 0, 1); // terrain
								else
									vMatNormal = vMatNormal * 2 - 1;
								vRGB.xyz += SVO_RsmSunCol.xyz * (fShadowDepth > vShadTC.z) * saturate(dot(vMatNormal.xyz, SVO_RsmSunDir.xyz));
							}
						}
					}
#endif // _RT_SAMPLE0
				}

				{
					pixel.xyz *= vRGB.xyz * PerPass_SvoParams2.x;
				}

				float4 pixOld = UINT_TO_FlOAT4(UAV_5[coord]);
				pixOld.xyz = DecodeHDR(pixOld); pixOld.w = 0;
				pixOld.xyz = max(pixel.xyz, pixOld.xyz);
				pixOld = EncodeHDR(pixOld);
				UAV_7[coord] = FlOAT4_TO_UINT(pixOld);
			}
	}
}

[numthreads(VOX_COMPUTE_NUM_THREADS, VOX_COMPUTE_NUM_THREADS, 1)]
void ComputePropagateLighting(uint3 Gid : SV_GroupID, uint3 GTid : SV_GroupThreadID, uint3 DTid : SV_DispatchThreadID, uint Gidx : SV_GroupIndex)
{
	int nNodeOffset = GetNodeRequestedForUpdate(Gid.x);
	if (nNodeOffset >= 0)
	{
		float3 vDataTC = ComputeDataTC(nNodeOffset);
		float4 voxAreaMin, voxAreaMax;
		float fNodeFrameId = ReadNodeCropBox(vDataTC, voxAreaMin, voxAreaMax);

		// find region for update
		float3 vTC0, vTC1;
		PrepareBrickInjection(vDataTC, vTC0, vTC1);
		uint3 coord0 = saturate(vTC0)*VOX_TEX_POOL_DIM;
		uint3 coord1 = saturate(vTC1)*VOX_TEX_POOL_DIM;

		uint3 coord = coord0 + uint3(GTid.x, GTid.y, Gid.y);

		float4 pixel = tex3Dlod(brickPool_Rgbs, float4(1.f / VOX_TEX_POOL_DIM * coord.xyz + 0.5f / VOX_TEX_POOL_DIM, 0));

		pixel.xyz = DecodeHDR(pixel);
		pixel.w = 0;

		float4 vOPAC = tex3Dlod(brickPool_Opac, float4(1.f / VOX_TEX_POOL_DIM * coord.xyz + 0.5f / VOX_TEX_POOL_DIM, 0));
		const bool bSolid = (vOPAC.x || vOPAC.y || vOPAC.z);


		if (!bSolid)
			return;


		const int nPassId = SVO_PropagationPass.x;
		const int nPassesNum = PerPass_SvoParams5.z;

		if ((coord.x <= coord1.x && coord.y <= coord1.y && coord.z <= coord1.z))
		{
			// get world normal
			float3 vNor0 = tex3Dlod(brickPool_Norm, float4(1.f / VOX_TEX_POOL_DIM * coord.xyz + 0.5f / VOX_TEX_POOL_DIM, 0));
			vNor0.xyz = 2 * (vNor0.zyx - 0.5f);

			{
				float3 vNormD = 0;

				float pixel_c = UINT_TO_FlOAT4(UAV_0[coord]).w;

				for (int x = -1; x <= 1; x++)
					for (int y = -1; y <= 1; y++)
						for (int z = -1; z <= 1; z++)
						{
							int3 coord_n = coord + int3(x, y, z);

							if (coord_n.x <= coord1.x && coord_n.y <= coord1.y && coord_n.z <= coord1.z)
								if (coord_n.x >= coord0.x && coord_n.y >= coord0.y && coord_n.z >= coord0.z)
								{
									float pixel_n = UINT_TO_FlOAT4(UAV_0[coord_n]).w;
									vNormD += float3(x, y, z)*(pixel_c - pixel_n);
								}
						}

				vNormD /= 16;

				if (length(vNormD) > length(vNor0))
					vNor0.xyz = normalize(vNormD);

				vNor0.xyz = normalize(vNor0.xyz);
			}

			if (!bSolid)
				vNor0 = float3(0, 0, 1);

			// get world position
			float3 vPos0 = GetVoxCenter(coord, coord0, coord1, voxAreaMin, voxAreaMax);

			float fVoxSize = voxAreaMin.w / VOX_BRICK_TEXRES;

			half3x3 rotMat = 0;
			GetRotationV0(vNor0, rotMat);

			float3 vCollectedLight = 0;
			float4 vCollectedALD = 0;

			{
				half2x2 mSampleRotMat;
				if (bSolid)
					GetRndRotationMat(vPos0 + nPassId, vNor0, mSampleRotMat);
				else
					GetRndRotationMat(vPos0 + vPos0.z, vNor0, mSampleRotMat);

				const int nSampleNum = 32;
				for (int s = 0; s < nSampleNum; s++)
				{
					float3 kern;
					if (bSolid)
						kern = kernel_HS_32[s];
					else
						kern = kernel_S_32[s];
					// apply random rotation
					kern.xy = mul(kern.xy, mSampleRotMat);

					Ray r;
					if (bSolid)
						r.direction = mul(normalize(kern), rotMat);
					else
						r.direction = kern;

					r.startpoint = vPos0 + vNor0*fVoxSize * 2 + r.direction*fVoxSize*1.5f;

					float fConeSev = PerPass_SvoParams1.x; 

					float4 vNor1 = 0;

					float4 vC = ConeTraceTreeAndSkyEx(r, fConeSev, vNor1, 1.f, 0, false, false, nPassId == 0);

					vCollectedLight += vC;

					vCollectedALD.xyz += length(vC.xyz)*r.direction;
					vCollectedALD.w += length(vC.xyz);
				}

				if (bSolid)
					vCollectedLight /= nSampleNum;
				else
					vCollectedLight /= nSampleNum;

				vCollectedALD /= nSampleNum;
			}

			RWTexture3D<uint> UAV_Albedo = UAV_0;
			RWTexture3D<uint> UAV_Out = UAV_5;
			RWTexture3D<uint> UAV_OutDir = UAV_6;
			RWTexture3D<uint> UAV_DYNL = UAV_7;

			float4 vAlbedo = UINT_TO_FlOAT4(UAV_Albedo[coord]);



			vCollectedLight *= vAlbedo.xyz;


			pixel.xyz = (pixel.xyz + vCollectedLight);


			pixel = EncodeHDR(pixel);

			UAV_Out[coord] = FlOAT4_TO_UINT(pixel);
			UAV_DYNL[coord] = FlOAT4_TO_UINT(pixel);

#if %_RT_SAMPLE3
			{
				vCollectedALD.xyz = vCollectedALD.xyz*.75 + .5;
				UAV_OutDir[coord] = FlOAT4_TO_UINT(vCollectedALD);

				for (int x = -1; x <= 1; x++) for (int y = -1; y <= 1; y++) for (int z = -1; z <= 1; z++)
				{
					int3 coord_n = coord + int3(x, y, z);
					if (coord_n.x <= coord1.x && coord_n.y <= coord1.y && coord_n.z <= coord1.z)
						if (coord_n.x >= coord0.x && coord_n.y >= coord0.y && coord_n.z >= coord0.z)
						{
							float4 vOldRGB = UINT_TO_FlOAT4(UAV_Out[coord_n]);
							float4 vOldALD = UINT_TO_FlOAT4(UAV_OutDir[coord_n]);

							float4 pixel_N = tex3Dlod(brickPool_Rgbs, float4(1.f / VOX_TEX_POOL_DIM * coord_n.xyz + 0.5f / VOX_TEX_POOL_DIM, 0));

							if (vCollectedALD.w > vOldALD.w && pixel_N.w == 0)
							{
								UAV_Out[coord_n] = FlOAT4_TO_UINT(pixel);
								UAV_OutDir[coord_n] = FlOAT4_TO_UINT(vCollectedALD);
							}
						}
				}
			}
#endif
		}
	}
}

pixoutMRT UpScalePS(vtxOutWPOS IN)
{
	pixoutMRT OUT = (pixoutMRT)0;

	const float fDepthRange = .12;
	const float fDotMax = .35;
	const float fDepthC = GetLinearDepth(sceneDepthMapSampler, IN.baseTC.xy);
	float fTransmittanceY = 0;
	const float3 vNor0 = normalize(GetWorldSpaceNormals(IN.baseTC.xy, fTransmittanceY, normalize(IN.CamVec)).xyz);

	float3 vFocus = IsDiffuseMode() ? vNor0 : reflect(normalize(IN.CamVec), vNor0);

	float4 vRGB = 0;
	float4 vALD = 0;
	float fAverSmoothness = 0;
	for (int x = -1; x <= 1; x += 2) for (int y = -1; y <= 1; y += 2)
	{
		const float2 tc1 = IN.baseTC.xy + float2(x, y) * SVO_SrcPixSize.xy / 2;
		const float4 tc = float4(tc1 + 0.5f / PS_ScreenSize.xy, 0, 0);

		const float4 vSampleDiff_RGB_Min = tex2Dlod(sceneRgbSamplerMin, tc);
		const float4 vSampleDiff_ALD_Min = tex2Dlod(sceneAldSamplerMin, tc);
		const float4 vSampleDiff_RGB_Max = tex2Dlod(sceneRgbSamplerMax, tc);
		const float4 vSampleDiff_ALD_Max = tex2Dlod(sceneAldSamplerMax, tc);

		const float fDepthMin = vSampleDiff_RGB_Min.w;
		const float fDepthMax = vSampleDiff_RGB_Max.w;

		float fLerp = saturate((fDepthC - fDepthMin) / max(fDepthMax - fDepthMin, 0.0001f));

		float4 vSampleDiff_RGB = lerp(vSampleDiff_RGB_Min, vSampleDiff_RGB_Max, fLerp);
		float4 vSampleDiff_ALD = lerp(vSampleDiff_ALD_Min, vSampleDiff_ALD_Max, fLerp);

		const float fDepth1 = vSampleDiff_RGB.w;
		const float3 vNorm = vSampleDiff_ALD;

		float fDotTest = lerp(.25, saturate(fTransmittanceY * 4 + dot(normalize(vNorm), vFocus) - fDotMax), saturate(length(vNorm) / max(0.0001, vSampleDiff_ALD.w) * 8.f)) + .001;

		float fDepTest = saturate((fDepthRange - abs(1.f - fDepthC / fDepth1)) * 4) + .001;

		const float fW = fDepTest * fDotTest;

		vRGB.xyz += vSampleDiff_RGB.xyz*fW;
		vALD += vSampleDiff_ALD*fW;
		MaterialAttribsCommon gbuffer = DecodeGBufferChannels(tc1);
		fAverSmoothness += gbuffer.Smoothness*fW;
		vRGB.w += fW;
	}

	if (vRGB.w)
	{
		vRGB.xyz /= vRGB.w;
		vALD /= vRGB.w;
		fAverSmoothness /= vRGB.w;
	}

	// copmute lighting
	float fDirIntens = max(0, length(vALD.xyz)) * saturate(1 - fTransmittanceY);

	MaterialAttribsCommon gbuffer = DecodeGBufferChannels(IN.baseTC.xy);
	half power = IsDiffuseMode() ? 1.f : exp2(12.h * gbuffer.Smoothness + 0.5h);

	float3 vH = IsDiffuseMode() ? normalize(vALD.xyz) : normalize(-normalize(IN.CamVec) + normalize(vALD.xyz));

	float NdotH = dot(vNor0, vH);
	float fIntensity = fDirIntens*pow(saturate(NdotH), power) + max(0, vALD.w - fDirIntens);

	if (IsDiffuseMode())
	{
		OUT.Diffuse.xyz = vRGB * fIntensity;
	}
	else
	{
		float so = gbuffer.Smoothness;
		// Fresnel smoothness
		gbuffer.Smoothness = lerp(gbuffer.Smoothness, 1, pow(1 - dot(-normalize(IN.CamVec), vNor0), 2));

		//OUT.Diffuse.xyz = vRGB * vALD.w;

		OUT.Diffuse.xyz = lerp(vRGB * fIntensity, vRGB * vALD.w, pow(gbuffer.Smoothness, 2));

		float4 vFinalDiffuse = tex2Dlod(SVO_DiffuseFinRT, float4(IN.baseTC.xy, 0, 0));

		OUT.Diffuse = lerp(vFinalDiffuse, OUT.Diffuse, saturate(pow(gbuffer.Smoothness * 2 - .75, 1)));

		// Fresnel amplify
		OUT.Diffuse.xyz *= 1 + pow(saturate(1 - so), 4) * pow(saturate(1 - dot(-normalize(IN.CamVec), vNor0)), 7) * 2;

		OUT.Diffuse.a = 1;
	}
#if !%_RT_SAMPLE5
	if (IsDiffuseMode())
		OUT.Diffuse.xyz += GetAmbientColor();
#endif

	OUT.Diffuse.w = fDepthC;

	return OUT;
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Rendering techniques

technique SvoDebugDraw
{
	pass p0
	{
		VertexShader = VoxelRayTraceVS() GeneralVS;
		PixelShader = SvoDebugDrawPS() GeneralPS;
		CullMode = None;
	}
}

technique ConeTracePass
{
	pass p0
	{
		VertexShader = RenderLightingCommonVS();
		PixelShader = ConeTracePS();
		CullMode = None;
	}
}

technique DemosaicPass
{
	pass p0
	{
		VertexShader = RenderLightingCommonVS();
		PixelShader = DemosaicPS();
		CullMode = None;
	}
}

technique UpScalePass
{
	pass p0
	{
		VertexShader = RenderLightingCommonVS();
		PixelShader = UpScalePS();
		CullMode = None;
	}
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Compute techniques

technique ComputeClearBricks
{ 
	pass p0
	{ 
		ComputeShader = ComputeClearBricks(); 
	} 
}

technique ComputeDirectStaticLighting
{ 
	pass p0
	{ 
		ComputeShader = ComputeDirectStaticLighting(); 
	} 
}

technique ComputeDirectDynamicLighting
{ 
	pass p0
	{ 
		ComputeShader = ComputeDirectDynamicLighting(); 
	} 
}

technique ComputePropagateLighting
{ 
	pass p0
	{ 
		ComputeShader = ComputePropagateLighting(); 
	}
	 
}

#endif // FEATURE_SVO_GI

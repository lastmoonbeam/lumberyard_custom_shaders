/*
* All or portions of this file Copyright (c) Amazon.com, Inc. or its affiliates or
* its licensors.
*
* For complete copyright and license terms please see the LICENSE at the root of this
* distribution (the "License"). All use of this software is governed by the License,
* or, if provided, by the license below or the license accompanying this file. Do not
* remove or modify any license notices. This file is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*
*/
// Original file Copyright Crytek GMBH or its affiliates, used under license.

#include "Common.cfi"
#include "shadeLib.cfi"

float Script : STANDARDSGLOBAL
<
	string Script =
	"Public;"
	"ShaderDrawType = General;"
	"ShaderType = FX;"
	"LocalConstants;"
>;


float4x4 objMatrix				: PI_TransObjMatrix;

float3x4	invObjSpaceMatrix;
float3		eyePosInOS;
float3		eyePosInWS;
float2		viewerIsOutside;

float4 		darkColor;
float4 		brightColor;
float4		volumeTraceStartPlane;
float4		scaleConsts;

float GlobalDensity
<
  register = PER_MATERIAL_0.x;
  string UIWidget = "slider";
  string UIName = "Global Density";
  float UIMin = 0.0;
  float UIMax = 32.0;
  float UIStep = 0.01;
> = 1.0;

sampler3D volDensitySampler = sampler_state
{
	Texture = $VolObj_Density;
	MinFilter = LINEAR;
	MagFilter = LINEAR;
	MipFilter = NONE;
	AddressU = Border;
	AddressV = Border;
	AddressW = Border;
	BorderColor = {0, 0, 0, 0};
};

sampler3D volShadSampler = sampler_state
{
	Texture = $VolObj_Shadow;
	MinFilter = LINEAR;
	MagFilter = LINEAR;
	MipFilter = NONE;
	AddressU = Border;
	AddressV = Border;
	AddressW = Border;
	BorderColor = {0, 0, 0, 0};
};

sampler3D noise3Dsampler = sampler_state
{  
	Texture = EngineAssets/Textures/Noise3D.dds;
	MinFilter = LINEAR;
	MagFilter = LINEAR;
	MipFilter = LINEAR; 
	AddressU = Wrap;
	AddressV = Wrap;
	AddressW = Wrap;
};

#define JITTER_TEX_RES 64.0

sampler2D jitterSampler = sampler_state
{
	Texture = EngineAssets/Textures/Vector_Noise.dds;
	MinFilter = POINT;  
	MagFilter = POINT;
	MipFilter = POINT; 
	AddressU = Wrap;
	AddressV = Wrap;
};


struct a2v
{
	float4 Position : POSITION;
};


struct v2f
{
	float4 hPos					: POSITION;
	float3 eyeDirInWS		: TEXCOORDN;
	float3 eyeDirInOS		: TEXCOORDN;
	float4 hPosTexProj	: TEXCOORDN;
	float4 hPosTexProjN	: TEXCOORDN;
};


v2f VS(a2v IN)
{
	v2f OUT = (v2f) 0; 

	float4 vPos = IN.Position;
	float4 hPos = mul( vpMatrix, vPos );

	OUT.hPos = hPos;
	// multiply homogeneous z by either zero (inside) or one (outside) to prevent far clipping plane artifacts if we're inside a huge fog volume
	OUT.hPos.z *= viewerIsOutside.x;
	OUT.hPos.z = min(OUT.hPos.z, 0.99);

#if %_RT_REVERSE_DEPTH
	OUT.hPos.z = OUT.hPos.w - OUT.hPos.z;
#endif

	OUT.hPosTexProj = hPos;	
	OUT.hPosTexProj.x = ( OUT.hPosTexProj.x + OUT.hPosTexProj.w) * 0.5;
	OUT.hPosTexProj.y = (-OUT.hPosTexProj.y + OUT.hPosTexProj.w) * 0.5;

	OUT.hPosTexProjN = OUT.hPosTexProj;
	OUT.hPosTexProjN.xy *= PerView_ScreenSize.xy / float2(JITTER_TEX_RES, JITTER_TEX_RES); // float2((1280 / 720.0) * (720.0 / 64.0), 720.0 / 64.0);

	OUT.eyeDirInWS = mul((float3x4) objMatrix, vPos) - eyePosInWS;
	OUT.eyeDirInOS = mul((float3x3) invObjSpaceMatrix, OUT.eyeDirInWS.xyz);

	return OUT;
}

pixout PS(v2f IN)
{
	pixout OUT = (pixout) 0;

	// Debug output
#if %_RT_DEBUG0 || %_RT_DEBUG1 || %_RT_DEBUG2 || %_RT_DEBUG3
	DebugOutput(OUT.Color, float4(0, 0, 0, 1));
	return OUT;
#endif

#if %SOFT_OBJECT_INTERSECTION
	float sceneDepth = DecodeSceneDepth(sceneDepthSampler, float4(GetScaledScreenTC(IN.hPosTexProj.xy), IN.hPosTexProj.zw));
#endif

	float3 jitter = tex2Dproj(jitterSampler, IN.hPosTexProjN);

	float3 viewDirWS = normalize(IN.eyeDirInWS.xyz);
	float3 viewDir = normalize(IN.eyeDirInOS.xyz);

	float pd = -volumeTraceStartPlane.w - dot(volumeTraceStartPlane.xyz, eyePosInWS.xyz);
	pd /= dot(volumeTraceStartPlane.xyz, viewDirWS);

	float3 p = viewDirWS * pd + eyePosInWS;

	p = mul((float3x4) invObjSpaceMatrix, float4(p, 1));
	p = p * 0.5 + 0.5;

	int numSamples = 32;

	float3 stepSize = (sqrt(3) / numSamples) *  viewDir; // TODO: sqrt(3) replaced by extend of tightBounds -> better sampling!

#if %JITTERING
	float jitterAmount = jitter.z * 2 - 1;
	p += jitterAmount * stepSize;
#endif

	float density = 1;
	float shad = 1;
	float4 col = float4(0, 0, 0, 0.001);

#if %SOFT_OBJECT_INTERSECTION
	float c = 1 / dot(viewDirWS, -PerView_ViewBasisZ);
	sceneDepth *= c;
#endif	

	const float stepSizeF = sqrt(3) * scaleConsts.x * 2.0 / numSamples;	// TODO: sqrt(3) replaced by extend of tightBounds -> better sampling!
	float curDepth = pd;
#if %JITTERING
	curDepth += jitterAmount * stepSizeF;
#endif
	float avgFogDist = curDepth;

	for (int a = 0; a < numSamples; a++)
	{
		float noise = tex3D(noise3Dsampler, p * 8.0).w;
		noise = (noise*0.05h-0.025h);

		half3 pN = p+noise;
		float curShadow = tex3D(volShadSampler, pN).a;
		float curDensity = saturate(tex3D(volDensitySampler, pN).a * GlobalDensity);

#if %SOFT_OBJECT_INTERSECTION
		curDensity *= saturate((sceneDepth - curDepth) / stepSizeF);
		curDepth += stepSizeF;
#endif

#if %CUSTOM_SETTINGS
		float3 sampleCol = lerp(PerFrame_CloudShadingColorSky.xyz, PerFrame_CloudShadingColorSun.xyz, curShadow);
#else
		float3 sampleCol = lerp(darkColor.xyz, brightColor.xyz, curShadow);
#endif
		col += (1 - col.w) * curDensity * float4(sampleCol, 1);

		avgFogDist += stepSizeF * saturate(1 - col.w);

		p += stepSize;
	}	

#if %SOFT_JITTERING
	float4 colDdx = ddx(col);
	float4 colDdy = ddy(col);

	float4 colAvgX = (0.5 - jitter.x) * colDdx + col;
	float4 colAvgY = (0.5 - jitter.y) * colDdy + col;

	col = (colAvgX + colAvgY) * 0.5;
#endif

	col.xyz /= col.w;

#if %BACK_LIGHTING
	half arg = 0.5 + ( -col.w + 0.4 ) * 0.8;
	half mask = saturate( arg );
	float spec = 5 * pow( saturate( dot( viewDirWS.xyz, PerFrame_SunDirection.xyz ) ), 20 );
	col.xyz = col.xyz + col.w * mask * spec * brightColor;
#endif  

#if %_RT_FOG
#if !%_RT_VOLUMETRIC_FOG
	half4 fogColor = GetVolumetricFogColor(eyePosInWS.xyz + avgFogDist * viewDirWS.xyz, true);
	col.xyz = lerp(fogColor.xyz, col.xyz, fogColor.w).xyz;
	//vRes.xyz = lerp(AvgFogVolumeContrib.xyz * vRes.w, vRes.xyz, AvgFogVolumeContrib.w); 
#else
	VolumetricFogTexcoord vtc = GetVolumetricFogTexcoordParamByScreenProj(IN.hPosTexProj);
	half4 vf = GetVolumetricFogValue(vtc);
	half4 globalFog = GetVolumetricFogAnalyticalColorByWorldPos(eyePosInWS.xyz + avgFogDist * viewDirWS.xyz);
	ApplyVolumetricFog(vf, globalFog, vtc, col.rgb);
#endif
#endif

	col.w *= darkColor.w;

	OUT.Color = half4(col);

	return( OUT );
}


technique General
{
	pass p0
	{
		VertexShader = VS();
		PixelShader = PS();
		ZEnable = false;
		ZWriteEnable = false;
	}
}


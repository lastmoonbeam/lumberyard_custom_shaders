//--------------------------------------------------------------------------------------------
//
// This product contains one or more programs protected under international and 
// U.S. copyright laws as unpublished works.  They are confidential and proprietary to Dolby Laboratories.  
// Their reproduction or disclosure, in whole or in part, or the production of derivative works 
// therefrom without the express permission of Dolby Laboratories is prohibited.  
// Copyright 2013-2015 by Dolby Laboratories.  All rights reserved.
//
//--------------------------------------------------------------------------------------------

float4 HDRDolbyScurveParams0;
float4 HDRDolbyScurveParams1;
float4 HDRDolbyScurveParams2;

// Settings:
//--------------------------------------------------------------------------------------------

// Mapping curve parameters (game engine specific -> absolute luminance (cd/m^2)):
#define DOLBY_SCURVE_ENABLED HDRDolbyScurveParams0.x
#define DOLBY_SCURVE_SOURCE_MIN HDRDolbyScurveParams0.y
#define DOLBY_SCURVE_SOURCE_MID HDRDolbyScurveParams0.z
#define DOLBY_SCURVE_SOURCE_MAX HDRDolbyScurveParams0.w
#define DOLBY_SCURVE_SLOPE HDRDolbyScurveParams1.w
#define DOLBY_SCURVE_SCALE HDRDolbyScurveParams2.w

#define DOLBY_SCURVE_TARGET_MIN HDRDolbyScurveParams1.x
#define DOLBY_SCURVE_TARGET_MID HDRDolbyScurveParams1.y
#define DOLBY_SCURVE_TARGET_MAX HDRDolbyScurveParams1.z

// Debug color ranges
//#define DOLBY_RANGE_DEBUG 1
#define DOLBY_RANGE_MIN 0.01
#define DOLBY_RANGE_MAX 2000.0

// Dolby Vision dynamic metadata
#define DOLBY_DYNAMIC_METADATA_ENABLED HDRDolbyScurveParams2.x

// Dolby color space conversion
// Color spaces:
//   0: P3D65
//   1: Rec709
//   2: Rec2020 
#define DOLBY_COLOR_SPACE_CONVERSION_FROM_REC709 1
#define DOLBY_COLOR_SPACE 2

//--------------------------------------------------------------------------------------------

half3 encodePQ(half3 rgb)
{
	// --- Dolby PQ constants --- 
	const float MAX_NIT = 10000;
	const float N = 0.1593017578125; // N
	const float M = 78.84375; // M
		
	const half3 step1 = pow(abs(rgb / MAX_NIT), N); 
	return pow((18.8515625 * step1 +
	 half3(0.8359375, 0.8359375, 0.8359375)) / 
	 (half3(1.0, 1.0, 1.0) + 18.6875 * step1), M);
}


float3 DolbySCurveCalculateC123(float Slope, float SMin, float SMid, float SMax, float TMin, float TMid, float TMax)
{
	float x1 = pow(SMin, Slope);
	float x2 = pow(SMid, Slope);
	float x3 = pow(SMax, Slope);
	float y1 = TMin;
	float y2 = TMid;
	float y3 = TMax;

	float tmp = (x3 * y3 * (x1 - x2)) + (x2 * y2 * (x3 - x1)) + (x1 * y1 * (x2 - x3));
	float SCurveC1 = ((x2 * x3 * (y2 - y3) * y1) - (x1 * x3 * (y1 - y3) * y2) + (x1 * x2 * (y1 - y2) * y3)) / tmp;
	float SCurveC2 = (-(x2 * y2 - x3 * y3) * y1 + (x1 * y1 - x3 * y3) * y2 - (x1 * y1 - x2 * y2) * y3) / tmp;
	float SCurveC3 = ((x3 - x2) * y1 - (x3 - x1) * y2 + (x2 - x1) * y3) / tmp;

	return float3(SCurveC1, SCurveC2, SCurveC3);
}

half3 DolbyPQEncoding(half3 rgb)
{
	half3 PQ = encodePQ(rgb);

	return PQ;
}

///////////////////////////////////////////////////////////////////////////////////////////
/* IPTPQ Conversion
*/

// Forward CSC (RGB -> LMS -> IPT)
static const float3x3 matRgb2lms = float3x3( 	0.313954426765,  0.639535778716,  0.046509794519,
												0.155351726351,  0.757923847590,  0.086724426059,
												0.017750040071,  0.109447620855,  0.872802339074 );
											

static const float3x3 matLms2ipt = float3x3( 	0.400000000000,  0.400000000000,  0.200000000000,
												4.455000000000, -4.851000000000,  0.396000000000,
												0.805600000000,  0.357200000000, -1.162800000000);

// Reverse CSC (IPT -> LMS -> RGB)
static const float3x3 matLms2rgb = float3x3( 	5.472749710, -4.642402172, 0.169652611, 
												-1.125159144, 2.293046236, -0.167887032, 
												0.029794235, -0.193131521, 1.163337231 );												
																								
											
static const float3x3 matIpt2lms = float3x3(    1.000000000, 0.097568944, 0.205226466,
												1.000000000, -0.113876507, 0.133217171, 
												1.000000119, 0.032615110, -0.676887274);

static const float3 PQ_N  = 2610.0 / 4096.0 / 4.0;
static const float3 PQ_M  = 2523.0 / 4096.0 * 128.0;
static const float3 PQ_c1 = 3424.0 / 4096.0;
static const float3 PQ_c2 = 2413.0 / 4096.0 * 32.0;
static const float3 PQ_c3 = 2392.0 / 4096.0 * 32.0;

float L2PQ(float L)
{
   L = pow(max(0.0,L/10000.0), PQ_N.x);
   float PQ = pow(max(0.0,((PQ_c1.x+PQ_c2.x*L) / (1.0+PQ_c3.x*L))), PQ_M.x);
   return PQ;
}

float3 L2PQ_vec3(float3 L)
{
   L = pow(max(0.0,L/10000.0), PQ_N);
   float3 PQ = pow(max(0.0,((PQ_c1+PQ_c2*L) / (1.0+PQ_c3*L))), PQ_M);
   return PQ;
}

float PQ2L(float PQ)
{
	float Z = pow(PQ,1.0/PQ_M.x);
	float Lp = (Z-PQ_c1.x)/(PQ_c2.x-Z*PQ_c3.x);
	float L = pow(Lp,1.0/PQ_N.x)*10000.0;
	return L;
}

float3 PQ2L_vec3(float3 PQ)
{
	float3 Z = pow(PQ,1.0/PQ_M);
	float3 Lp = (Z-PQ_c1)/(PQ_c2-Z*PQ_c3);
	float3 L = pow(Lp,1.0/PQ_N)*10000.0;
	return L;
}

float3 ApplyDolbySCurve(float3 Color, const float Scale, const float Slope, const float C1, const float C2, const float C3)
{
	float3 pow_in = pow(abs(clamp(Color.rgb, 0.000061f, 65504.f) / Scale), Slope);
	return (C1 + C2 * pow_in) / (1 + C3 * pow_in);
}

static const float3x3 r709_to_p3d65 = float3x3(
		float3(0.8225f, 0.0332f, 0.0171f),
		float3(0.1775f, 0.9668f, 0.0724f),
		float3(0.f, 0.f, 0.9105f));
		
static const float3x3 r709_to_r2020 = float3x3(
		float3(0.627403895934699f, 0.069097289358232f, 0.016391438875150f),
		float3(0.329283038377884f, 0.919540395075459f, 0.088013307877226f),
		float3(0.043313065687417f, 0.011362315566309f, 0.895595253247624f));	
		
float3 ColorTransform(const int Rgb2LmsMat, const float3 Color)
{
	switch (Rgb2LmsMat)
	{
		case 0:
			return mul(Color, r709_to_p3d65);
		case 1:
			// r709 to r709... nothing needs to be done				
			return Color;
		case 2:
			return mul(Color, r709_to_r2020);
		default:
			return mul(Color, r709_to_p3d65);
	}
}

///////////////////////////////////////////////////////////////////////////////////////////
/* RGB TO YCbCr 4:4:4 Conversion
 *
 * Depending on the bit-depth of the tonemapper's output, the ranges of the color spaces will differ.
 * 8-bpc:
 * RGB:	[0, 255] 
 * Y:	[16, 235]
 * Cb:	[16, 240]
 * Cr:	[16, 240]
 *
 * 10-bpc:
 * RGB: [0, 1023] 
 * Y:	[64, 940]
 * Cb:	[64, 960]
 * Cr:	[64, 960]
 *
 * 12-bpc:
 * RGB: [0, 4095] 
 * Y:	[256, 3760]
 * Cb:	[256, 3840]
 * Cr:	[256, 3840]
 *
 * The conversion formula:
 * Y   =  (Y Range/RGB Range)(0.299R + 0.587G + 0.114B) + 64 
 * Cb  =  (Cb Range/RGB Range)(-0.1687R - 0.3313G + 0.5B) + 512 
 * Cr  =  (Cr Range/RGB Range)(0.5R - 0.4187G - 0.0813B) + 512
 *
 * Note that right now, the output of the tonemapper is always R8G8B8A8. 
 * We may change that if needed, but highering RGB precision will affect the AA pass that comes 
 * after the tonemapper since the alpha precision would have to be reduced.
 *
 * The following implementation is from the Rec709 specs: http://www.itu.int/rec/R-REC-BT.709/en
 * The range of YCbCr components is [0.f, 1.f]
 * The conversion uses full range and doesn't leave footroom or headroom.
 */
 float3 RgbToYCbCr(float3 rgb)
 {
	float3 ycbcr = {
		( ((0.2126 * rgb.r) + (0.7152 * rgb.g) + (0.0722 * rgb.b)) ),	// range: [0.0, 1.0]
		( ((-0.11457210605 * rgb.r) - (0.38542789394 * rgb.g) + (0.5 * rgb.b)) ), // range: [-0.5, 0.5] 
		( ((0.5 * rgb.r) - (0.4541529083 * rgb.g) - (0.04584709169 * rgb.b)) )   // range: [-0.5, 0.5]
	};

	// Add bias to get a proper range between 0 & 1
	float3 bias = {0, 0.5, 0.5};
	return saturate(ycbcr + bias);

	//return float3(y, cb, cr);
 }

 // This function takes in 16bpc YCbCr normalized float values and returns 12bit UNORM YCbCr values
 // See: https://msdn.microsoft.com/en-us/library/windows/desktop/dd607323(v=vs.85).aspx
 uint3 YCbCr16To12(float3 ycbcr16)
 {
	float3 tmp = saturate(ycbcr16);
	tmp = (tmp * 4095) + 0.5f;
	return (uint3)(tmp);
 }


///////////////////////////////////////////////////////////////////////////////////////////


// The Medata packet using types that are available in HLSL
// Each entry = 1 byte
struct MetadataPacket
{
	// 3 bytes header...
	unsigned int header0;		
	unsigned int header1;
	unsigned int header2;

	unsigned int body[121];		// 121 bytes body

	// 4 bytes tail
	unsigned int crc3;			
	unsigned int crc2;
	unsigned int crc1;
	unsigned int crc0;
};
 
 // CRC32 lookup table
 const static uint crc32_lut[256] = {
    0x00000000, 0x04c11db7, 0x09823b6e, 0x0d4326d9, 0x130476dc, 0x17c56b6b,
    0x1a864db2, 0x1e475005, 0x2608edb8, 0x22c9f00f, 0x2f8ad6d6, 0x2b4bcb61,
    0x350c9b64, 0x31cd86d3, 0x3c8ea00a, 0x384fbdbd, 0x4c11db70, 0x48d0c6c7,
    0x4593e01e, 0x4152fda9, 0x5f15adac, 0x5bd4b01b, 0x569796c2, 0x52568b75,
    0x6a1936c8, 0x6ed82b7f, 0x639b0da6, 0x675a1011, 0x791d4014, 0x7ddc5da3,
    0x709f7b7a, 0x745e66cd, 0x9823b6e0, 0x9ce2ab57, 0x91a18d8e, 0x95609039,
    0x8b27c03c, 0x8fe6dd8b, 0x82a5fb52, 0x8664e6e5, 0xbe2b5b58, 0xbaea46ef,
    0xb7a96036, 0xb3687d81, 0xad2f2d84, 0xa9ee3033, 0xa4ad16ea, 0xa06c0b5d,
    0xd4326d90, 0xd0f37027, 0xddb056fe, 0xd9714b49, 0xc7361b4c, 0xc3f706fb,
    0xceb42022, 0xca753d95, 0xf23a8028, 0xf6fb9d9f, 0xfbb8bb46, 0xff79a6f1,
    0xe13ef6f4, 0xe5ffeb43, 0xe8bccd9a, 0xec7dd02d, 0x34867077, 0x30476dc0,
    0x3d044b19, 0x39c556ae, 0x278206ab, 0x23431b1c, 0x2e003dc5, 0x2ac12072,
    0x128e9dcf, 0x164f8078, 0x1b0ca6a1, 0x1fcdbb16, 0x018aeb13, 0x054bf6a4,
    0x0808d07d, 0x0cc9cdca, 0x7897ab07, 0x7c56b6b0, 0x71159069, 0x75d48dde,
    0x6b93dddb, 0x6f52c06c, 0x6211e6b5, 0x66d0fb02, 0x5e9f46bf, 0x5a5e5b08,
    0x571d7dd1, 0x53dc6066, 0x4d9b3063, 0x495a2dd4, 0x44190b0d, 0x40d816ba,
    0xaca5c697, 0xa864db20, 0xa527fdf9, 0xa1e6e04e, 0xbfa1b04b, 0xbb60adfc,
    0xb6238b25, 0xb2e29692, 0x8aad2b2f, 0x8e6c3698, 0x832f1041, 0x87ee0df6,
    0x99a95df3, 0x9d684044, 0x902b669d, 0x94ea7b2a, 0xe0b41de7, 0xe4750050,
    0xe9362689, 0xedf73b3e, 0xf3b06b3b, 0xf771768c, 0xfa325055, 0xfef34de2,
    0xc6bcf05f, 0xc27dede8, 0xcf3ecb31, 0xcbffd686, 0xd5b88683, 0xd1799b34,
    0xdc3abded, 0xd8fba05a, 0x690ce0ee, 0x6dcdfd59, 0x608edb80, 0x644fc637,
    0x7a089632, 0x7ec98b85, 0x738aad5c, 0x774bb0eb, 0x4f040d56, 0x4bc510e1,
    0x46863638, 0x42472b8f, 0x5c007b8a, 0x58c1663d, 0x558240e4, 0x51435d53,
    0x251d3b9e, 0x21dc2629, 0x2c9f00f0, 0x285e1d47, 0x36194d42, 0x32d850f5,
    0x3f9b762c, 0x3b5a6b9b, 0x0315d626, 0x07d4cb91, 0x0a97ed48, 0x0e56f0ff,
    0x1011a0fa, 0x14d0bd4d, 0x19939b94, 0x1d528623, 0xf12f560e, 0xf5ee4bb9,
    0xf8ad6d60, 0xfc6c70d7, 0xe22b20d2, 0xe6ea3d65, 0xeba91bbc, 0xef68060b,
    0xd727bbb6, 0xd3e6a601, 0xdea580d8, 0xda649d6f, 0xc423cd6a, 0xc0e2d0dd,
    0xcda1f604, 0xc960ebb3, 0xbd3e8d7e, 0xb9ff90c9, 0xb4bcb610, 0xb07daba7,
    0xae3afba2, 0xaafbe615, 0xa7b8c0cc, 0xa379dd7b, 0x9b3660c6, 0x9ff77d71,
    0x92b45ba8, 0x9675461f, 0x8832161a, 0x8cf30bad, 0x81b02d74, 0x857130c3,
    0x5d8a9099, 0x594b8d2e, 0x5408abf7, 0x50c9b640, 0x4e8ee645, 0x4a4ffbf2,
    0x470cdd2b, 0x43cdc09c, 0x7b827d21, 0x7f436096, 0x7200464f, 0x76c15bf8,
    0x68860bfd, 0x6c47164a, 0x61043093, 0x65c52d24, 0x119b4be9, 0x155a565e,
    0x18197087, 0x1cd86d30, 0x029f3d35, 0x065e2082, 0x0b1d065b, 0x0fdc1bec,
    0x3793a651, 0x3352bbe6, 0x3e119d3f, 0x3ad08088, 0x2497d08d, 0x2056cd3a,
    0x2d15ebe3, 0x29d4f654, 0xc5a92679, 0xc1683bce, 0xcc2b1d17, 0xc8ea00a0,
    0xd6ad50a5, 0xd26c4d12, 0xdf2f6bcb, 0xdbee767c, 0xe3a1cbc1, 0xe760d676,
    0xea23f0af, 0xeee2ed18, 0xf0a5bd1d, 0xf464a0aa, 0xf9278673, 0xfde69bc4,
    0x89b8fd09, 0x8d79e0be, 0x803ac667, 0x84fbdbd0, 0x9abc8bd5, 0x9e7d9662,
    0x933eb0bb, 0x97ffad0c, 0xafb010b1, 0xab710d06, 0xa6322bdf, 0xa2f33668,
    0xbcb4666d, 0xb8757bda, 0xb5365d03, 0xb1f740b4
};

	/* Creates CRC32 of the currentFrameMdPacket struct
	 * Called from GenerateMetadata()
 	 * The tail is composed of 4 bytes which represent a generated CRC.
	 * From doc:
	 * "The CRC32 value is calculated on the first 992 bits (124 bytes) of one metadata transmission packet, using the following generator polynomial: 
	 *  x32 + x26 + x23 + x22 + x16 + x12 + x11 + x10 + x8 + x7 + x5 + x4 + x2 + x + 1 "
	 * 
	 * See Dolby's CPU implementation in crc32.c
	 */
	uint GenerateCrc32(in MetadataPacket currentFrameMdPacket)
	{
		// Need the first 124 bytes of the packet... we put them in 124 uints
		uint bytes[124];
	
		// Extract the 3 header bytes
		bytes[0] = (currentFrameMdPacket.header0);
		bytes[1] = (currentFrameMdPacket.header1);
		bytes[2] = (currentFrameMdPacket.header2);
	
		// Extract the 121 body bytes
		uint cur_body_index = 0;	
		for (uint i = 3; i < 124; i++)
			bytes[i] = currentFrameMdPacket.body[cur_body_index++];		
	
		uint crc = 0;
		crc = ~crc;
		for (uint j = 0; j < 124; j++)	
			crc = (crc << 8) ^ crc32_lut[((crc >> 24) ^ bytes[j]) & 0xff];
		
		return crc;
	}

	void GenerateMetadata(in out MetadataPacket currentFrameMdPacket, bool enableDynamicMetadata, const int Rgb2LmsMat,
			const float metaSMin, const float metaSMax, const float metaMin, const float metaMax, const float metaMid)
	{
		currentFrameMdPacket.header0 = 0;
		currentFrameMdPacket.header1 = 0;
		currentFrameMdPacket.header2 = 0;



		// We are only packaging a single packet per frame... hence metadata length = 119
		currentFrameMdPacket.body[0] = 119 >> 8; // metadata_length_hi
		currentFrameMdPacket.body[1] = 119 & 0xff; // metadata_length_lo
		

		// Body values
		int affected_dm_metadata_id = 0;				// bytes: [2]
		int scene_refresh_flag = 0;						// bytes: [3]
		int ycc_2_rgb_coef0 = 9574;						// bytes: [4-5]
		int ycc_2_rgb_coef1 = 0;						// bytes: [6-7]
		int ycc_2_rgb_coef2 = 14739;					// bytes: [8-9]
		int ycc_2_rgb_coef3 = 9574;						// bytes: [10-11]
		int ycc_2_rgb_coef4 = 63783;//-1753				// bytes: [12-13]      signed 16bit 2's complement 0b1111100100100111 = -1753  -------> =  63783 32bit signed int
		int ycc_2_rgb_coef5 = 61154;//-4382				// bytes: [14-15]	   signed 16bit 2's complement 0b1110111011100010 = -4382  -------> =  61154 32bit signed int			
		int ycc_2_rgb_coef6 = 9574;						// bytes: [16-17]
		int ycc_2_rgb_coef7 = 17369;					// bytes: [18-19]
		int ycc_2_rgb_coef8 = 0;						// bytes: [20-21]
		uint ycc_2_rgb_offset0 = 16777216;				// bytes: [22-25]
		uint ycc_2_rgb_offset1 = 134217728;				// bytes: [26-29]
		uint ycc_2_rgb_offset2 = 134217728;				// bytes: [30-33]
		int p3d65_rgb_2_lms_coef0 = 5845;				// bytes: [34-35]
		int p3d65_rgb_2_lms_coef1 = 9702;				// bytes: [36-37]
		int p3d65_rgb_2_lms_coef2 = 837;				// bytes: [38-39]
		int p3d65_rgb_2_lms_coef3 = 2568;				// bytes: [40-41]
		int p3d65_rgb_2_lms_coef4 = 12256;				// bytes: [42-43]
		int p3d65_rgb_2_lms_coef5 = 1561;				// bytes: [44-45]
		int p3d65_rgb_2_lms_coef6 = 0;					// bytes: [46-47]
		int p3d65_rgb_2_lms_coef7 = 679;				// bytes: [48-49]
		int p3d65_rgb_2_lms_coef8 = 15705;				// bytes: [50-51]
		int r709_rgb_2_lms_coef0 = 5144;				// bytes: [34-35]
		int r709_rgb_2_lms_coef1 = 10478;				// bytes: [36-37]
		int r709_rgb_2_lms_coef2 = 762;					// bytes: [38-39]
		int r709_rgb_2_lms_coef3 = 2545;				// bytes: [40-41]
		int r709_rgb_2_lms_coef4 = 12418;				// bytes: [42-43]
		int r709_rgb_2_lms_coef5 = 1421;				// bytes: [44-45]
		int r709_rgb_2_lms_coef6 = 291;					// bytes: [46-47]
		int r709_rgb_2_lms_coef7 = 1793;				// bytes: [48-49]
		int r709_rgb_2_lms_coef8 = 14300;				// bytes: [50-51]
		int r2020_rgb_2_lms_coef0 = 7222;				// bytes: [34-35]
		int r2020_rgb_2_lms_coef1 = 8771;				// bytes: [36-37]
		int r2020_rgb_2_lms_coef2 = 390;				// bytes: [38-39]
		int r2020_rgb_2_lms_coef3 = 2654;				// bytes: [40-41]
		int r2020_rgb_2_lms_coef4 = 12430;				// bytes: [42-43]
		int r2020_rgb_2_lms_coef5 = 1300;				// bytes: [44-45]
		int r2020_rgb_2_lms_coef6 = 0;					// bytes: [46-47]
		int r2020_rgb_2_lms_coef7 = 422;				// bytes: [48-49]
		int r2020_rgb_2_lms_coef8 = 15962;				// bytes: [50-51]
		uint signal_eotf = 65535;						// bytes: [52-53]
		uint signal_eotf_param0 = 0;					// bytes: [54-55]
		uint signal_eotf_param1 = 0;					// bytes: [56-57]
		uint signal_eotf_param2 = 0;					// bytes: [58-61]
		uint bit_depth = 12;							// bytes: [62]
		uint signal_color_space = 0;					// bytes: [63]
		uint signal_chroma_format = 1;					// bytes: [64]
		uint signal_full_range = 1;						// bytes: [65]
		uint source_min_pq =							// bytes: [66-67]
			encodePQ(half3(metaSMin, metaSMin, metaSMin)).x * 4095;
		uint source_max_pq =							// bytes: [68-69]
			encodePQ(half3(metaSMax, metaSMax, metaSMax)).x * 4095;
		uint source_diag = 42;								// bytes: [70-71]
		uint num_ext_block = enableDynamicMetadata ? 1 : 0;	// bytes: [72]
		uint ext_block_length = 6;							// bytes: [73-76]
		uint ext_block_level = 1;							// bytes: [77]
		
		half3 MovingAverageLuminancePQ = encodePQ(half3(metaMin, metaMax, metaMid));
		uint min_pq = MovingAverageLuminancePQ.x * 4095;	// bytes: [78-79]
		uint max_pq = MovingAverageLuminancePQ.y * 4095;	// bytes: [80-81]
		uint avg_pq = MovingAverageLuminancePQ.z * 4095;	// bytes: [82-83]
		// Rest of body gets 0-filled
		
		// The following loop is useful to test against Sheng's app. to ensure tunneling is correct.
		// The output values of the test app should be easy to verify since they are just incrementing.
		//for (uint i = 2; i < 121; i++) // dummy values in body
		//{
		//	currentFrameMdPacket.body[i] = i;
		//}

		currentFrameMdPacket.body[2] = affected_dm_metadata_id;
		currentFrameMdPacket.body[3] = scene_refresh_flag;
		currentFrameMdPacket.body[4] = (ycc_2_rgb_coef0 & 0xff00) >> 8;
		currentFrameMdPacket.body[5] = (ycc_2_rgb_coef0 & 0xff);
		currentFrameMdPacket.body[6] = (ycc_2_rgb_coef1 & 0xff00) >> 8;
		currentFrameMdPacket.body[7] = (ycc_2_rgb_coef1 & 0xff);
		currentFrameMdPacket.body[8] = (ycc_2_rgb_coef2 & 0xff00) >> 8;
		currentFrameMdPacket.body[9] = (ycc_2_rgb_coef2 & 0xff);
		currentFrameMdPacket.body[10] = (ycc_2_rgb_coef3 & 0xff00) >> 8;
		currentFrameMdPacket.body[11] = (ycc_2_rgb_coef3 & 0xff);
		currentFrameMdPacket.body[12] = (ycc_2_rgb_coef4 & 0xff00) >> 8;
		currentFrameMdPacket.body[13] = (ycc_2_rgb_coef4 & 0xff);
		currentFrameMdPacket.body[14] = (ycc_2_rgb_coef5 & 0xff00) >> 8;
		currentFrameMdPacket.body[15] = (ycc_2_rgb_coef5 & 0xff);
		currentFrameMdPacket.body[16] = (ycc_2_rgb_coef6 & 0xff00) >> 8;
		currentFrameMdPacket.body[17] = (ycc_2_rgb_coef6 & 0xff);
		currentFrameMdPacket.body[18] = (ycc_2_rgb_coef7 & 0xff00) >> 8;
		currentFrameMdPacket.body[19] = (ycc_2_rgb_coef7 & 0xff);
		currentFrameMdPacket.body[20] = (ycc_2_rgb_coef8 & 0xff00) >> 8;
		currentFrameMdPacket.body[21] = (ycc_2_rgb_coef8 & 0xff);
		currentFrameMdPacket.body[22] = (ycc_2_rgb_offset0 & 0xff000000) >> 24;
		currentFrameMdPacket.body[23] = (ycc_2_rgb_offset0 & 0xff0000) >> 16;
		currentFrameMdPacket.body[24] = (ycc_2_rgb_offset0 & 0xff00) >> 8;
		currentFrameMdPacket.body[25] = (ycc_2_rgb_offset0 & 0xff);
		currentFrameMdPacket.body[26] = (ycc_2_rgb_offset1 & 0xff000000) >> 24;
		currentFrameMdPacket.body[27] = (ycc_2_rgb_offset1 & 0xff0000) >> 16;
		currentFrameMdPacket.body[28] = (ycc_2_rgb_offset1 & 0xff00) >> 8;
		currentFrameMdPacket.body[29] = (ycc_2_rgb_offset1 & 0xff);
		currentFrameMdPacket.body[30] = (ycc_2_rgb_offset2 & 0xff000000) >> 24;
		currentFrameMdPacket.body[31] = (ycc_2_rgb_offset2 & 0xff0000) >> 16;
		currentFrameMdPacket.body[32] = (ycc_2_rgb_offset2 & 0xff00) >> 8;
		currentFrameMdPacket.body[33] = (ycc_2_rgb_offset2 & 0xff);
		switch (Rgb2LmsMat)
		{
		case 0:
		{
			currentFrameMdPacket.body[34] = (p3d65_rgb_2_lms_coef0 & 0xff00) >> 8;
			currentFrameMdPacket.body[35] = (p3d65_rgb_2_lms_coef0 & 0xff);
			currentFrameMdPacket.body[36] = (p3d65_rgb_2_lms_coef1 & 0xff00) >> 8;
			currentFrameMdPacket.body[37] = (p3d65_rgb_2_lms_coef1 & 0xff);
			currentFrameMdPacket.body[38] = (p3d65_rgb_2_lms_coef2 & 0xff00) >> 8;
			currentFrameMdPacket.body[39] = (p3d65_rgb_2_lms_coef2 & 0xff);
			currentFrameMdPacket.body[40] = (p3d65_rgb_2_lms_coef3 & 0xff00) >> 8;
			currentFrameMdPacket.body[41] = (p3d65_rgb_2_lms_coef3 & 0xff);
			currentFrameMdPacket.body[42] = (p3d65_rgb_2_lms_coef4 & 0xff00) >> 8;
			currentFrameMdPacket.body[43] = (p3d65_rgb_2_lms_coef4 & 0xff);
			currentFrameMdPacket.body[44] = (p3d65_rgb_2_lms_coef5 & 0xff00) >> 8;
			currentFrameMdPacket.body[45] = (p3d65_rgb_2_lms_coef5 & 0xff);
			currentFrameMdPacket.body[46] = (p3d65_rgb_2_lms_coef6 & 0xff00) >> 8;
			currentFrameMdPacket.body[47] = (p3d65_rgb_2_lms_coef6 & 0xff);
			currentFrameMdPacket.body[48] = (p3d65_rgb_2_lms_coef7 & 0xff00) >> 8;
			currentFrameMdPacket.body[49] = (p3d65_rgb_2_lms_coef7 & 0xff);
			currentFrameMdPacket.body[50] = (p3d65_rgb_2_lms_coef8 & 0xff00) >> 8;
			currentFrameMdPacket.body[51] = (p3d65_rgb_2_lms_coef8 & 0xff);
			break;
		}
		case 1:
		{
			currentFrameMdPacket.body[34] = (r709_rgb_2_lms_coef0 & 0xff00) >> 8;
			currentFrameMdPacket.body[35] = (r709_rgb_2_lms_coef0 & 0xff);
			currentFrameMdPacket.body[36] = (r709_rgb_2_lms_coef1 & 0xff00) >> 8;
			currentFrameMdPacket.body[37] = (r709_rgb_2_lms_coef1 & 0xff);
			currentFrameMdPacket.body[38] = (r709_rgb_2_lms_coef2 & 0xff00) >> 8;
			currentFrameMdPacket.body[39] = (r709_rgb_2_lms_coef2 & 0xff);
			currentFrameMdPacket.body[40] = (r709_rgb_2_lms_coef3 & 0xff00) >> 8;
			currentFrameMdPacket.body[41] = (r709_rgb_2_lms_coef3 & 0xff);
			currentFrameMdPacket.body[42] = (r709_rgb_2_lms_coef4 & 0xff00) >> 8;
			currentFrameMdPacket.body[43] = (r709_rgb_2_lms_coef4 & 0xff);
			currentFrameMdPacket.body[44] = (r709_rgb_2_lms_coef5 & 0xff00) >> 8;
			currentFrameMdPacket.body[45] = (r709_rgb_2_lms_coef5 & 0xff);
			currentFrameMdPacket.body[46] = (r709_rgb_2_lms_coef6 & 0xff00) >> 8;
			currentFrameMdPacket.body[47] = (r709_rgb_2_lms_coef6 & 0xff);
			currentFrameMdPacket.body[48] = (r709_rgb_2_lms_coef7 & 0xff00) >> 8;
			currentFrameMdPacket.body[49] = (r709_rgb_2_lms_coef7 & 0xff);
			currentFrameMdPacket.body[50] = (r709_rgb_2_lms_coef8 & 0xff00) >> 8;
			currentFrameMdPacket.body[51] = (r709_rgb_2_lms_coef8 & 0xff);
			break;
		}
		case 2:
		{
			currentFrameMdPacket.body[34] = (r2020_rgb_2_lms_coef0 & 0xff00) >> 8;
			currentFrameMdPacket.body[35] = (r2020_rgb_2_lms_coef0 & 0xff);
			currentFrameMdPacket.body[36] = (r2020_rgb_2_lms_coef1 & 0xff00) >> 8;
			currentFrameMdPacket.body[37] = (r2020_rgb_2_lms_coef1 & 0xff);
			currentFrameMdPacket.body[38] = (r2020_rgb_2_lms_coef2 & 0xff00) >> 8;
			currentFrameMdPacket.body[39] = (r2020_rgb_2_lms_coef2 & 0xff);
			currentFrameMdPacket.body[40] = (r2020_rgb_2_lms_coef3 & 0xff00) >> 8;
			currentFrameMdPacket.body[41] = (r2020_rgb_2_lms_coef3 & 0xff);
			currentFrameMdPacket.body[42] = (r2020_rgb_2_lms_coef4 & 0xff00) >> 8;
			currentFrameMdPacket.body[43] = (r2020_rgb_2_lms_coef4 & 0xff);
			currentFrameMdPacket.body[44] = (r2020_rgb_2_lms_coef5 & 0xff00) >> 8;
			currentFrameMdPacket.body[45] = (r2020_rgb_2_lms_coef5 & 0xff);
			currentFrameMdPacket.body[46] = (r2020_rgb_2_lms_coef6 & 0xff00) >> 8;
			currentFrameMdPacket.body[47] = (r2020_rgb_2_lms_coef6 & 0xff);
			currentFrameMdPacket.body[48] = (r2020_rgb_2_lms_coef7 & 0xff00) >> 8;
			currentFrameMdPacket.body[49] = (r2020_rgb_2_lms_coef7 & 0xff);
			currentFrameMdPacket.body[50] = (r2020_rgb_2_lms_coef8 & 0xff00) >> 8;
			currentFrameMdPacket.body[51] = (r2020_rgb_2_lms_coef8 & 0xff);
			break;
		}
		default:
		{
			currentFrameMdPacket.body[34] = (p3d65_rgb_2_lms_coef0 & 0xff00) >> 8;
			currentFrameMdPacket.body[35] = (p3d65_rgb_2_lms_coef0 & 0xff);
			currentFrameMdPacket.body[36] = (p3d65_rgb_2_lms_coef1 & 0xff00) >> 8;
			currentFrameMdPacket.body[37] = (p3d65_rgb_2_lms_coef1 & 0xff);
			currentFrameMdPacket.body[38] = (p3d65_rgb_2_lms_coef2 & 0xff00) >> 8;
			currentFrameMdPacket.body[39] = (p3d65_rgb_2_lms_coef2 & 0xff);
			currentFrameMdPacket.body[40] = (p3d65_rgb_2_lms_coef3 & 0xff00) >> 8;
			currentFrameMdPacket.body[41] = (p3d65_rgb_2_lms_coef3 & 0xff);
			currentFrameMdPacket.body[42] = (p3d65_rgb_2_lms_coef4 & 0xff00) >> 8;
			currentFrameMdPacket.body[43] = (p3d65_rgb_2_lms_coef4 & 0xff);
			currentFrameMdPacket.body[44] = (p3d65_rgb_2_lms_coef5 & 0xff00) >> 8;
			currentFrameMdPacket.body[45] = (p3d65_rgb_2_lms_coef5 & 0xff);
			currentFrameMdPacket.body[46] = (p3d65_rgb_2_lms_coef6 & 0xff00) >> 8;
			currentFrameMdPacket.body[47] = (p3d65_rgb_2_lms_coef6 & 0xff);
			currentFrameMdPacket.body[48] = (p3d65_rgb_2_lms_coef7 & 0xff00) >> 8;
			currentFrameMdPacket.body[49] = (p3d65_rgb_2_lms_coef7 & 0xff);
			currentFrameMdPacket.body[50] = (p3d65_rgb_2_lms_coef8 & 0xff00) >> 8;
			currentFrameMdPacket.body[51] = (p3d65_rgb_2_lms_coef8 & 0xff);
			break;
		}
		}
		currentFrameMdPacket.body[52] = (signal_eotf & 0xff00) >> 8;
		currentFrameMdPacket.body[53] = (signal_eotf & 0xff);
		currentFrameMdPacket.body[54] = (signal_eotf_param0 & 0xff00) >> 8;
		currentFrameMdPacket.body[55] = (signal_eotf_param0 & 0xff);
		currentFrameMdPacket.body[56] = (signal_eotf_param1 & 0xff00) >> 8;
		currentFrameMdPacket.body[57] = (signal_eotf_param1 & 0xff);
		currentFrameMdPacket.body[58] = (signal_eotf_param2 & 0xff000000) >> 24;
		currentFrameMdPacket.body[59] = (signal_eotf_param2 & 0xff0000) >> 16;
		currentFrameMdPacket.body[60] = (signal_eotf_param2 & 0xff00) >> 8;
		currentFrameMdPacket.body[61] = (signal_eotf_param2 & 0xff);
		currentFrameMdPacket.body[62] = bit_depth;
		currentFrameMdPacket.body[63] = signal_color_space;
		currentFrameMdPacket.body[64] = signal_chroma_format;
		currentFrameMdPacket.body[65] = signal_full_range;
		currentFrameMdPacket.body[66] = (source_min_pq & 0xff00) >> 8;
		currentFrameMdPacket.body[67] = (source_min_pq & 0xff);
		currentFrameMdPacket.body[68] = (source_max_pq & 0xff00) >> 8;
		currentFrameMdPacket.body[69] = (source_max_pq & 0xff);
		currentFrameMdPacket.body[70] = (source_diag & 0xff00) >> 8;
		currentFrameMdPacket.body[71] = (source_diag & 0xff);
		currentFrameMdPacket.body[72] = num_ext_block;
		currentFrameMdPacket.body[73] = (ext_block_length & 0xff000000) >> 24;
		currentFrameMdPacket.body[74] = (ext_block_length & 0xff0000) >> 16;
		currentFrameMdPacket.body[75] = (ext_block_length & 0xff00) >> 8;
		currentFrameMdPacket.body[76] = (ext_block_length & 0xff);
		currentFrameMdPacket.body[77] = ext_block_level;
		currentFrameMdPacket.body[78] = (min_pq & 0xff00) >> 8;
		currentFrameMdPacket.body[79] = (min_pq & 0xff);
		currentFrameMdPacket.body[80] = (max_pq & 0xff00) >> 8;
		currentFrameMdPacket.body[81] = (max_pq & 0xff);
		currentFrameMdPacket.body[82] = (avg_pq & 0xff00) >> 8;
		currentFrameMdPacket.body[83] = (avg_pq & 0xff);
		for (uint i = 85; i < 121; i++) // 0-fill rest of body
			currentFrameMdPacket.body[i] = 0;

		uint crc32 = GenerateCrc32(currentFrameMdPacket);
		currentFrameMdPacket.crc0 = crc32 & 0xff;
		currentFrameMdPacket.crc1 = (crc32 & 0xff00) >> 8;
		currentFrameMdPacket.crc2 = (crc32 & 0xff0000) >> 16;
		currentFrameMdPacket.crc3 = (crc32 & 0xff000000) >> 24;	
	}

///////////////////////////////////////////////////////////////////////////////////////////
// Following are utility functions used for metadata scrambling and tunneling

uint
GetMetadataByte(in out MetadataPacket currentFrameMdPacket, int byte)
{
	uint ret = 0;

	if (byte == 0)
		ret = currentFrameMdPacket.header0;
	else if (byte == 1)
		ret = currentFrameMdPacket.header1;
	else if (byte == 2)
		ret = currentFrameMdPacket.header2;
	else if (byte < 124)
		ret = currentFrameMdPacket.body[byte - 3];
	else if (byte == 124)
		ret = currentFrameMdPacket.crc3;
	else if (byte == 125)
		ret = currentFrameMdPacket.crc2;
	else if (byte == 126)
		ret = currentFrameMdPacket.crc1;
	else if (byte == 127)
		ret = currentFrameMdPacket.crc0;

	return ret;
}

uint
GetMetadataBit(in out MetadataPacket currentFrameMdPacket, int byte, int bit)
{
	uint ret = GetMetadataByte(currentFrameMdPacket, byte);

	// Shift so that the requested bit is in the LSB
	ret >>= bit;

	// Mask all but last bit
	ret &= 0x00000001;

	return ret;
}

// Returns a scrambled 12-bit chroma component
uint
Scramble(in out MetadataPacket currentFrameMdPacket, uint YLum, uint CChrom, uint pixelIndex)
{
	uint Y = YLum;
	uint C = CChrom;

	// depending on the current pixel 'i', we need to figure out which metadata bit to fetch
	// 0th		pixel	-> first bit
	// 1023rd	pixel	-> last  bit
	int md_byte_to_fetch = (pixelIndex % 1024) / 8;
	int md_bit_to_fetch = 7 - (pixelIndex % 8);

	uint md_bit = GetMetadataBit(currentFrameMdPacket, md_byte_to_fetch, md_bit_to_fetch);

	// Xor Y and C into bytes
	uint xored_bit = 0;

	// TODO: merge those 2 loops
	for (uint y = 0u; y <= 12; y++)
	{
		xored_bit ^= (Y & 1);
		Y >>= 1;
	}

	C >>= 1;
	for (uint c = 1u; c <= 12; c++)
	{
		xored_bit ^= (C & 1);
		C >>= 1;
	}

	// Set the LSB of the chroma
	return ((md_bit ^ xored_bit) * 1) | (CChrom & ~(1));
}

// Lumberyard Specific Implementations
// -----------------------------------
float4 HDRGenerateFinalColor(in vert2frag IN, float3 target_minmaxmid)
{
	float4 vSample = tex2D(baseMap, IN.baseTCScaled.xy);
	half4 cBloom = tex2D(bloomMap0, IN.baseTC.xy);
	
	// hdr color grading
	half fExposure = 1.0;

	half3 cColor = fExposure * lerp(vSample.xyz, cBloom.xyz, saturate(HDRBloomColor.rgb));
	half fLuminance = GetLuminance(cColor.rgb);
	cColor.rgb = fLuminance + HDRColorBalance.a * ( cColor.rgb - fLuminance );	// saturation
	cColor.rgb *= HDRColorBalance.rgb;	// color balance
	
	// sunshafts
	vSample.xyz = cColor.rgb + clamp(tex2D(sunshaftsMap, IN.baseTCScaled.xy) * SunShafts_SunCol, float3(0.0, 0.0, 0.0), float3(1.0,1.0,1.0));
	
	// dolby s-curve
	if(DOLBY_SCURVE_ENABLED != 0.0)
	{
		float3 ScC = DolbySCurveCalculateC123(DOLBY_SCURVE_SLOPE, DOLBY_SCURVE_SOURCE_MIN, DOLBY_SCURVE_SOURCE_MID, DOLBY_SCURVE_SOURCE_MAX, target_minmaxmid.x, target_minmaxmid.z, target_minmaxmid.y);
		vSample.xyz = ApplyDolbySCurve(vSample.xyz, DOLBY_SCURVE_SCALE, DOLBY_SCURVE_SLOPE, ScC.x, ScC.y, ScC.z);
	}
	
#if DOLBY_RANGE_DEBUG
	float vmin = min(min(vSample.x, vSample.y), vSample.z);
	float vmax = max(max(vSample.x, vSample.y), vSample.z);
	if(vmin < DOLBY_RANGE_MIN)
	{
		vSample.xyz = float3(target_minmaxmid.y, 0.0, 0.0);
	}	
	if(vmax > DOLBY_RANGE_MAX)
	{
		vSample.xyz = float3(0.0, target_minmaxmid.y, 0.0);
	}
#endif

#if DOLBY_COLOR_SPACE_CONVERSION_FROM_REC709
	vSample.xyz = ColorTransform(DOLBY_COLOR_SPACE, vSample.xyz);
#endif

	return vSample;
}

pixout HDRFinalScenePSDolby(vert2frag IN)
{
	pixout OUT = (pixout)0;
	float4 vSample = HDRGenerateFinalColor(IN, float3(DOLBY_SCURVE_TARGET_MIN, DOLBY_SCURVE_TARGET_MAX, DOLBY_SCURVE_TARGET_MID));
	half3 vSamplePQ = DolbyPQEncoding(vSample.xyz);
	
	OUT.Color = float4(vSamplePQ, 1.0);
	return OUT;
}

StructuredBuffer<float> HDRMinMaxMid : register(t15);

pixout HDRFinalScenePSDolbyVision(vert2frag IN, const bool encodeMetaData)
{
	// -- DOLBY HDR (YUV422 PQ+Metadata (Vizio))
	pixout OUT = (pixout)0;
	float3 vSamplePQ = tex2D_bicubic(baseMap, IN.baseTCScaled.xy, ScreenSize).rgb;

	// Tunneling	
	int OutputDimensionWidth = ScreenSize.x;
	int OutputDimensionHeight = ScreenSize.y;

	MetadataPacket CurrentFrameMdPacket = (MetadataPacket)0;

	// YCbCr conversion
	vSamplePQ = RgbToYCbCr(vSamplePQ);
	
	// Need 12 bits representation of YCbCr before we can encode
	uint3 YCbCr12 = YCbCr16To12(vSamplePQ); //TonemappedColor
							
	int2 PixelPos = (int2)(IN.baseTCScaled.xy * float2(OutputDimensionWidth, OutputDimensionHeight));
	int2 ViewportRes = int2(OutputDimensionWidth, OutputDimensionHeight);
	int RasterScanPixelPos = (ViewportRes.x * PixelPos.y + PixelPos.x);		

	// Depending on the pixel, all will have a Y component and either a 
	// Cb or Cr component, resulting in 4:2:2 chroma subsampling.
	// For every even pixel the Cr component gets dropped and for every odd 
	// the Cb component gets dropped.
	//
	uint Y_Comp = YCbCr12.r;
	uint C_Comp = ( (uint)PixelPos.x % 2 == 0) ? YCbCr12.g : YCbCr12.b; // even pixels have Cb, odds have Cr

	if(encodeMetaData)
	{
		// First 3072 pixels actually encode metadata (following Dolby's 3x repeater specs)
		// NOTE: The reason we're not using the same shader throughout is for performance reasons.
		float ma,mb,mc,md,me;
		if (RasterScanPixelPos < 3072)
		{
			ma = DOLBY_SCURVE_TARGET_MIN; 
			mb = DOLBY_SCURVE_TARGET_MAX;
			mc = HDRMinMaxMid[0]; 
			md = HDRMinMaxMid[1]; 
			me = HDRMinMaxMid[2]; 
		
			// dolby s-curve
			if(DOLBY_SCURVE_ENABLED != 0.0)
			{
				float3 ScC = DolbySCurveCalculateC123(DOLBY_SCURVE_SLOPE, DOLBY_SCURVE_SOURCE_MIN, DOLBY_SCURVE_SOURCE_MID, DOLBY_SCURVE_SOURCE_MAX, DOLBY_SCURVE_TARGET_MIN, DOLBY_SCURVE_TARGET_MID, DOLBY_SCURVE_TARGET_MAX);
				float3 Curve = float3(mc,md,me);
				Curve = ApplyDolbySCurve(Curve, DOLBY_SCURVE_SCALE, DOLBY_SCURVE_SLOPE, ScC.x, ScC.y, ScC.z);
				mc = Curve.x;
				md = Curve.y;
				me = Curve.z;
			}
		
			GenerateMetadata(CurrentFrameMdPacket, (int)DOLBY_DYNAMIC_METADATA_ENABLED, DOLBY_COLOR_SPACE, ma, mb, mc, md, me);
			C_Comp = Scramble(CurrentFrameMdPacket, Y_Comp, C_Comp, RasterScanPixelPos);
		}
	}

	// Tunnel the Y component and C component into 8-bits RGB
	// R: C[11-4]
	// G: Y[11-4]
	// B: C[3-0] | Y[3-0]
	uint C_11_4 = (C_Comp >> 4);
	uint Y_11_4 = (Y_Comp >> 4);
	uint C_3_0 = (C_Comp & 0x0000000f);
	uint Y_3_0 = (Y_Comp & 0x0000000f);
	vSamplePQ.r = C_11_4 / 255.f;
	vSamplePQ.g = Y_11_4 / 255.f;
	vSamplePQ.b = ((C_3_0 << 4) | Y_3_0) / 255.f;	
	
	OUT.Color = float4(vSamplePQ, 1.0);
	return OUT;
}

pixout HDRFinalScenePSDolbyVisionWithMetadata(vert2frag IN)
{
	return HDRFinalScenePSDolbyVision(IN, true);
}

pixout HDRFinalScenePSDolbyVisionWithoutMetadata(vert2frag IN)
{
	return HDRFinalScenePSDolbyVision(IN, false);
}
////////////////////////////////////////////////////////////////////////////
//
//  Crytek Engine Source File.
//  Shader extension
//  Copyright (C), Crytek Studios, 2001-2004.
// -------------------------------------------------------------------------
//  File name:   fragLib.cfi
//  Version:     v1.00
//  Created:     10/09/2006 by Tiago Sousa
//  Compilers:
//  Description: Common fragment program - unified shading across CryEngine2
//
//  Note for refactoring phases:
//  - all features inside frag_shared_output should be extracted and placed
// in their own function
//
// -------------------------------------------------------------------------
////////////////////////////////////////////////////////////////////////////

//////////////////////////////// Shared fragment shader /////////////////////////

/*

struct fragPass       (in shadeLib.cfi)
struct fragLightPass  (in shadeLib.cfi)


frag_unify_parameters( inout fragPass pPass )
  - Where user unifies parameters (from tweakables, etc) and sets flags (like bRenormalizeNormal)

frag_custom_begin(in vert2FragGeneral IN, inout fragCustomPass pPass)
  - Customized initialization like fetching required textures, do pre-multiplications/computations, etc.
  - This is specific for a rendering pass
  - In fragPass structure, user can add custom data (like for ex reflection vector, reflection color,
  or some constant term like fFresnel)

frag_custom_ambient(in fragCustomPass pPass, inout half3 cAmbient )
  - Customized ambient pass, for adding reflections or diferent ambient terms, etc
  - cAmbient at input is ambient color (or spherical harmonics ambient term)
  - User can apply diffuse texture or some custom computation (for example, cloth uses a fuzzy term for ambient instead)

frag_custom_per_light(in fragCustomPass pPass, inout fragLightPass pLight)
  - Custom shading computations
  - This is executed once per-light source
  - User can add custom per-light data into fragLightPass structure

void frag_final_composition( inout fragPass pPass, inout half3 cFinal )
  - shared final shading composition

frag_custom_end(in vert2FragGeneral IN, in fragCustomPass pPass, inout half3 cOut)
  - Customized pass finalization (like applying vertex colors, alphaglow, etc)

. Check HumanSkin.cfx shader for simple usage example

*/

////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////

DEFAULT_CUBE_MAP

void frag_unify(inout fragPass pPass, in vert2FragGeneral IN)
{
    // Set quality level (LOW or HIGH)
    pPass.nQuality = GetShaderQuality();

    pPass.IN.baseTC = IN.baseTC;
#if %BLENDLAYER
    pPass.IN.blendMapTC = IN.blendMapTCblendLayerTC.xy * BlendMaskTiling;
    pPass.IN.blendLayerTC = IN.blendMapTCblendLayerTC.zw * BlendLayer2Tiling;
#endif
#if %EMITTANCE_MAP
    pPass.IN.emittanceTC = IN.emittanceTCemissiveIntensityTC.xy;
    pPass.IN.emissiveIntensityTC = IN.emittanceTCemissiveIntensityTC.zw;
#endif
#if %DETAIL_MAPPING
    pPass.IN.detailTC = IN.detailTC.xy;
#endif
    pPass.IN.bumpTC = pPass.IN.baseTC;

    #if %_RT_FOG ||%_RT_DECAL_TEXGEN_2D || %DECAL
        pPass.IN.Ambient = IN.Ambient;
    #else
        pPass.IN.Ambient = 1.0;
    #endif

    pPass.IN.vTangent = half4(1, 0, 0, 1);
    pPass.IN.vBinormal = half4(0, 1, 0, 1);
    pPass.IN.vNormal.xyz = half4(0, 0, 1, 1);

    #if %_RT_FOG || %ANISO_SPECULAR || %TEMP_EYES || %OFFSET_BUMP_MAPPING || %PARALLAX_OCCLUSION_MAPPING || %SILHOUETTE_PARALLAX_OCCLUSION_MAPPING
        pPass.IN.vTangent = IN.vTangent;
        pPass.IN.vBinormal = IN.vBinormal;
        pPass.IN.vNormal.xyz = (cross(IN.vTangent.xyz, IN.vBinormal.xyz)) * IN.vTangent.w;            // 4 alu
    #endif

    #if ENABLE_TESSELLATION && !%_RT_NO_TESSELLATION
        // here we reconstruct screenProj from HPosition instead of reading DS output attributes
        float4 vTmp = IN.WPos;
        vTmp.xy *= PS_ScreenSize.zw * 2;
        float4 vTmp1 = vTmp;
        vTmp.xyz *= IN.WPos.w;
        pPass.IN.screenProj = vTmp;
    #else
        pPass.IN.screenProj = IN.screenProj;
    #endif
    pPass.IN.vView = IN.vView;

    #if %VERTCOLORS || %BLENDLAYER
        pPass.IN.Color = IN.Color;
    #endif

    #if %_RT_DECAL_TEXGEN_2D
        pPass.IN.DistAtten = IN.DistAtten;
    #elif %_RT_FOG
        pPass.IN.AvgFogVolumeContrib = IN.AvgFogVolumeContrib;
    #endif

    frag_unify_parameters(pPass);

}

////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////

void frag_final_composition(inout fragPass pPass, inout half3 cFinal)
{
    half3 cDiffuse = (pPass.cAmbientAcc.xyz + pPass.cDiffuseAcc.xyz) * pPass.cDiffuseMap.xyz;

    // Simple energy conservation between specular and diffuse
    cDiffuse *= saturate(1 - GetLuminance(pPass.cSpecularMap.rgb));

    if (pPass.nReflectionMapping)
    {
        // Apply shading to custom environment map:
        //  - PerMaterial_DiffuseColor.w contains either 0 or 1 depending if pick nearest cubemap functionality used or not
        //  - Would be good to get rid of this extra instructions, if no custom cubemaps used at some point in time

        half3 cEnvShading = lerp(1, (pPass.cAmbientAcc.xyz + pPass.cDiffuseAcc.xyz), PerMaterial_DiffuseColor.w);

        pPass.cSpecularAcc.xyz += pPass.cEnvironment.xyz * cEnvShading;
    }

    half3 cSpecular = pPass.cSpecularAcc.xyz;

#if %_RT_APPLY_TOON_SHADING
    cDiffuse = calculateToonColor(cDiffuse);
    cSpecular = calculateToonColor(cSpecular);
#endif

    cFinal.xyz += cDiffuse;
    cFinal.xyz += cSpecular;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////

void frag_quality_setup(inout fragPass pPass)
{
    // Set quality level (LOW, MEDIUM, HIGH or MAX)
    pPass.nQuality = GetShaderQuality();

    // Check quality settings and disable stuff

    if (pPass.nQuality == QUALITY_LOW)
    {
        pPass.nReflectionMapping = false;
        pPass.bDetailBumpMapping = false;
    }
}

////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////
// Setup final fog. Per-vertex for alpha blended objects and per-object volumetric fog

void frag_fog_setup(inout fragPass pPass, inout half4 cOut)
{
    #if !%_RT_HDR_MODE
        // Skip fog in secondary viewports
        return;
    #endif

    #if %_RT_FOG && !%_RT_DECAL_TEXGEN_2D && %_RT_VOLUMETRIC_FOG
        VolumetricFogTexcoord vtc = GetVolumetricFogTexcoordParamByScreenProj(pPass.IN.screenProj);
        float4 vf = GetVolumetricFogValue(vtc);
        half4 globalFogColor = GetVolumetricFogAnalyticalColor(pPass.IN.vView.xyz).xyzw;
        ApplyVolumetricFog(vf, globalFogColor, vtc, cOut.xyz);
    #endif

    // Skip hair that is rendered in opaque render list because it will get deferred fog already
    #if %HAIR_PASS && !%THIN_HAIR && !%_RT_ALPHATEST
        // This needs refactoring after Ryse.
        // Even opaque hair can write transparent pixels which will get fog from background then.
        // This path is also taken by alpha blended hair that has alpha test set to exactly 0.
        return;
    #endif

    // Apply global non-volumetric fog with the same logic as in Global Fog Pass (FogPassPS)
    #if %_RT_FOG && !%_RT_DECAL_TEXGEN_2D && !%_RT_VOLUMETRIC_FOG
        float3 cameraToWorldPos = pPass.IN.vView.xyz;
        float3 worldPos = PerView_WorldViewPos.xyz + cameraToWorldPos;
        float4 fogColor = GetVolumetricFogColor(worldPos, cameraToWorldPos);
        cOut.xyz = lerp(fogColor.xyz, cOut.xyz, fogColor.w);
    #endif
}

////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////

void frag_get_deferred_buffers(inout fragPass pPass)
{
    pPass.cShadowOcclMap = 0;

    #if !%HAIR_PASS && !%TEMP_EYES // Hair has _RT_FOG set but parser will not strip out the sampler declaration for RT flags, resulting in exceeded sampler count
        // Alpha blend processed as regular forward rendering
        #if !%_RT_FOG
            float2 tcProj = pPass.IN.screenProj.xy / pPass.IN.screenProj.w;

            pPass.fSceneDepthRT = DecodeSceneDepth(sceneDepthSampler, pPass.IN.screenProj.xyww);

            pPass.cNormalMapRT = half4(DecodeGBufferNormal(tex2Dproj(sceneNormalsSampler, pPass.IN.screenProj.xyzw)), 0);

            #if %_RT_AMBIENT
                pPass.cDiffuseAccRT = DecodeLightBuffer(tex2Dproj(sceneDiffuseAccSampler, pPass.IN.screenProj.xyzw), true);

                if (pPass.bDeferredSpecularShading)
                {
                    pPass.cSpecularAccRT = DecodeLightBuffer(tex2Dproj(sceneSpecularAccSampler, pPass.IN.screenProj.xyzw), true);
                }

                pPass.cDiffuseAcc = pPass.cDiffuseAccRT;
                pPass.cSpecularAcc = pPass.cSpecularAccRT;

            #endif
        #endif
    #endif
}

////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////

void frag_hdr_setup(inout fragPass pPass, inout half4 cOut)
{
    #if %_RT_FOG && !%_RT_HDR_MODE
        cOut.rgb = pow(cOut.rgb, 1.0/2.2);
    #endif
}

////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////

void frag_ambient(inout fragPass pPass, half3 vNormal)
{
    #if %_RT_FOG
        #if %_RT_HDR_MODE
            half3 amb = pPass.IN.Ambient.xyz;

            // custom ambient pass
            frag_custom_ambient(pPass, amb);
        #else
            // Use default probe in secondary viewports until we have tiled shading support there
            pPass.cAmbientAcc += GetEnvironmentCMap(defaultProbeSamplerCUBE, pPass.vNormal.xyz, 0) * pPass.IN.Ambient.xyz;
            pPass.cSpecularAcc += GetEnvironmentCMap(defaultProbeSamplerCUBE, pPass.vReflVec.xyz, pPass.fGloss) * pPass.IN.Ambient.xyz * pPass.cSpecularMap.rgb;
            pPass.nReflectionMapping = 0;
        #endif
    #endif
}

////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////

float2 adjustParallaxOffset(float2 parallaxOffset, float4x4 textureMatrix)
{
    float2 scaledRotatedOffset;

    // Scale and rotate the parallax offset so it matches the texture matrix
    scaledRotatedOffset.x = parallaxOffset.x * textureMatrix[0][0] + parallaxOffset.y * textureMatrix[1][0];
    scaledRotatedOffset.y = parallaxOffset.x * textureMatrix[0][1] + parallaxOffset.y * textureMatrix[1][1];

    return scaledRotatedOffset;
}

#if %APPLY_FORWARD_DYNAMIC_LIGHTING
    #include "TiledShading.cfi"
#endif

half4 frag_shared_output(inout fragPass pPass)
{
    half4 cOut = 0;

    frag_quality_setup(pPass);
    frag_get_deferred_buffers(pPass);

    #if %TEMP_TERRAIN
        const float2 microDetailBaseTC = pPass.IN.bumpTC.xy;
        const float dispAmount = pPass.fBumpHeightScale * pPass.IN.Color.g;
    #else
        const float2 microDetailBaseTC = pPass.IN.baseTC.xy;
        const float dispAmount = pPass.fBumpHeightScale;
    #endif

    #if %BLENDLAYER
        if (pPass.nMicroDetailQuality != MICRO_DETAIL_QUALITY_SPM)
        {
            pPass.blendFac = GetLayerBlendingValue(BlendMapSampler, pPass.IN.blendMapTC.xy, 0, pPass.IN.Color.a, BlendFactor, BlendFalloff);
        }
    #endif

    pPass.vView = -normalize(pPass.IN.vView.xyz);                                                         // 3 alu
    pPass.mTangentToWS = float3x3(pPass.IN.vTangent.xyz, pPass.IN.vBinormal.xyz, pPass.IN.vNormal.xyz);

    if (pPass.nMicroDetailQuality == MICRO_DETAIL_QUALITY_OBM)
    {
        const half3 viewDir = mul(pPass.mTangentToWS, pPass.vView);
        #if %BLENDLAYER
            const float4 newCoords = OffsetMap(microDetailBaseTC, pPass.IN.blendLayerTC, viewDir, 2, dispAmount, pPass.fHeightBias, pPass.blendFac);
            pPass.IN.blendLayerTC = newCoords.zw;
        #else
            const float4 newCoords = OffsetMap(microDetailBaseTC, viewDir, 2, dispAmount, pPass.fHeightBias, pPass.blendFac);
        #endif
        pPass.IN.baseTC.xy = newCoords.xy;
        pPass.IN.bumpTC.xy = newCoords.xy;
    }

    if (pPass.nMicroDetailQuality == MICRO_DETAIL_QUALITY_SPM || pPass.nMicroDetailQuality == MICRO_DETAIL_QUALITY_POM)
    {
        float2 ddxMicroDetailBaseTC, ddyMicroDetailBaseTC;
        float lod = ComputeTextureLOD(microDetailBaseTC, PerMaterial_TexelDensity.xy, ddxMicroDetailBaseTC, ddyMicroDetailBaseTC);

        #if %TEMP_TERRAIN || %DECAL || %_RT_FOG || %EMITTANCE_MAP
            if (pPass.nMicroDetailQuality == MICRO_DETAIL_QUALITY_POM)
            {
                const float3 viewDir = mul(pPass.mTangentToWS, -pPass.vView);
                #if %BLENDLAYER
                    const float4 parallaxCorrectedTC = ParallaxOcclusionMap(microDetailBaseTC, pPass.IN.blendLayerTC, lod, viewDir, 15, dispAmount, pPass.fHeightBias, pPass.blendFac);
                    pPass.IN.blendLayerTC.xy = parallaxCorrectedTC.zw;
                #else
                    const float4 parallaxCorrectedTC = ParallaxOcclusionMap(microDetailBaseTC, lod, viewDir, 15, dispAmount, pPass.fHeightBias, pPass.blendFac);
                #endif

                #if %EMITTANCE_MAP
                    float2 parallaxOffset = parallaxCorrectedTC.xy - pPass.IN.baseTC.xy;
                    pPass.IN.emittanceTC.xy += adjustParallaxOffset( parallaxOffset, _TCMMatrixEmittance );
                    pPass.IN.emissiveIntensityTC.xy += adjustParallaxOffset( parallaxOffset, _TCMMatrixEmissiveMultiplier );
               #endif

                pPass.IN.baseTC.xy = parallaxCorrectedTC.xy;
                pPass.IN.bumpTC.xy = parallaxCorrectedTC.xy;
            }
        #else
            if (pPass.nMicroDetailQuality == MICRO_DETAIL_QUALITY_POM)
            {
                const float3 viewDirWS = pPass.IN.vView.xyz;
                const float3 parallax = mul(pPass.mTangentToWS, pPass.vView).xyz;

                const float sceneDepth = pPass.fSceneDepthRT;
                const float scale = sceneDepth - dot(viewDirWS, -PerView_ViewBasisZ);
                const float2 offset = normalize(parallax.xy / -parallax.z) * scale * 0.25;

                pPass.IN.baseTC.xy = microDetailBaseTC + offset.xy;
                pPass.IN.bumpTC.xy = microDetailBaseTC + offset.xy;
                #if %BLENDLAYER
                    pPass.IN.blendLayerTC.xy = pPass.IN.baseTC.xy;
                #endif
            }
            else //pPass.nMicroDetailQuality == MICRO_DETAIL_QUALITY_SPM
            {
                const float2 sceneUVs = 0; // FIXME!!!
                pPass.IN.baseTC.xy = sceneUVs;
                pPass.IN.bumpTC.xy = sceneUVs;
            }
        #endif

        #if %BLENDLAYER // blending factor is sampled using the blend map (.xy) texture coordinates set
            if (pPass.nMicroDetailQuality == MICRO_DETAIL_QUALITY_SPM)
            {
                pPass.blendFac = GetLayerBlendingValue(BlendMapSampler, pPass.IN.blendLayerTC, 0, pPass.IN.Color.a, BlendFactor, BlendFalloff);
            }
        #endif

        if (pPass.nMicroDetailQuality == MICRO_DETAIL_QUALITY_POM)
        {
            // high quality lookup which works with anisotropic filtering
            pPass.cDiffuseMap = GetTexture2DGrad(diffuseMapSampler, pPass.IN.baseTC.xy, ddxMicroDetailBaseTC, ddyMicroDetailBaseTC);
            if (!pPass.bDontUseBump)
            {
                pPass.cBumpMap.xyz = GetNormalMapGrad(normalMapSampler, pPass.IN.bumpTC.xy, ddxMicroDetailBaseTC, ddyMicroDetailBaseTC);
            }
            else
            {
                pPass.cBumpMap = half3(0, 0, 1);
            }

            #if %BLENDLAYER
                float2 ddxBlendLayerTC = ddx(pPass.IN.blendLayerTC.xy);
                float2 ddyBlendLayerTC = ddy(pPass.IN.blendLayerTC.xy);
                half3 cBumpMap2 = GetNormalMapGrad(BumpMap2Sampler, pPass.IN.blendLayerTC.xy, ddxBlendLayerTC, ddyBlendLayerTC);
                pPass.cBumpMap.xyz = lerp(pPass.cBumpMap.xyz, cBumpMap2, pPass.blendFac);
            #endif
        }
        else
        {
            pPass.cDiffuseMap = GetTexture2DLod(diffuseMapSampler, float4(pPass.IN.baseTC.xy, 0, 0)); // TODO: find way to compute lod without gradients as they cause pixel artifacts at fin / shell transition
        }
    }
    else
    {
        pPass.cDiffuseMap = GetTexture2D(diffuseMapSampler, pPass.IN.baseTC.xy);
        if (!pPass.bDontUseBump)
        {
            pPass.cBumpMap = GetNormalMap(normalMapSampler, pPass.IN.bumpTC.xy);                                // 2 alu
        }
        else
        {
            pPass.cBumpMap = half3(0, 0, 1);
        }

        #if %BLENDLAYER
            half3 cBumpMap2 = GetNormalMap(BumpMap2Sampler, pPass.IN.blendLayerTC.xy);
            pPass.cBumpMap.xyz = lerp(pPass.cBumpMap.xyz, cBumpMap2, pPass.blendFac);
        #endif
    }

    pPass.vNormalDiffuse = pPass.cBumpMap;
#if %DETAIL_MAPPING
    half4 cDetailMap;
    if (pPass.nMicroDetailQuality != MICRO_DETAIL_QUALITY_SPM)
    {
        cDetailMap = GetDetailMap(detailMapSampler, pPass.IN.detailTC.xy);             // 1 tex - compiler optimizes away when not used
    }
    else
    {
        cDetailMap = GetDetailMapLod(detailMapSampler, float4(pPass.IN.detailTC.xy, 0, 0)); // TODO: find way to compute lod without gradients as they cause pixel artifacts at fin / shell transition
    }

    if (pPass.bDetailBumpMapping)
    {
        cDetailMap = cDetailMap * half4(pPass.fDetailBumpScale.xx, pPass.vDetailBlendAmount.xy);

        if (pPass.bDetailBumpMappingMasking)
        {
            cDetailMap *= pPass.cDiffuseMap.w;
        }

        // Detail bump
        pPass.cBumpMap.xy += cDetailMap.xy;
    }
#endif
    // Set default alpha
    pPass.fAlpha = pPass.cDiffuseMap.w * pPass.IN.Ambient.w;

    // Debug output
    #if %_RT_DEBUG0 || %_RT_DEBUG1 || %_RT_DEBUG2 || %_RT_DEBUG3
        DebugOutput(cOut, pPass.IN.baseTC);
        return cOut;
    #endif

    #if !%_RT_FOG
        pPass.vNormal.xyz = pPass.cNormalMapRT.xyz;
    #else
        //  // Get main vectors/coeficients
        pPass.vNormal = mul(pPass.cBumpMap.xyz, pPass.mTangentToWS);                                  // 3 alu

        // Workaround for NaN issues in water reflection passes
        // TODO: Fix RC to avoid invalid tangent space basis that can generate zero-length normals
        pPass.vNormal.x += 1e-6;

        if (pPass.bRenormalizeNormal)
        {
            pPass.vNormal = normalize(pPass.vNormal);                                                 // 3 alu
        }
    #endif

    // Store some constant coeficients
    pPass.fNdotE = (dot(pPass.vView.xyz, pPass.vNormal.xyz));                                       // 1 alu
    pPass.fGloss = PerMaterial_SpecularColor.w;
    pPass.vReflVec = (2.0h * pPass.fNdotE * pPass.vNormal.xyz) - pPass.vView.xyz;                    // 2 alu

    // do custom pass setup
    frag_custom_begin(pPass);

#if %DETAIL_MAPPING
    if (pPass.bDetailBumpMapping)
    {
        pPass.cDiffuseMap.xyz += pPass.cDiffuseMap.xyz * cDetailMap.z;
        pPass.fGloss += pPass.fGloss * cDetailMap.w;
    }
#endif

    // load the environment map
    #if %ENVIRONMENT_MAP
        if (pPass.nReflectionMapping > 0)
        {
            if (pPass.nReflectionMapping == REFLECT_CUBE)
            {
                pPass.cEnvironment = GetEnvironmentCMap(envMapSamplerCUBE, pPass.vReflVec.xyz, pPass.fGloss);
            }
            else
            if (pPass.nReflectionMapping == REFLECT_SPHERE)
            {
                // should be transformed to view space - but adds quite a lot instructions
                pPass.cEnvironment = GetEnvironment2DMap(envMapSampler, pPass.vReflVec.xy);
            }
        }
    #endif

    half3 vAmbientNormal = pPass.vNormal.xyz;

    #if %_RT_DEBUG0
        pPass.cDiffuseMap.xyz = 1;
        pPass.cSpecularMap.xyz = 1;
        pPass.bVertexColors = false;

    #endif

    if (pPass.bVertexColors)
    {
        pPass.cDiffuseMap.rgb *= pPass.IN.Color.rgb;
    }

    // Direct lighting from sun
    if (!pPass.bSkipDirectLighting)
    {
        // Initialize light pass structure with per-light shared data
        ##if AZ_RESTRICTED_PLATFORM
            ##include_restricted(fragLib_cfi, AZ_RESTRICTED_PLATFORM)
        ##endif
        ##if AZ_RESTRICTED_SECTION_IMPLEMENTED
            ##undef AZ_RESTRICTED_SECTION_IMPLEMENTED
        ##else
            fragLightPass pLight = (fragLightPass) 0;
        ##endif

        pLight.nType = LT_DIRECTIONAL;

        pLight.cDiffuse = PerFrame_SunColor.xyz;
        pLight.cSpecular = PerFrame_SunColor.xyz * PerFrame_SunColor.w;

        pLight.vLight = PerFrame_SunDirection.xyz;
        pLight.vLightWS = PerFrame_SunDirection.xyz * 10000.0f;

        pLight.fNdotL = dot(pLight.vLight.xyz, pPass.vNormal.xyz);
        pLight.fOcclShadow = 1 - pPass.cShadowOcclMap.w;

        pLight.fFallOff = 1;
        pLight.cFilter = 1;

        // per shader custom shading - in Forward Lighting it is specifically done for the sun
        frag_custom_per_light(pPass, pLight);
        cOut.xyz += pLight.cOut.xyz; 		// Doesn't seem to be used - seems like a cheap ambient light add on.
    }

#if %APPLY_FORWARD_DYNAMIC_LIGHTING
    // Run forward tiled lighting loop over all active lights.
    // This loop isn't cheap hence the added PerMaterial flag 'APPLY_FORWARD_DYNAMIC_LIGHTING' 
    // that indicates that the user intended this usage.
    TiledForwardShading(pPass, false, true);
#else
    // Forward Tiled Lighting is not applied therefore apply a simple 'universal' ambient term.
    // This term isn't attenuated by the sun so it's constant even when the sun is down.
    // A cheap attenuation should be applied to it (possibly dot with sun direction + size)
    frag_ambient(pPass, vAmbientNormal);
#endif //%APPLY_FORWARD_DYNAMIC_LIGHTING

    if (pPass.bCustomComposition == false)
    {
        frag_final_composition(pPass, cOut.xyz);
    }

    frag_custom_end(pPass, cOut.xyz);

    // distance blend out
    cOut.w = pPass.fAlpha;

    #if %_RT_ALPHATEST
        if (pPass.fAlpha < GetMaterial_AlphaTest())
        {
            discard;
        }
    #endif

    // Setup final fog
    frag_fog_setup(pPass, cOut);

    // Setup hdr
    frag_hdr_setup(pPass, cOut);

    return cOut;
}

//============================================================================================


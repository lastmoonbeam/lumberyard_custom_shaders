/*
* All or portions of this file Copyright (c) Amazon.com, Inc. or its affiliates or
* its licensors.
*
* For complete copyright and license terms please see the LICENSE at the root of this
* distribution (the "License"). All use of this software is governed by the License,
* or, if provided, by the license below or the license accompanying this file. Do not
* remove or modify any license notices. This file is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*
*/
// Original file Copyright Crytek GMBH or its affiliates, used under license.

//------------------------------------------------------------------------------
// This shader presents an image which will be drawn after all post-processing has
// been applied, hence it is used as the reference without any post-processing effecting it.
// Usage: An art director that uses the image as the final look reference for a level.
//------------------------------------------------------------------------------

#include "Common.cfi"
#include "ShadeLib.cfi"
#include "vertexLib.cfi"

float Script : STANDARDSGLOBAL
<
    string Script =
        "Public;"
        "ShaderType = General;"
        "ShaderDrawType = General;"
        "AfterHDRPostProcess;"
        "ForceDrawLast;"
>;

vert2FragGeneral DebugLightVS( app2vertGeneral IN )
{
    vert2FragGeneral OUT = (vert2FragGeneral) 0;

    streamPos vertPassPos = (streamPos)0;
    vs_shared_output(IN, OUT, vertPassPos, false);

    return OUT;
}

float4 DebugLightPS( in vert2FragGeneral IN ) : COLOR
{ 
    float4 cColor = GetDiffuseMap( diffuseMapSampler, IN.baseTC );

    // Note: put on current final gamma 2.2 curve (we only do linear correct rendering during hdr rendering passes) - when tone mapper changes, update this
    cColor.rgb = pow(cColor.rgb, 1.0 / 2.2 );

    cColor.w *= GetInstance_Opacity();
    return cColor;
}

technique General
{
    pass p0
    {
        VertexShader = DebugLightVS();
        PixelShader = DebugLightPS();
    }
}

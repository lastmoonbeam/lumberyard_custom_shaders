////////////////////////////////////////////////////////////////////////////
//
//  Crytek Engine Source File.
//  Shader extension
//  Copyright (C), Crytek Studios, 2001-2012.
// -------------------------------------------------------------------------
//  File name:   ParticlesShadowPass.cfi
//  Version:     v1.00
//  Refactored:  01/05/12 by Tiago Sousa
//  Compilers:  
//  Description: Particle shadows receiving
//
////////////////////////////////////////////////////////////////////////////

float4 vAdaption	: PB_TempData[13];

//--------------------------------------------------------------------------------------------------
//Shadow pass
float4 vInvShadowMapSize : PB_TempData[9];

float4x4 TexGen0          : PB_TempMatr0[0];
float4x4 TexGen1          : PB_TempMatr1[0];
float4x4 TexGen2          : PB_TempMatr2[0];
float4x4 TexGen3          : PB_TempMatr3[0];

// defines how hard depth test is (default is 100 - hard test)
float4 fDepthTestBias			: PB_TempData[1];
float4 fOneDivFarDist  		: PB_TempData[2];
float4 fDepthShift				: PB_TempData[3];

//single shadow maps
SamplerComparisonState SAMPLER_STATE_depthMapSampler : SS_Shadow2
{
    Filter = COMPARISON_MIN_MAG_LINEAR_MIP_POINT;
    AddressU = Clamp;
    AddressV = Clamp;
};

Texture2D<float4> depthMapSampler0 : TS_Shadow0;
Texture2D<float4> depthMapSampler1 : TS_Shadow2;
Texture2D<float4> depthMapSampler2 : TS_Shadow4;
Texture2D<float4> depthMapSampler3 : TS_Shadow6;

sampler2D sRotSampler = sampler_state
{
  Texture = EngineAssets/Textures/rotrandom.dds;
  MinFilter = POINT;
  MagFilter = POINT;
  MipFilter = POINT; 
  AddressU = Wrap;
  AddressV = Wrap;	
};

struct vert2fragShadowCommon
{
  float4 shadTC0     : TEXCOORDN;
#if %_RT_SAMPLE1
  float4 shadTC1     : TEXCOORDN;
#endif
#if %_RT_SAMPLE2
  float4 shadTC2     : TEXCOORDN;
#endif
#if %_RT_SAMPLE3
  float4 shadTC3     : TEXCOORDN;
#endif
};

void ShadowTexSpace(float4 vPos, float4x4 shadowM, float fInvFarDist, out float4 p)
{
	p = mul(shadowM, vPos);

	//apply linear space for all shadow formats for now
#if !%_RT_POINT_LIGHT 
	p.z = p.z * fInvFarDist;
#endif
}

//	compute shadow tex coords and depth
void GenShadowTC(float4 vPos, out vert2fragShadowCommon shadowTC)
{
    ShadowTexSpace(vPos, TexGen0, fOneDivFarDist.x, shadowTC.shadTC0);

    #if %_RT_SAMPLE1
        ShadowTexSpace(vPos, TexGen1, fOneDivFarDist.y, shadowTC.shadTC1);
    #endif

    #if %_RT_SAMPLE2
        ShadowTexSpace(vPos, TexGen2, fOneDivFarDist.z, shadowTC.shadTC2);
    #endif

    #if %_RT_SAMPLE3
        ShadowTexSpace(vPos, TexGen3, fOneDivFarDist.w, shadowTC.shadTC3);
    #endif
}

void shadow_sample(Texture2D depthMap, float3 p, out float shadow)
{
#if %_RT_SAMPLE0
	float4 g4 = depthMap.GatherCmpRed( SAMPLER_STATE_depthMapSampler, p.xy, p.z );
	//shadow = depthMap.SampleCmpLevelZero( SAMPLER_STATE_depthMapSampler, p.xy, p.z );
	shadow = dot(g4, 0.25f);
#endif
}

void SampleRotated(Texture2D depthMap, float3 p, float4 rotMatr, float2 kernel, int fLOD, out float result)
{
#if %_RT_SAMPLE0

    // If we exceeded the far plane depth, force to the far plane (minus an epsilon for PCF).
    if (p.z >= 1.0)
    {
        p.z = (1.0 - 0.0001);
    }

    // Rotate tap for this pixel location
    float2 rotatedOff;

    rotatedOff.x = dot(rotMatr.xy, kernel);
    rotatedOff.y = dot(rotMatr.zw, kernel);

    float2 fetchPos = p.xy + rotatedOff.xy;

    // todo: more/less taps depending on shadow quality setup
    shadow_sample(depthMap, float3(fetchPos.xy+ vInvShadowMapSize.xx*0.5, p.z), result ); 
#endif
}

void onetap_shadow_sample(Texture2D depthMap, inout float4 ShadePos, float fDepthTestBias, float fDepthShift, out float shadowTest, out float P_Z, half3 vNoiseTC = 0.h, int fLOD = 1)
{
#if %_RT_SAMPLE0
  //TFIX
  P_Z = 0;

  ShadePos.xy = ShadePos.xy / ShadePos.w;
  ShadePos.z = ShadePos.z;// - fDepthTestBias;

	const half2 rotScale = 16;
	const half fJitterKernelSize = 0.02h / (float)fLOD;
	const half2 rotSample = 0;//tex2Dlod(sRotSampler, float4(vNoiseTC.xy * rotScale.xy,0,0)).xy;
	const float4 rot = half4(rotSample.x, -rotSample.y, rotSample.y, rotSample.x) * vAdaption.y;

	const half3 fOffset = vNoiseTC*0.125;
	half fFinalShadow = 0;
	SampleRotated(depthMap, ShadePos.xyz - fOffset.xyz*0.5, rot, fJitterKernelSize, fLOD, shadowTest);
	fFinalShadow += shadowTest;
	SampleRotated(depthMap, ShadePos.xyz - fOffset.xyz*0.25, rot, fJitterKernelSize, fLOD, shadowTest);
	fFinalShadow += shadowTest;
	SampleRotated(depthMap, ShadePos.xyz + fOffset.xyz*0.25, rot, fJitterKernelSize, fLOD, shadowTest);
	fFinalShadow += shadowTest;
	SampleRotated(depthMap, ShadePos.xyz + fOffset.xyz*0.5, rot, fJitterKernelSize, fLOD, shadowTest);
	fFinalShadow += shadowTest;
	shadowTest = fFinalShadow*0.25f;
#endif
}

float4 ShadowDepthTest(in vert2fragShadowCommon shadowTC, float3 RandDirTC)
{
	float4 vCompare = (float4)1;	//return value
	float4 P0=(float4)0;
	float4 P1=(float4)0;
	float4 P2=(float4)0;
	float4 P3=(float4)0;

#if %_RT_SAMPLE0
	half4 vShadow = (float4)0;
	float4 vZ = (float4)0;

	#if %_RT_SAMPLE1
    P1 = shadowTC.shadTC1;
    onetap_shadow_sample(depthMapSampler1, P1, fDepthTestBias.y, fDepthShift.y, vShadow.y, vZ.y, RandDirTC, 2);
	#endif
	
	#if %_RT_SAMPLE2
    P2 = shadowTC.shadTC2;
    onetap_shadow_sample(depthMapSampler2, P2, fDepthTestBias.z, fDepthShift.z, vShadow.z, vZ.z, RandDirTC, 4);
	#endif
	
	#if %_RT_SAMPLE3
    P3 = shadowTC.shadTC3;
    onetap_shadow_sample(depthMapSampler3, P3, fDepthTestBias.w, fDepthShift.w, vShadow.w, vZ.w, RandDirTC, 8);
	#endif

    P0 = shadowTC.shadTC0;

    onetap_shadow_sample(depthMapSampler0, P0, fDepthTestBias.x, fDepthShift.x, vShadow.x, vZ.x, RandDirTC, 1);

// select necessary lod
#if %_RT_SAMPLE1
	float fBalance = 1;

	float4 b;
	float4 tmp;
	tmp.xy = P0.xy;
	tmp.zw = 1-tmp.xy;
	b = (tmp < 0.0) || P0.zzzz >= 1.f;
	fBalance = saturate(dot(b, float4(1,1,1,1)));

	vShadow.x*=(1-fBalance);
	vShadow.yzw*=fBalance;

	#if %_RT_SAMPLE2
		tmp.xy = P1.xy;
		tmp.zw = 1-tmp.xy;
		b = (tmp < 0.0) || P1.zzzz >= 1.f;
		fBalance = saturate(dot(b, float4(1,1,1,1)));

		vShadow.y*=(1-fBalance);
		vShadow.zw*=fBalance;

		#if %_RT_SAMPLE3
			tmp.xy = P2.xy;
			tmp.zw = 1-tmp.xy;
			b = (tmp < 0.0) || P2.zzzz >= 1.f;
			fBalance = saturate(dot(b, float4(1,1,1,1)));

			vShadow.z*=(1-fBalance);
			vShadow.w*=fBalance;
		#endif
	#endif

#endif

	vCompare = saturate(dot(vShadow, float4(1, 1, 1, 1)));
//SAMPLE_0
#endif

	return vCompare;
  
}

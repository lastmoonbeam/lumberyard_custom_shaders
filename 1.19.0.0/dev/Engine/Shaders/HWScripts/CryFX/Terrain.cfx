/*
* All or portions of this file Copyright (c) Amazon.com, Inc. or its affiliates or
* its licensors.
*
* For complete copyright and license terms please see the LICENSE at the root of this
* distribution (the "License"). All use of this software is governed by the License,
* or, if provided, by the license below or the license accompanying this file. Do not
* remove or modify any license notices. This file is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*
*/
// Original file Copyright Crytek GMBH or its affiliates, used under license.

#define VS_NO_SKINNING_DATA

#include "Common.cfi"
#include "TerrainValidations.cfi"

// Shader global descriptions
float Script: STANDARDSGLOBAL
<
string Script =
    "SupportsDeferredShading;"
    "SupportsFullDeferredShading;"
    "ForceDrawLast;"                  // might vary per project - for C2, C3 environment types, terrain most times occluded
    "ShaderDrawType = Terrain;"
    "ShaderType = Terrain;"
    >;

////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////// Custom shading pass structure /////////////////////////////////////

struct fragPassCustom
{
    half3 vTangent;      // perturbed tangent vector
    half3 vBinormal;     // perturbed binormal vector
    half3 cEnvironment;  // environment map
    half fDiffuseAlpha;  // layer alpha
};

struct fragLightPassCustom
{
};

#include "ShadeLib.cfi"

float4 BaseTCMatrix : PB_TerrainBaseMatrix;
float4x4 LayerTexGen : PB_TerrainLayerGen;

half DetailTextureStrength
<
register = PER_MATERIAL_0.w;
string UIWidget = "slider";
float UIMin = 0.0;
float UIMax = 2.0;
float UIStep = 0.05;
> = 1;

#if %OFFSET_BUMP_MAPPING
    half ObmDisplacement
    <
    register = PER_MATERIAL_1.x;
    string UIWidget = "slider";
    string UIName = "OBM Displacement";
    float UIMin = 0.0;
    float UIMax = 0.025;
    float UIStep = 0.001;
    > = 0.004;
#endif

#if %PARALLAX_OCCLUSION_MAPPING
    half PomDisplacement
    <
    register = PER_MATERIAL_2.x;
    string UIWidget = "slider";
    string UIName = "POM Displacement";
    float UIMin = 0.0;
    float UIMax = 0.05;
    float UIStep = 0.001;
    > = 0.025;
#endif

#if %OFFSET_BUMP_MAPPING || %PARALLAX_OCCLUSION_MAPPING
    half HeightBias
    <
    register = PER_MATERIAL_2.w;
    string UIWidget = "slider";
    string UIName = "Height bias";
    float UIMin = 0.0;
    float UIMax = 1.0;
    float UIStep = 0.05;
    > = 1.0;

    half SelfShadowStrength
    <
    register = PER_MATERIAL_2.y;
    string UIWidget = "slider";
    string UIName = "Self shadow strength";
    float UIMin = 0.0;
    float UIMax = 5.0;
    float UIStep = 0.1;
    > = 3.0;
#endif

#if %DETAIL_MAPPING
    half DetailBumpScale
    <
    register = PER_MATERIAL_3.x;
    string UIHelp = "Set detail bump scale"; 
    string UIName = "Detail bump scale";
    string UIWidget = "slider";
    float UIMin = 0.0;
    float UIMax = 10.0;
    float UIStep = 0.1;
    > = 0.5;

    half DetailDiffuseScale
    <
    register = PER_MATERIAL_3.y;
    string UIHelp = "Set diffuse detail blend scale";
    string UIName = "Detail diffuse scale";
    string UIWidget = "slider";
    float UIMin = 0.0;
    float UIMax = 1.0;
    float UIStep = 0.1;
    > = 0.5;

    half DetailGlossScale
    <
    register = PER_MATERIAL_3.z;
    string UIHelp = "Set gloss detail blend scale";
    string UIName = "Detail gloss scale";
    string UIWidget = "slider";
    float UIMin = 0.0;
    float UIMax = 1.0;
    float UIStep = 0.1;
    > = 0.5;
#endif

half BlendFactor
<
register = PER_MATERIAL_5.x;
string UIHelp = "Change visbility of blended layer";
string UIName = "Blend Factor";
string UIWidget = "slider";
float UIMin = 0.0;
float UIMax = 16.0;
float UIStep = 0.2;
> = 0.0;

half BlendFalloff
<
register = PER_MATERIAL_5.y;
string UIHelp = "Change falloff of blending";
string UIName = "Blend Falloff";
string UIWidget = "slider";
float UIMin = 0.1;
float UIMax = 128.0;
float UIStep = 1.0;
> = 1.0;

///////////////////////////////
// Samplers
sampler2D baseMapSampler = sampler_state
{
    Texture = $FromRE0;
    MinFilter = LINEAR;
    MagFilter = LINEAR;
    MipFilter = NONE;
    AddressU = Clamp;
    AddressV = Clamp;
    sRGBLookup = true;
};

sampler2D lmMapSampler = sampler_state
{
    Texture = $FromRE1;
    MinFilter = LINEAR;
    MagFilter = LINEAR;
    MipFilter = NONE;
    AddressU = Clamp;
    AddressV = Clamp;
};

sampler2D baseMap_FromContainerSampler = sampler_state
{
    Texture = $FromRE0_FromContainer;
    MinFilter = LINEAR;
    MagFilter = LINEAR;
    MipFilter = NONE;
    AddressU = Clamp;
    AddressV = Clamp;
    sRGBLookup = true;
};

sampler2D lmMap_FromContainerSampler = sampler_state
{
    Texture = $FromRE1_FromContainer;
    MinFilter = LINEAR;
    MagFilter = LINEAR;
    MipFilter = NONE;
    AddressU = Clamp;
    AddressV = Clamp;
};

//==========================================================================

struct vert2fragTerrain
{
    OUT_P
    float4 baseTC: TEXCOORDN;    // z is used as fLinearDistanceToCameraInMeters during impostor gen
    float4 screenProj: TEXCOORDN_centroid;

    half4 vNormal: TEXCOORDN;   // w contain baked shadows fading

    OUT_C0

    #if %_RT_FOG && %_RT_VOLUMETRIC_FOG
        float4 fogColor: TEXCOORDN;
    #endif
};

struct vert2fragLayer
{
    OUT_P
    float4 basesectorTC: TEXCOORDN;     // xy=surface texture, zw=occlusionmap texture (so save interpolators)
    float4 baseTC: TEXCOORDN;               // terrain normal/diffuse/spec texture

    float3 tangVec: TEXCOORDN;
    float3 binormVec: TEXCOORDN;


    float3 normalVec: TEXCOORDN;
    float4 Pos: TEXCOORDN;

    float4 screenProj: TEXCOORDN_centroid;

    OUT_C0
};

#include "vertexLib.cfi"

///////////////// terrain vertex shader //////////////////
vert2fragTerrain TerrainVS(app2vertGeneral IN_common)
{
    vert2fragTerrain OUT = (vert2fragTerrain)1;

    app2vertGeneral IN = IN_common;
    IN.vertCommon.Position.z = IN_common.vertCommon.baseTC.x;

    streamPos vertPassPos = (streamPos)0;
    streamPos_FromGeneral(IN, vertPassPos);

    // Apply modificators if needed
    OUT.HPosition = Pos_VS_Terrain(0.001f, PerView_ViewProjZeroMatr, vertPassPos);
    vertPassPos.WorldPos.xyz += PerView_WorldViewPos.xyz;

    // tex coordinates on the sector textures
    OUT.baseTC.x = dot(float4(0, BaseTCMatrix[0], 0, BaseTCMatrix[1]), vertPassPos.WorldPos);
    OUT.baseTC.y = dot(float4(BaseTCMatrix[0], 0, 0, BaseTCMatrix[2]), vertPassPos.WorldPos);
    OUT.baseTC.z = BaseTCMatrix[0];
    OUT.baseTC.w = vertPassPos.WorldPos.z;

    OUT.Color = vertPassPos.Color;

    // Output the screen-space texture coordinates
    OUT.screenProj = HPosToScreenTC(OUT.HPosition);

    OUT.vNormal.xyz = vertPassPos.Normal.xyz;

    #if %_RT_FOG
        #if !%_RT_VOLUMETRIC_FOG
            float4 fogColor = GetVolumetricFogColor(vertPassPos.WorldPos.xyz);
            OUT.vNormal.w = fogColor.w;
        #else
            OUT.fogColor = GetVolumetricFogAnalyticalColorByWorldPos(vertPassPos.WorldPos.xyz);
        #endif
    #endif

    return OUT;
}

//===================================================================================

float UnpackTerrainLayerWeight(float4 color, float4 normal)
{
    uint SurfaceId = uint(LayerTexGen[2].w);
    uint3 Ids = uint3(color.bgr * 255.0);

    //
    // Surface ids are sorted from lowest to highest in the blend stack. This means
    // a layer with a lesser surface id will be drawn first using alpha blended splatting.
    //
    // A problem with doing separate splats combined with POM is that the blend weights
    // becomes wildly unnormalized. This will manifest in pixels within the cross-blend region
    // that have no weight from any layer. This is a simple fix that forces the lowest layer in
    // the chain to have full weight. It eliminates almost all cracks and makes for a more seemless blend.
    //
    uint SurfaceIdMin = min(Ids.x, min(Ids.y, Ids.z));
    if (SurfaceIdMin == SurfaceId)
    {
        return 1.0;
    }

    float3 Weights = float3(color.a, normal.a, 1.0f - color.a - normal.a);

    float weight = 0.0;
    if (Ids.x == SurfaceId)
    {
        weight = Weights.x;
    }
    else if (Ids.y == SurfaceId)
    {
        weight = Weights.y;
    }
    else if (Ids.z == SurfaceId)
    {
        weight = Weights.z;
    }

    return weight;
}

///////////////// terrain vertex shader //////////////////
vert2fragLayer TerrainLayerVS(app2vertGeneral IN_common)
{
    vert2fragLayer OUT = (vert2fragLayer)0;

    app2vertGeneral IN = IN_common;
    IN.vertCommon.Position.z = IN_common.vertCommon.baseTC.x;

    streamPos vertPassPos = (streamPos)0;
    streamPos_FromGeneral(IN, vertPassPos);

    // Apply modificators if needed
    OUT.HPosition = Pos_VS_Terrain(0.001f, PerView_ViewProjZeroMatr, vertPassPos);

    vertPassPos.WorldPos.xyz += PerView_WorldViewPos.xyz;

    // tex coordinates on the sector textures
    OUT.basesectorTC.x = dot(float4(0, BaseTCMatrix[0], 0, BaseTCMatrix[1]), vertPassPos.WorldPos);
    OUT.basesectorTC.y = dot(float4(BaseTCMatrix[0], 0, 0, BaseTCMatrix[2]), vertPassPos.WorldPos);
    OUT.basesectorTC.z = BaseTCMatrix[0];

    float4 tcLayer;

    float3 vDiffPos = vertPassPos.WorldPos.xyz;
    vDiffPos.xy -= LayerTexGen[3].xy;
    tcLayer.xy = mul((float2x3)LayerTexGen, vDiffPos);
    tcLayer.z = 0;
    tcLayer.w = vertPassPos.Position.w;
    _ModifyUV_1(tcLayer, OUT.baseTC, vertPassPos.Position );

    // get tangent space info from texgen parameters
    float3 Tangent = normalize(LayerTexGen[0].xyz);
    float3 Binormal = normalize(LayerTexGen[1].xyz);

    // project tangent and binormal to plane perpendicular to the normal
    Tangent -= dot(Tangent, vertPassPos.Normal)*vertPassPos.Normal;
    Binormal -= dot(Binormal, vertPassPos.Normal)*vertPassPos.Normal;
    Tangent = normalize(Tangent);
    Binormal = normalize(Binormal);

    OUT.tangVec.xyz = Tangent;
    OUT.binormVec.xyz = Binormal;

    OUT.Pos.xyz = vertPassPos.WorldPos.xyz - PerView_WorldViewPos.xyz;
    OUT.normalVec.xyz = vertPassPos.Normal.xyz;

    float fWeight = UnpackTerrainLayerWeight(vertPassPos.Color, vertPassPos.Normal);

    if (GetShaderQuality() > QUALITY_LOW)
    {
        float3 NormalAbs = abs(vertPassPos.Normal.xyz);
        if (NormalAbs.x>=NormalAbs.y && NormalAbs.x>=NormalAbs.z)
        {
            fWeight *= LayerTexGen[2].x;
        }
        else
        if (NormalAbs.y>=NormalAbs.x && NormalAbs.y>=NormalAbs.z)
        {
            fWeight *= LayerTexGen[2].y;
        }
        else
        {
            fWeight *= LayerTexGen[2].z;
        }
    }
    else
    {
        if (dot(abs(vertPassPos.Normal.xyz), LayerTexGen[2].xyz) < 0.55f)
        {
            fWeight = 0;
        }
    }

    // Output the screen-space texture coordinates
    OUT.screenProj = HPosToScreenTC(OUT.HPosition);

    float fDist = length(OUT.Pos.xyz);

    OUT.basesectorTC.w = fDist;

    fDist = pow(min(fDist/max(0.001, LayerTexGen[0].w), 1), 4);
    OUT.Color.g = fWeight * (1-fDist);

    #if %_RT_FOG
        #if !%_RT_VOLUMETRIC_FOG
            float4 fogColor = GetVolumetricFogColor(vertPassPos.WorldPos.xyz);
            OUT.Pos.w = fogColor.w;
        #else
            // do nothing
        #endif
    #endif

    return OUT;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////

void frag_unify_parameters(inout fragPass pPass)
{
    pPass.bRenormalizeNormal = true;
    pPass.bDeferredSpecularShading = true;

    #if %OFFSET_BUMP_MAPPING || %PARALLAX_OCCLUSION_MAPPING
        GetMicroDetailParams(pPass.nMicroDetailQuality, pPass.fBumpHeightScale, pPass.fHeightBias, pPass.fSelfShadowStrength);
    #endif

    #if %DETAIL_MAPPING
        pPass.bDetailBumpMapping = true;
        pPass.fDetailBumpScale = DetailBumpScale;
        pPass.vDetailBlendAmount = half2(DetailDiffuseScale, DetailGlossScale);
    #endif
}

////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////


void frag_unify(inout fragPass pPass, in vert2fragLayer IN)
{
    frag_unify_parameters(pPass);

    pPass.IN.baseTC = IN.baseTC;
    pPass.IN.bumpTC = pPass.IN.baseTC;
    pPass.IN.basesectorTC = IN.basesectorTC;

    pPass.IN.vTangent.xyz = IN.tangVec;
    pPass.IN.vBinormal.xyz = IN.binormVec;

    pPass.IN.vNormal.xyz = IN.normalVec;
    pPass.IN.vView = IN.Pos;
    pPass.IN.screenProj = IN.screenProj;
    pPass.IN.Color = IN.Color;

    pPass.IN.AvgFogVolumeContrib = half4(0, 0, 0, 1);
}

////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////

void frag_custom_begin(inout fragPass pPass)
{
    // load the diffuse texture
    half4 baseColor = GetTerrainTex(baseMap_FromContainerSampler, pPass.IN.basesectorTC.xy);

    float4 baseTC = pPass.IN.baseTC;

    pPass.cSpecularMap = PerMaterial_SpecularColor;
    #if %SPECULAR_MAP
        pPass.cSpecularMap *= GetTexture2D(specularMapSampler, baseTC.xy);
    #endif

    pPass.fGloss *= GetTexture2D(smoothnessMapSampler, pPass.IN.baseTC.xy).r;

    // Put back in gamma space to keep look of old blending modes (Note this assumes SRGB always enabled)
    baseColor.xyz = sqrt(baseColor.xyz);

    // material color is offseted from base
    pPass.cDiffuseMap.xyz = saturate(baseColor.xyz + ((pPass.cDiffuseMap-0.5h) * DetailTextureStrength));

    // Put back in linear space (Note this assumes SRGB always enabled)
    pPass.cDiffuseMap.xyz *= pPass.cDiffuseMap.xyz;

    // Output alpha
    half fAlpha = pPass.cDiffuseMap.a;

    pPass.fAlpha = (saturate(pPass.IN.Color.g)) * GetInstance_Opacity();   // sqrt is needed to avoid seams between layers

    // Compute non-linear alpha blend factor in case height map present (limited to POM/OM cases)
    if (pPass.nMicroDetailQuality)
    {
        pPass.fAlpha = GetLayerBlendingValue(heightMapSampler, pPass.IN.bumpTC.xy, 0, pPass.fAlpha, BlendFactor, BlendFalloff, true);
    }

    pPass.pCustom.fDiffuseAlpha = fAlpha * pPass.fAlpha;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////
// Lighting
void frag_custom_per_light(inout fragPass pPass, inout fragLightPass pLight)
{
    pLight.fNdotL = saturate(pLight.fNdotL);

    half3   cDiffuse = pLight.cDiffuse.xyz;
    half    fRoughness = SmoothnessToRoughness(pPass.fGloss, MIN_ROUGHNESS);
    half3   spec = SpecularBRDF(fRoughness, pPass.vNormal, pPass.vView, pLight.vLight, pPass.cSpecularMap.rgb, 1.0);

    // Final specular term
    half3 cSpecular = pLight.cSpecular.xyz * spec;

    half3 cK = pLight.fOcclShadow * pLight.fFallOff * pLight.cFilter * pLight.fNdotL; // 3 alu

    // Accumulate results
    pPass.cDiffuseAcc += cDiffuse * cK;

    if (GetShaderQuality() > QUALITY_LOW)
    {
        pPass.cSpecularAcc += cSpecular * cK;
    }
}

////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////

void frag_custom_ambient(inout fragPass pPass, inout half3 cAmbient)
{
    pPass.cAmbientAcc += cAmbient.xyz;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////

void frag_custom_end(inout fragPass pPass, inout half3 cFinal)
{
    #if !%_RT_AMBIENT
        cFinal *= pPass.fAlpha; // todo: why ? terrain layers alpha blending mode, this means 2x alpha applied
    #endif
}

////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////

#include "fragLib.cfi"

///////////////// terrain pixel shader //////////////////

EARLYDEPTHSTENCIL
pixout TerrainPS(vert2fragTerrain IN)
{
    pixout OUT    = (pixout)0;

    half4 baseColor = GetTerrainTex(baseMapSampler, IN.baseTC.xy);

    // Debug output
    #if %_RT_DEBUG0 || %_RT_DEBUG1 || %_RT_DEBUG2 || %_RT_DEBUG3
        DebugOutput(OUT.Color, IN.baseTC);
        return OUT;
    #endif

    half sunOccl = 0;

    // Used when sun is in use
    half3 terrainNormal = IN.vNormal.xyz;
    half3 vLighting = DecodeLightBuffer(tex2Dproj(sceneDiffuseAccSampler, IN.screenProj.xyzw));

    half NdotL = saturate(dot(half3(PerFrame_SunDirection.xyz), terrainNormal));
    half3 vColor = baseColor.xyz * (
            PerFrame_SunColor.xyz * (1.0h-sunOccl) * NdotL * (baseColor.a*0.6666h+0.3333h) + // sun diffuse TODO: remove it - merge into lbuffer
            vLighting); // deferred lighting

    half fOutA = GetInstance_Opacity() * baseColor.a;

    #if %_RT_HDR_SYSLUMINANCE
        vColor.xyz *= PerView_FogColor.w;
    #endif

    #if %_RT_FOG
        #if !%_RT_VOLUMETRIC_FOG
            ComputeGlobalFogPS(vColor.xyz, IN.vNormal.w);
        #else
            VolumetricFogTexcoord vtc = GetVolumetricFogTexcoordParamByScreenProj(IN.screenProj);
            float4 vf = GetVolumetricFogValue(vtc);
            ApplyVolumetricFog(vf, IN.fogColor, vtc, vColor.xyz);
        #endif
    #endif

    half4 cOutColor = half4(vColor.xyz, 1);

    // finally add them all together
    HDROutput(OUT, cOutColor, 1);

    return OUT;
}


EARLYDEPTHSTENCIL
pixout TerrainLayerPS(vert2fragLayer IN)
{
    pixout OUT = (pixout)0;

    // Initialize fragPass structure
    fragPass pPass = (fragPass) 0;
    frag_unify(pPass, IN);

    half4 cFinal = frag_shared_output(pPass);

    HDROutput(OUT, cFinal, 1);

    return OUT;
}

//////////////////////////////// technique ////////////////

technique General
<
string Script =
    "NoLights;"
    "TechniqueZ=ZPass;"
    "TechniqueShadowGen=ShadowGen;"
    >
{
    pass p0
    {
        VertexShader = TerrainVS() TerrainVS;

        ZEnable = true;
        ZWriteEnable = false;
        CullMode = Back;

        PixelShader = TerrainPS() TerrainPS;
    }
}

technique Layer
<
string Script = "Public;"
    "TechniqueZ=ZPass;"
    "PositionInvariant;";
>
{
    pass p0
    {
        ZEnable = true;
        CullMode = Back;

        SrcBlend = SrcAlpha;
        DestBlend = InvSrcAlpha;

        AlphaBlendEnable = true;
        ZWriteEnable = false;

        VertexShader = TerrainLayerVS() TerrainVS;
        PixelShader = TerrainLayerPS() TerrainPS;
    }
}

#include "CommonZPass.cfi"
#include "ShadowCommon.cfi"
#include "CommonShadowGenPass.cfi"

/////////////////////// eof ///

/*
* All or portions of this file Copyright (c) Amazon.com, Inc. or its affiliates or
* its licensors.
*
* For complete copyright and license terms please see the LICENSE at the root of this
* distribution (the "License"). All use of this software is governed by the License,
* or, if provided, by the license below or the license accompanying this file. Do not
* remove or modify any license notices. This file is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*
*/
// Original file Copyright Crytek GMBH or its affiliates, used under license.

#include "Common.cfi"
#include "ShadeLib.cfi"
#include "ModificatorVT.cfi"

// Shader global descriptions
float Script : STANDARDSGLOBAL
<
  string Script =
           "NoPreview;"
           "ShaderDrawType = Custom;"
           "ShaderType = FX;"
>;


//////////////////////////////// techniques ////////////////

//================================================================

/// Un-Tweakables //////////////////////

float4x4 objMatrix : PI_TransObjMatrix;

float4		eyePosInWS;
float4 		shadowCoords;
float4    lightParams;
float4    sphereParams;
float4    coneParams;
float4x4  projMatrix;
float4x4  invProjMatrix;
float4x4  mLightProj;
float4    lightPos;
float4 		lightDiffuse;

float4 g_ScreenScale;
float4 MiscParams;
float4 SampleOffsets[5];

sampler2D tex4 : register(s4);
sampler2D tex5 : register(s5);
sampler2D tex6 : register(s6);
sampler2D tex7 : register(s7);

// Tweakables ///////////////// 

float fFadeScale
<
  register = PER_MATERIAL_2.x;
  string UIName = "Fade Scale";      
  string UIHelp = "Fade Scale";                   
  string UIWidget = "slider";
  float UIMin = 0.1;
  float UIMax = 100.0;
  float UIStep = 0.1;  
> = 100.0;

float fNoiseCoordScale
<
  register = PER_MATERIAL_2.y;
  string UIName = "Noise Coord Scale";                   
  string UIHelp = "Scales noise applies to shadow/projector UVs";      
  string UIWidget = "slider";
  float UIMin = 0.0;
  float UIMax = 1.0;
  float UIStep = 0.01;  
> = 0.005;

float fGlobalDensity
<
  register = PER_MATERIAL_2.z;
  string UIName = "Global Density";      
  string UIHelp = "Global Density";                   
  string UIWidget = "slider";
  float UIMin = 0.0;
  float UIMax = 10.0;
  float UIStep = 0.1;  
> = 1.0;

float JitterScale
<
  register = PER_MATERIAL_2.w;
  string UIName = "Jitter Scale";                   
  string UIHelp = "Shadow Jitter Amount";      
  string UIWidget = "slider";
  float UIMin = 0.0;
  float UIMax = 100.0;
  float UIStep = 0.1;  
> = 10.0;

float fNoiseDirX
<
  register = PER_MATERIAL_1.x;
  string UIName = "Noise Dir X";                   
  string UIHelp = "Noise Dir X";      
  string UIWidget = "slider";
  float UIMin = -1.0;
  float UIMax = 1.0;
  float UIStep = 0.01;  
> = 1;

float fNoiseDirY
<
  register = PER_MATERIAL_1.y;
  string UIName = "Noise Dir Y";                   
  string UIHelp = "Noise Dir Y";      
  string UIWidget = "slider";
  float UIMin = -1.0;
  float UIMax = 1.0;
  float UIStep = 0.01;  
> = 0;

float fNoiseDirZ
<
  register = PER_MATERIAL_1.z;
  string UIName = "Noise Dir Z";                   
  string UIHelp = "Noise Dir Z";      
  string UIWidget = "slider";
  float UIMin = -1.0;
  float UIMax = 1.0;
  float UIStep = 0.01;  
> = 0;

float vNoiseSpeed
<
  register = PER_MATERIAL_1.w;
  string UIName = "Noise Speed";      
  string UIHelp = "Noise Speed";                   
  string UIWidget = "slider";
  float UIMin = 0.0;
  float UIMax = 100.0;
  float UIStep = 0.1;  
> = 5.0;

float fNoiseStrength
<
  register = PER_MATERIAL_0.x;
  string UIName = "Noise Contrast";                   
  string UIHelp = "Noise Contrast noise^x";      
  string UIWidget = "slider";
  float UIMin = 1.0;
  float UIMax = 10.0;
  float UIStep = 0.01;  
> = 1.0;

float fFadeDist
<
  register = PER_MATERIAL_0.y;
  string UIName = "Fade Distance";                   
  string UIHelp = "Fade Distance";      
  string UIWidget = "slider";
  float UIMin = 0.0;
  float UIMax = 1000.0;
  float UIStep = 1;  
> = 200.0;

#ifdef %ST_FIXED_POINT
Texture2D <uint> sceneDepthSampler : TS_ZTarget;
#else
sampler2D sceneDepthMapSampler = sampler_state
{
  Texture = $ZTarget;
  MinFilter = POINT;
  MagFilter = POINT;
  MipFilter = POINT; 
  AddressU = Clamp;
  AddressV = Clamp;	
};
#endif

sampler3D noiseMapSampler = sampler_state
{
  Texture = EngineAssets/Textures/Noise3D.dds;
  MinFilter = LINEAR;
  MagFilter = LINEAR;
  MipFilter = LINEAR; 
  AddressU = Wrap;
  AddressV = Wrap;
  AddressW = Wrap;
}



#include "ShadowCommon.cfi"

struct pixoutDepth
{
  half4 Color : COLOR0;	
	float Depth	: DEPTH;
};

struct app2vert
{  
  IN_P
};

struct a2v
{
  float4 Position  : POSITION; 
	float2 TexCoord	 : TEXCOORD; // unused but needs to be declared under DX10 to be able to share signatures
  float4 Color		 : COLOR;    // unused but needs to be declared under DX10 to be able to share signatures
};

struct v2f_box
{
  float4 hPos					: POSITION;
  float3 eyeDirInWS		: TEXCOORDN;
};

struct v2f_boxIn
{
  float4 WPos	:	SV_POSITION;
  float3 eyeDirInWS		: TEXCOORDN;
};

v2f_box BeamVS (a2v IN )
{
	v2f_box OUT = (v2f_box) 0;
	
	float4 vPos = IN.Position;

  float4 hPos = mul( vpMatrix, vPos  );

	float fBeamDist =  IN.Color.x;

	OUT.hPos = hPos;
	
	return OUT; 
}


float BilateralFilter(in sampler2D tex, in const float2 baseTC, in const float refDepth, in const float similarity)
{
	const int numSamples = 5;

	float accumVal = 0.0;
	float accumWeight = 0.0;


	float4 coord = baseTC.xyxy + SampleOffsets[0].xyxy;
	float4 sampleXY = tex2D(tex, coord.xy).xyxy;

	float2 sampleVal = sampleXY.rr;
	float2 sampleDepth = sampleXY.gg;

	float2 s = exp2(max(-10,abs(sampleDepth.x - refDepth) * -similarity)).xx;

	accumVal += sampleVal.x * s.x;
	accumWeight += s.x;

	for(int i=1; i< numSamples; i++)
	{

		coord = baseTC.xyxy + SampleOffsets[i].xyzw * float2(1,2).xxyy;
		sampleXY = float4( tex2D(tex, coord.xy).rg, tex2D(tex, coord.zw).rg) ;

		sampleVal = sampleXY.xz;
		sampleDepth = sampleXY.yw;

		s = exp2(max(-100, abs(sampleDepth - refDepth.xx) * -similarity.xx));


		accumVal 	+= dot(sampleVal, s);
		accumWeight += s.x+s.y;
	}


	return saturate((accumVal / accumWeight));
}


pixout BeamPS( v2f_boxIn IN )
{
	pixout OUT = (pixout) 0;
	
	float2 screenTC = IN.WPos * g_ScreenScale.zw;

	float sceneDepthNorm = GetLinearDepth_ProjTC(sceneDepthSampler, float4(screenTC,1,1));
	float sceneDepth = sceneDepthNorm * PerView_NearFarClipDist.y;

	float2 prePass  = BilateralFilter(tex7, screenTC, sceneDepthNorm, 5000.0f);  // todo: Bilateral upscale
	
	OUT.Color.xyz = lightDiffuse;

	OUT.Color.a  =  saturate(prePass.x);

	return OUT;
}

v2f_box BeamSamplingVS(a2v IN)
{
	v2f_box OUT = (v2f_box) 0;
	
	float4 vPos = IN.Position;

  float4 hPos = mul( vpMatrix, vPos  );

	OUT.hPos = hPos;

	float3 pWorldPos =  mul( (float3x4) objMatrix, vPos ).xyz;
	OUT.eyeDirInWS = pWorldPos - eyePosInWS.xyz;

	return OUT;
}

float _texLookupShadow(float2 vLookup, float depth, float farPlane, float fJitterScale)
{
	float	result = 0.0f;
	vLookup.xy = vLookup.yx * shadowCoords.zw + shadowCoords.xy; // note: yx swizzle
	
	const float fShadowJitterScale = fJitterScale;
	const float2 scale = fShadowJitterScale * shadowCoords.zw * MiscParams.xy;
	const float4 jitter[2] = {float4(0,0,1,0) , float4(0,1,1,1)};
	const float fBias = 0.1;

	float4 vCoords[2];
	vCoords[0] = scale.xyxy * jitter[0] + vLookup.xyxy;
	vCoords[1] = scale.xyxy * jitter[1] + vLookup.xyxy;

 	float4 shadowDepth;
 	shadowDepth.x = tex2D(tex6, vCoords[0].xy).x;
 	shadowDepth.y = tex2D(tex6, vCoords[0].zw).x;
 	shadowDepth.z = tex2D(tex6, vCoords[1].xy).x;
 	shadowDepth.w = tex2D(tex6, vCoords[1].zw).x;

	shadowDepth *= farPlane;

	shadowDepth += fBias;
		
	shadowDepth = shadowDepth >= depth.xxxx;
	
	result = (dot(shadowDepth,0.25h)) ;

	return result;
}

float _texLookup(float2 vLookup)
{
 	float result = tex2Dlod(tex5, float4(1.0f-saturate(vLookup.xy),0,0)).x;
	return result;
}

pixout BeamSamplingPS( v2f_boxIn IN )
{
	pixout OUT = (pixout) 0;

	float bNotInside = eyePosInWS.w;

	float fRadius = lightParams.x;
	float fAngle = lightParams.y;
	float fNearPlane = lightParams.z;
	float fFarPlane = lightParams.w;
	float fInvRadius =  1.0f/fRadius;

	float2 screenTC = IN.WPos * g_ScreenScale.xy;

	float fLengthEyeRay = length(IN.eyeDirInWS.xyz);
	float3 eyeDirInWS = IN.eyeDirInWS.xyz / fLengthEyeRay;

	//find start and end positions along viewray (TODO: optimise by putting in cone's space ?)

	//sphere case
//	float3 vS 	= eyePosInWS.xyz;  // start
//	float3 vD =  (eyeDirInWS.xyz); // should be frustum view
//	float4 vSP0 = sphereParams.xyzw;
//	float4 vSP1 = float4(vSP0.xyz, -vSP0.w);  // negative radius

//	float a = 1.0h;//dot(vD,vD);  //should always be one
//	float b = 2.0h * (dot(vS,vD) - dot(vD, vSP0));
//	float c = dot(vSP0,vSP1) + dot(vS,vS) - ( 2.0h * dot(vSP0,vS));

// cone case  (TODO: Can any of this be hoisted to VS?)
	float  fCosAngle	 	= coneParams.w;
	float	 fCosAngleSq	= fCosAngle*fCosAngle;
	float3 vAxis 				=	coneParams.xyz; 
	float3 pEye					= eyePosInWS.xyz; 
	float3 vViewDir 		= eyeDirInWS.xyz;
	float3 pVertex 			= sphereParams.xyz;
	float3 vVertToEye		= pEye - pVertex;
 	float  fAxisDotView = dot(vAxis,vViewDir);
	float	 fAxisDotVtE  = dot(vAxis,vVertToEye);
	float  fDirDotVtE 	= dot(vViewDir,vVertToEye);
	float  fVtESq				= dot(vVertToEye,vVertToEye);
	
	float a = fAxisDotView * fAxisDotView - fCosAngleSq;
	float b = 2.0 * (fAxisDotView * fAxisDotVtE 	- fCosAngleSq * fDirDotVtE);
	float c = fAxisDotVtE  * fAxisDotVtE  - fCosAngleSq * fVtESq;

// planes case
	float3 pNear 			= fNearPlane 	* vAxis + pVertex;
	float3 pFar 			= fFarPlane 	* vAxis + pVertex;
	float3 vEyeToNear	= pNear - pEye;
	float3 vEyeToFar 	= pFar - pEye;
	float	 fAxisDotEtN = dot(vAxis,vEyeToNear);
	float	 fAxisDotEtF = dot(vAxis,vEyeToFar);
	
	float p0 = (fAxisDotEtN / fAxisDotView);
	float p1 = (fAxisDotEtF / fAxisDotView);
	
	p0 = max(p0,p1);
		
			
//Quadratic Equation:	(-b +- srqt(b*b - 4ac)) / 2a

	float discSq =  (b*b) - (4.0h * a * c);
	float disc = sqrt(discSq);

	float2 quadraticResult = (float2( (-b - disc) / (2.0h * a), (-b + disc) / (2.0h * a)));

	float fTest = step(dot(vAxis, (pEye + vViewDir * quadraticResult.x - pVertex)),0.0h);

	float c0 = (quadraticResult.x > 0.0f? quadraticResult.x : 99999.0f) + fTest*99999.0f;

	float t0 = fLengthEyeRay * bNotInside;
	float t1 = min(c0,p0);

	float sceneDepthNorm = GetLinearDepth_ProjTC(sceneDepthSampler, float4(screenTC,1,1));
	float sceneDepth = sceneDepthNorm * PerView_NearFarClipDist.y;

	t1 = sceneDepth < t1 ? sceneDepth : t1;
	t0 = sceneDepth < t0 ? sceneDepth : t0; // depth test, shouldnt be neccesary

	float3 pStart 		= pEye + vViewDir * t0;
	float3 pEnd 			= pEye + vViewDir * t1;

	float fDistance = length(pStart - pEnd); 
	
#if %DOUBLE_SAMPLING
	int nMaxTaps = 64;
#else
	int nMaxTaps = 32;
#endif

	float fMaxTaps = (float)nMaxTaps;
	float fMaxTapsInv = 1.0f/fMaxTaps;
	int i = 0;
	float3 fAccumulation = 0;
	float3 vScaledDir 	= eyeDirInWS*(fDistance)*fMaxTapsInv;
	float3 vSamplePosWS = pStart;
	float2 vLookup;
	float4 vProjPos;

	float3 vFinalNoiseDir =  float3(fNoiseDirX,fNoiseDirY,fNoiseDirZ) * PerView_AnimGenParams.z * vNoiseSpeed  - pVertex;

	float4 startProj 	= mul(float4(pStart,1.0f), projMatrix);
	float4 endProj 		= mul(float4(pEnd,1.0f), projMatrix);
	
	float fIter = 0.0f;

	float noise 			= 1.0f;
	float noiseCoords = 0.0f;
	float fFallOff 		= 1.0f;
	float fFallIn 		= 1.0f;
	float depth 			= 1.0f;	
	float	texProj   	= 1.0f;
	
	float fSqRadius = fRadius * fRadius;
	float fInvScaledRadius = 1.0f/(fFadeScale * fRadius);
	float fFallInOffset = (fNearPlane + (0.01*fRadius));
	float fFallInOffsetSq = fFallInOffset*fFallInOffset;
	[unroll]
	for(i =0; i < nMaxTaps; i++) 
	{
		
		vSamplePosWS += vScaledDir;

		float4 proj = lerp(startProj, endProj, fIter);

		float4 projW = proj / proj.w;

		float2 vCoords = saturate(projW.xy*0.5+0.5f);

		if( projW.z > 0.0f && projW.z < 1.0f)
		{
#if %NOISE
			noise =   tex3D(noiseMapSampler,(vSamplePosWS.xyz + vFinalNoiseDir)*fInvRadius).a;
			noiseCoords = (2*noise-1)*fNoiseCoordScale;
#endif
#if %_RT_SAMPLE0
			depth 	 = _texLookupShadow(vCoords+noiseCoords.xx, proj.z, fFarPlane, JitterScale);	
#endif

			texProj  = _texLookup(vCoords+noiseCoords.xx);

#if %FALLOFF
			float3 distVec = (vSamplePosWS-pVertex) ;	
			float sqDist= dot(distVec,distVec);
			fFallOff = saturate((fSqRadius - sqDist) * (fInvScaledRadius));
			fFallIn = saturate( (sqDist - fFallInOffsetSq) * 0.01);
#endif

			fAccumulation.x += texProj * depth;
			fAccumulation.y += noise;
			fAccumulation.z += (fFallOff*fFallIn);
		}
	
		fIter += fMaxTapsInv;

	}

	fAccumulation = ( fAccumulation * fMaxTapsInv);

	float fDensity = fDistance / fRadius;

	OUT.Color.r =  (fAccumulation.x);
	OUT.Color.r *= saturate(pow(fAccumulation.y,fNoiseStrength)*fNoiseStrength);
	OUT.Color.r *= (fAccumulation.z * fDensity);
	OUT.Color.r *= fGlobalDensity;

	OUT.Color.r *= saturate((fFadeDist*fFadeDist)/fVtESq); // Distance from camera fade out

	OUT.Color.g = sceneDepthNorm;

	return OUT;
}

pixoutDepth BeamZPS( v2f_boxIn IN )
{
	pixoutDepth OUT = (pixoutDepth) 0;

	float2 screenTC = IN.WPos * g_ScreenScale.xy;

	float sceneDepthNorm = GetLinearDepth_ProjTC(sceneDepthSampler, float4(screenTC,1,1));
	float sceneDepth = sceneDepthNorm * PerView_NearFarClipDist.y;

	float2 ProjRatio = PerView_ProjRatio.xy;

	float fNonLinearDepth = (ProjRatio.y/sceneDepthNorm) + ProjRatio.x; //linear to z/w conversion

	OUT.Color.rg = float2(0,sceneDepthNorm);
	OUT.Depth = fNonLinearDepth;

	return OUT;
}

technique LightBeam
<
  string Script = "Public;";
>
{
  CustomRE Beam
  {
  }

  pass p0 //done in reverse rendering order due to some parser issues
  {                   
		VertexShader = BeamVS();
   	PixelShader = BeamPS() BeamPS;    
  }

  pass p1
  {              
		VertexShader = BeamSamplingVS();
   	PixelShader = BeamSamplingPS() BeamPS;    
  }

  pass p2
  {              
		VertexShader = BeamVS();
   	PixelShader = BeamZPS() BeamPS;    
  }
}

/////////////////////// eof ///

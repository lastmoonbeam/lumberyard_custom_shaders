/*
* All or portions of this file Copyright (c) Amazon.com, Inc. or its affiliates or
* its licensors.
*
* For complete copyright and license terms please see the LICENSE at the root of this
* distribution (the "License"). All use of this software is governed by the License,
* or, if provided, by the license below or the license accompanying this file. Do not
* remove or modify any license notices. This file is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*
*/
// Original file Copyright Crytek GMBH or its affiliates, used under license.

// DEPRECATED - please try merging debug functionality into CommonDebugPass

#include "Common.cfi"

// Shader global descriptions
float Script : STANDARDSGLOBAL
<
  string Script =
           "ShaderDrawType = Light;"
           "ShaderType = General;"
>;

float4x4 LayerTexGen      : PB_TerrainLayerGen;
float4 TexelDensityParam  : PB_TexelDensityParam;
float4 TexelDensityColor  : PB_TexelDensityColor;

#include "ShadeLib.cfi"

// Un-Tweakables /////////////////

ENVIRONMENTMAP
ENVIRONMENTCUBEMAP

#include "VertexLib.cfi"

///////////////// terrain vertex shader //////////////////
vert2FragGeneral SketchTerrainLayerVS(app2vertGeneral IN_common)
{
  vert2FragGeneral OUT = (vert2FragGeneral)0; 

  	app2vertGeneral IN = IN_common;
#if %TEMP_TERRAIN
	IN.vertCommon.Position.z = IN_common.vertCommon.baseTC.x;
#endif

    streamPos vertPassPos = (streamPos)0;
    streamPos_FromGeneral(IN, vertPassPos);

    OUT.HPosition = Pos_VS_Terrain(0.001f, PerView_ViewProjZeroMatr, vertPassPos);

    float4 tcLayer;

    float3 vDiffPos = vertPassPos.WorldPos.xyz;
    vDiffPos.xy -= LayerTexGen[3].xy;
    tcLayer.xy = mul((float2x3)LayerTexGen, vDiffPos);
    tcLayer.z = 0;
    tcLayer.w = vertPassPos.Position.w;
    _ModifyUV_1(tcLayer, OUT.baseTC, vertPassPos.Position );

    float fDist = length(vertPassPos.WorldPos.xyz - PerView_WorldViewPos.xyz);
    fDist = pow(min(fDist/max(0.001, LayerTexGen[0].w), 1), 4);
    OUT.baseTC.w = (1-fDist);

    return OUT;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
pixout SketchTexelDensityPS(vert2FragGeneral IN)
{
	pixout OUT = (pixout) 0;  

  float2 p = frac(IN.baseTC.xy * TexelDensityParam.xy / 32.0); // 32x32 texels are a 2x2 checkerboard block
  float color = (p.y < 0.5 ? 1 : 0.0);
  float checker = p.x < 0.5 ? 1-color : color;
  
  OUT.Color.xyz = 0.1*GetTexture2D(diffuseMapSampler, IN.baseTC.xy)+0.9*float3(checker*TexelDensityColor.xyz);
	OUT.Color.w = IN.baseTC.w;

	return OUT;
}

//////////////////////////////// technique ////////////////

technique TexelDensityTerrainLayer
{
  pass p0
  {
    VertexShader = SketchTerrainLayerVS() TerrainVS;
    PixelShader = SketchTexelDensityPS() TerrainPS;
    
    ZEnable = true;
    CullMode = Back;

    SrcBlend = SrcAlpha;
    DestBlend = InvSrcAlpha;
  
    AlphaBlendEnable = true;
    ZWriteEnable = false;
  }
}
